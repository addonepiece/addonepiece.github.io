<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[敏捷导入。]]></title>
      <url>https://addonepiece.github.io/2021/10/15/agile-initimport/</url>
      <content type="html"><![CDATA[<h1 id="转至大佬闫微信公众号查看全文"><a href="#转至大佬闫微信公众号查看全文" class="headerlink" title="转至大佬闫微信公众号查看全文"></a><a href="https://mp.weixin.qq.com/s/KHLUjYgOE2a2LpeM0f-n2w" target="_blank" rel="noopener">转至大佬闫微信公众号查看全文</a></h1>]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dockerCommand4Windows]]></title>
      <url>https://addonepiece.github.io/2020/09/14/dockerCommand4Windows/</url>
      <content type="html"><![CDATA[<h1 id="常用docker命令"><a href="#常用docker命令" class="headerlink" title="常用docker命令"></a>常用docker命令</h1><h2 id="widows"><a href="#widows" class="headerlink" title="widows"></a>widows</h2>]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java编码规范-基于alibaba的代码规范]]></title>
      <url>https://addonepiece.github.io/2020/08/24/javacodestandard/</url>
      <content type="html"><![CDATA[<h2 id="alibaba的代码规范"><a href="#alibaba的代码规范" class="headerlink" title="alibaba的代码规范"></a>alibaba的代码规范</h2><p>阿里巴巴开发手册git地址：<a href="https://github.com/alibaba/p3c" target="_blank" rel="noopener">https://github.com/alibaba/p3c</a><br><img src="/images/alibabacodestyle/Alibabacodestyle1.png" alt><br><img src="/images/alibabacodestyle/Alibabacodestyle2.png" alt></p>
<h2 id="请使用如下插件，并遵守阿里编码规约"><a href="#请使用如下插件，并遵守阿里编码规约" class="headerlink" title="请使用如下插件，并遵守阿里编码规约"></a>请使用如下插件，并遵守阿里编码规约</h2><p><img src="/images/alibabacodestyle/Alibabacodestyle3.png" alt></p>
<h2 id="执行代码检查"><a href="#执行代码检查" class="headerlink" title="执行代码检查"></a>执行代码检查</h2><p><img src="/images/alibabacodestyle/4.png" alt></p>
<h2 id="代码样式"><a href="#代码样式" class="headerlink" title="代码样式"></a>代码样式</h2><ol>
<li><p>打开Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Code Templates<br>点击import 插入eclipse-codetemplate<br>(eclipse-codestyle.xml)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span> <span class="attr">version</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span> <span class="attr">kind</span>=<span class="string">"CodeFormatterProfile"</span> <span class="attr">name</span>=<span class="string">"P3C-CodeStyle"</span> <span class="attr">version</span>=<span class="string">"13"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可变参数的... Idea没有对应的配置项，强制insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--枚举值之间 Idea没有对应的配置项，强制insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=Java:SPACE_BEFORE_COMMA--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=Java:SPACE_BEFORE_COMMA</span></span><br><span class="line"><span class="comment">        由于IDEA只有一个SPACE_BEFORE_COMMA选项，所以统一设置 insert_space_before_comma 为 do not insert</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--insert_space_before_comma end--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=Java:SPACE_AFTER_COMMA_IN_TYPE_ARGUMENTS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--IDEA只有一个配置项SPACE_AFTER_COMMA，insert_space_after_comma*统一设置成insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--insert_space_after_comma end--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=Java:SPACE_BEFORE_COLON--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=Java:SPACE_AFTER_COLON--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA不支持配置，默认do not insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个在Eclipse也没有找到配置的地方--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_semicolon=Java:SPACE_BEFORE_SEMICOLON</span></span><br><span class="line"><span class="comment">        程序导入的时候强制将SPACE_BEFORE_SEMICOLON设置为false</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_semicolon"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SPACE_AFTER_SEMICOLON=true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA不支持配置,do not insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA不支持，使用默认--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA不支持配置，使用如下值，两者对应--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Java:SPACE_BEFORE_OPENING_ANGLE_BRACKET_IN_TYPE_PARAMETER--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=Java:SPACE_AFTER_CLOSING_ANGLE_BRACKET_IN_TYPE_ARGUMENT--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA使用了对应的配置：Java:SPACE_WITHIN_ARRAY_INITIALIZER_BRACES，但感觉不太好，IDEA默认不插入，Eclipse也使用不插入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--use default insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--use default do not insert --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--use default insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=Java:SPACE_BEFORE_SWITCH_LBRACE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=Java:SPACE_BEFORE_CLASS_LBRACE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=Java:SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=Java:SPACE_BEFORE_METHOD_LBRACE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=Java:SPACE_AFTER_QUEST--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=Java:SPACE_BEFORE_QUEST--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=Java:SPACE_BEFORE_ANOTATION_PARAMETER_LIST--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--use default do not insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_ASSIGNMENT_OPERATORS，使用insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=Java:SPACE_BEFORE_CATCH_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=Java:SPACE_BEFORE_METHOD_CALL_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=Java:SPACE_BEFORE_TRY_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_UNARY_OPERATOR，使用do not insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=Java:SPACE_BEFORE_IF_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=Java:SPACE_BEFORE_WHILE_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=Java:SPACE_AFTER_TYPE_CAST--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=Java:SPACE_BEFORE_METHOD_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=Java:SPACE_BEFORE_FOR_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=Java:SPACE_BEFORE_SYNCHRONIZED_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=Java:SPACE_BEFORE_SWITCH_PARENTHESES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面两个对应IDEA中的一个配置Java:SPACE_AROUND_LAMBDA_ARROW，使用insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SPACE_WITHIN_EMPTY_ARRAY_INITIALIZER_BRACES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple classes in one line --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple method in one line --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--因为Idea不支持配置，所以设置为 Idea默认值--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_enum_constant"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_label"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Idea可以通过Wrap Always实现 TODO--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; Simple block in one line -&gt; do not select --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Idea -&gt; Wrapping And Braces -&gt; try statement -&gt; catch.... (Java:CATCH_ON_NEW_LINE)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=Java:ARRAY_INITIALIZER_RBRACE_ON_NEXT_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--#org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=Java:ARRAY_INITIALIZER_LBRACE_ON_NEXT_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=Java:ELSE_ON_NEW_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=Java:WHILE_ON_NEW_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=Java:FINALLY_ON_NEW_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--comment start--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.line_length"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ENABLE_JAVADOC_FORMATTING--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--IDEA无对应设置，所以关闭对block comment的格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_block_comments"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=Java:KEEP_FIRST_COLUMN_COMMENT--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.use_on_off_tags=FORMATTER_TAGS_ENABLED--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.use_on_off_tags"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.disabling_tag=FORMATTER_OFF_TAG--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.disabling_tag"</span> <span class="attr">value</span>=<span class="string">"@formatter:off"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.enabling_tag=FORMATTER_ON_TAG--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.enabling_tag"</span> <span class="attr">value</span>=<span class="string">"@formatter:on"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--use default do not insert--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter"</span> <span class="attr">value</span>=<span class="string">"do not insert"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面的没有IDEA对应项，在代码里面对IDEA中使用默认值即可,LINE_COMMENT_AT_FIRST_COLUMN BLOCK_COMMENT_AT_FIRST_COLUMN设置为false--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags"</span> <span class="attr">value</span>=<span class="string">"insert"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.indent_root_tags"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_line_comments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_header"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_source_code"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.format_html"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.join_lines_in_comments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.comment.indent_parameter_description"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--comment end--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_after_imports=Java:BLANK_LINES_AFTER_IMPORTS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_after_imports"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_imports=Java:BLANK_LINES_BEFORE_IMPORTS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_imports"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_after_package=Java:BLANK_LINES_AFTER_PACKAGE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_after_package"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=Java:BLANK_LINES_AROUND_CLASS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=Java:BLANK_LINES_BEFORE_METHOD_BODY--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_field=Java:BLANK_LINES_AROUND_FIELD--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_field"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_method=Java:BLANK_LINES_AROUND_METHOD--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_method"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.blank_lines_before_package=Java:BLANK_LINES_BEFORE_PACKAGE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_package"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面IDEA没有对应设置，使用对应值即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.align_fields_grouping_blank_lines"</span> <span class="attr">value</span>=<span class="string">"2147483647"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_before_member_type"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.indentation.size=Java:IndentOptions:INDENT_SIZE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indentation.size"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.continuation_indentation=Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.continuation_indentation"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=Java:IndentOptions:SMART_TABS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=Java:INDENT_CASE_FROM_SWITCH--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--KEEP_INDENTS_ON_EMPTY_LINES--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_empty_lines"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.tabulation.size=Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.tabulation.size"</span> <span class="attr">value</span>=<span class="string">"4"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Java:IndentOptions:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.tabulation.char"</span> <span class="attr">value</span>=<span class="string">"space"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面IDEA没有对应设置，使用对应值即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_assignment"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_binary_expression"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_resources_in_try"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面没有对应的IDEA设置，Eclipse先使用对应值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_enum_constants"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_parameterized_type_references"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_type_parameters"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_method_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_compact_if"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_type_arguments"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_for_loop_header"</span> <span class="attr">value</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA默认配置在同一行，Eclipse使用对应值即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_for_statment"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_invocation"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_switch_statement"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_enum_constant_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_if_while_statement"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_catch_clause"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_annotation"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_try_clause"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_method_delcaration"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.parentheses_positions_in_lambda_declaration"</span> <span class="attr">value</span>=<span class="string">"common_lines"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Java:BINARY_OPERATION_SIGN_ON_NEXT_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.wrap_before_binary_operator"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--ASSIGNMENT_WRAP 需要设置为 WRAP_AS_NEEDED  WRAP_AS_NEEDED . Add in jdt.core-3.12，it's not work in previous version --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.wrap_before_assignment_operator"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--IDEA无配置项，Eclipse使用对应值即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.wrap_before_conditional_operator"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=Java:KEEP_CONTROL_STATEMENT_IN_ONE_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.compact_else_if=Java:SPECIAL_ELSE_IF_TREATMENT--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.compact_else_if"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Java:ALIGN_GROUP_FIELD_DECLARATIONS--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.align_type_members_on_columns"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Java:&lt;Programmatic&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.join_wrapped_lines"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--统一为end_of_lint，IDEA默认一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_block"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_lambda_body"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_switch"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        &lt;setting id="org.eclipse.jdt.core.compiler.source" value="1.8"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;setting id="org.eclipse.jdt.core.compiler.compliance" value="1.8"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;setting id="org.eclipse.jdt.core.compiler.codegen.targetPlatform" value="1.8"/&gt;</span></span><br><span class="line"><span class="comment">                        &lt;setting id="org.eclipse.jdt.core.compiler.problem.enumIdentifier" value="error"/&gt;</span></span><br><span class="line"><span class="comment">                                &lt;setting id="org.eclipse.jdt.core.compiler.problem.assertIdentifier" value="error"/&gt;</span></span><br><span class="line"><span class="comment">                                        &lt;setting id="org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode" value="enabled"/&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Java:KEEP_SIMPLE_BLOCKS_IN_ONE_LINE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Java:CLASS_BRACE_STYLE，统一使用end_of_line TODO--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration"</span> <span class="attr">value</span>=<span class="string">"end_of_line"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--org.eclipse.jdt.core.formatter.lineSplit=RIGHT_MARGIN--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.core.formatter.lineSplit"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Window-&gt;Preferences-&gt;Java-&gt;Code Style-&gt;Formatter<br>点击import 插入eclipse-codestyle<br>(eclipse-codetemplate.xml）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span><span class="tag">&lt;<span class="name">templates</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"gettercomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for getter method"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.gettercomment"</span> <span class="attr">name</span>=<span class="string">"gettercomment"</span>&gt;</span>/**</span><br><span class="line"> * @return the $&#123;bare_field_name&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"settercomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for setter method"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.settercomment"</span> <span class="attr">name</span>=<span class="string">"settercomment"</span>&gt;</span>/**</span><br><span class="line"> * @param $&#123;param&#125; the $&#123;bare_field_name&#125; to set</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"constructorcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for created constructors"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.constructorcomment"</span> <span class="attr">name</span>=<span class="string">"constructorcomment"</span>&gt;</span>/**</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"filecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for created Java files"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.filecomment"</span> <span class="attr">name</span>=<span class="string">"filecomment"</span>/&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"typecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for created types"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.typecomment"</span> <span class="attr">name</span>=<span class="string">"typecomment"</span>&gt;</span>/**</span><br><span class="line"> * @author $&#123;user&#125;</span><br><span class="line"> * @date $&#123;currentDate:date('YYYY/MM/dd')&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"fieldcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for fields"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.fieldcomment"</span> <span class="attr">name</span>=<span class="string">"fieldcomment"</span>&gt;</span>/**</span><br><span class="line"> *</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"methodcomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for non-overriding methods"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.methodcomment"</span> <span class="attr">name</span>=<span class="string">"methodcomment"</span>&gt;</span>/**</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"overridecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for overriding methods"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.overridecomment"</span> <span class="attr">name</span>=<span class="string">"overridecomment"</span>&gt;</span>/* (non-Javadoc)</span><br><span class="line"> * $&#123;see_to_overridden&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"delegatecomment_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Comment for delegate methods"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.delegatecomment"</span> <span class="attr">name</span>=<span class="string">"delegatecomment"</span>&gt;</span>/**</span><br><span class="line"> * $&#123;tags&#125;</span><br><span class="line"> * $&#123;see_to_target&#125;</span><br><span class="line"> */<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"newtype_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Newly created files"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.newtype"</span> <span class="attr">name</span>=<span class="string">"newtype"</span>&gt;</span>$&#123;filecomment&#125;</span><br><span class="line"> $&#123;package_declaration&#125;</span><br><span class="line"></span><br><span class="line"> $&#123;typecomment&#125;</span><br><span class="line"> $&#123;type_declaration&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"classbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in new class type bodies"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.classbody"</span> <span class="attr">name</span>=<span class="string">"classbody"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"interfacebody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in new interface type bodies"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.interfacebody"</span> <span class="attr">name</span>=<span class="string">"interfacebody"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"enumbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in new enum type bodies"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.enumbody"</span> <span class="attr">name</span>=<span class="string">"enumbody"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"annotationbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in new annotation type bodies"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.annotationbody"</span> <span class="attr">name</span>=<span class="string">"annotationbody"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"catchblock_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in new catch blocks"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.catchblock"</span> <span class="attr">name</span>=<span class="string">"catchblock"</span>&gt;</span>// $&#123;todo&#125; Auto-generated catch block</span><br><span class="line"> $&#123;exception_var&#125;.printStackTrace();<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"methodbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in created method stubs"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.methodbody"</span> <span class="attr">name</span>=<span class="string">"methodbody"</span>&gt;</span>// $&#123;todo&#125; Auto-generated method stub</span><br><span class="line"> $&#123;body_statement&#125;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"constructorbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in created constructor stubs"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.constructorbody"</span> <span class="attr">name</span>=<span class="string">"constructorbody"</span>&gt;</span>$&#123;body_statement&#125;</span><br><span class="line"> // $&#123;todo&#125; Auto-generated constructor stub<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"getterbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in created getters"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.getterbody"</span> <span class="attr">name</span>=<span class="string">"getterbody"</span>&gt;</span>return $&#123;field&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">autoinsert</span>=<span class="string">"true"</span> <span class="attr">context</span>=<span class="string">"setterbody_context"</span> <span class="attr">deleted</span>=<span class="string">"false"</span> <span class="attr">description</span>=<span class="string">"Code in created setters"</span> <span class="attr">enabled</span>=<span class="string">"true"</span> <span class="attr">id</span>=<span class="string">"org.eclipse.jdt.ui.text.codetemplates.setterbody"</span> <span class="attr">name</span>=<span class="string">"setterbody"</span>&gt;</span>$&#123;field&#125; = $&#123;param&#125;;<span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置代码格式化的实现时间（一般为当保存的时候自动格式化）：<br>进入eclipse菜单: Window &gt; Preferences &gt; Java &gt; Editor &gt; Save Actions，勾选上Perform the selected actions on save 下的Format source code，并选择 Format all lines，勾选上Organize imports，点击右下角的Apply 使其生效。</p>
</li>
</ol>
<h2 id="代码质量检查-Findbugs"><a href="#代码质量检查-Findbugs" class="headerlink" title="代码质量检查 - Findbugs"></a>代码质量检查 - Findbugs</h2><h3 id="安装spotbugs"><a href="#安装spotbugs" class="headerlink" title="安装spotbugs"></a>安装spotbugs</h3><p><img src="/images/alibabacodestyle/5.png" alt></p>
<h3 id="代码修复"><a href="#代码修复" class="headerlink" title="代码修复"></a>代码修复</h3><p><img src="/images/alibabacodestyle/6.png" alt></p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos7上安装Solr-8.4.1]]></title>
      <url>https://addonepiece.github.io/2020/07/15/Centos7installSolr-8-4-1/</url>
      <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>1.操作系统centos7 64位。<br>2.需要安装jdk1.8及以上版本。<br>3.使用solr内置的jetty容器部署solr服务。</p>
<h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>1.目前后台使用solr不支持权限。<br>2.目前只需部署单节点即可。</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul>
<li>安装包：solr-8.4.1.tgz</li>
<li>下载地址：<a href="https://archive.apache.org/dist/lucene/solr/8.4.1/solr-8.4.1.tgz" target="_blank" rel="noopener">https://archive.apache.org/dist/lucene/solr/8.4.1/solr-8.4.1.tgz</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="在-usr-local-下创建solr目录，并赋权限。"><a href="#在-usr-local-下创建solr目录，并赋权限。" class="headerlink" title="在/usr/local/下创建solr目录，并赋权限。"></a>在/usr/local/下创建solr目录，并赋权限。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@admin /]# cd /usr/local/</span><br><span class="line">[root@admin local]# mkdir solr</span><br><span class="line">[root@admin local]# chmod -R 777 solr</span><br></pre></td></tr></table></figure>
<h2 id="进入solr文件夹，上传压缩包solr-8-4-1-tgz，并解压得到solr-8-4-1文件夹。"><a href="#进入solr文件夹，上传压缩包solr-8-4-1-tgz，并解压得到solr-8-4-1文件夹。" class="headerlink" title="进入solr文件夹，上传压缩包solr-8.4.1.tgz，并解压得到solr-8.4.1文件夹。"></a>进入solr文件夹，上传压缩包solr-8.4.1.tgz，并解压得到solr-8.4.1文件夹。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@admin local]# cd solr/</span><br><span class="line">[root@admin solr]# ls</span><br><span class="line">solr-8.4.1.tgz</span><br><span class="line">[root@admin solr]# tar -xvf solr-8.4.1.tgz</span><br><span class="line">[root@admin solr]# ls</span><br><span class="line">solr-8.4.1  solr-8.4.1.tgz</span><br></pre></td></tr></table></figure>
<h1 id="启动solr"><a href="#启动solr" class="headerlink" title="启动solr"></a>启动solr</h1><ol>
<li><p>进入解压后的solr-8.4.1/bin/目录，solr这个脚本用于启动、停止、查看solr运行状态等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">./solr start -p 端口 -force 启动    </span><br><span class="line">./solr stop -all 关闭</span><br><span class="line">./solr status 查看状态</span><br><span class="line">[root@admin solr]# cd solr-8.4.1/bin/</span><br><span class="line">[root@admin bin]# ls</span><br><span class="line">init.d  install_solr_service.sh  oom_solr.sh  post  solr  solr.cmd  solr.in.cmd  solr.in.sh</span><br><span class="line">[root@admin bin]# ./solr start -p 8983 -force</span><br><span class="line">Started Solr server on port 8983 (pid=7834). Happy searching!</span><br><span class="line">注意：</span><br><span class="line">如果linux系统中缺少lsof组件，在启动solr时将报如下提示:</span><br><span class="line">*** [WARN] *** Your open file limit is currently 1024.  </span><br><span class="line">It should be set to 65000 to avoid operational disruption.  </span><br><span class="line">If you no longer wish to see this warning, set SOLR_ULIMIT_CHECKS to false in your profile or solr.in.sh</span><br><span class="line">*** [WARN] ***  Your Max Processes Limit is currently 3795.  </span><br><span class="line">It should be set to 65000 to avoid operational disruption.  </span><br><span class="line">If you no longer wish to see this warning, set SOLR_ULIMIT_CHECKS to false in your profile or solr.in.sh</span><br><span class="line">NOTE: Please install lsof as this script needs it to determine if Solr is listening on port 8983.</span><br><span class="line">解决方案: 安装 lsof 组件即可</span><br><span class="line">[root@admin bin]# yum -y install lsof</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置防火墙开启8983端口开放远程访问</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@admin bin]# firewall-cmd --zone=public --add-port=8983/tcp --permanent</span><br><span class="line">success</span><br><span class="line">[root@admin bin]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器访问管理页面 <a href="http://192.168.159.130:8983/solr" target="_blank" rel="noopener">http://192.168.159.130:8983/solr</a><br><img src="/images/solr1/solr1-38.png" alt></p>
</li>
</ol>
<h1 id="创建内核"><a href="#创建内核" class="headerlink" title="创建内核"></a>创建内核</h1><p>目前后台需创建两个内核：bankstatement用于对账单的索引、enterprise用于对手方企业的索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@admin bin]# ./solr create -c bankstatement -force</span><br><span class="line">WARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.</span><br><span class="line">        To turn off: bin/solr config -c bankstatement -p 8983 -action set-user-property -property update.autoCreateFields -value false</span><br><span class="line">Created new core &apos;bankstatement&apos;</span><br><span class="line">[root@admin bin]# ./solr create -c enterprise -force</span><br><span class="line">WARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.</span><br><span class="line">        To turn off: bin/solr config -c enterprise -p 8983 -action set-user-property -property update.autoCreateFields -value false</span><br><span class="line">Created new core &apos;enterprise&apos;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/solr1/solr1-39.png" alt><br><img src="/images/solr1/solr1-40.png" alt></p>
<h1 id="配置字段"><a href="#配置字段" class="headerlink" title="配置字段"></a>配置字段</h1><p>在内核上创建字段、以及配置字段属性。</p>
<ol>
<li>内核bankstatement:发送post请求：<a href="http://192.168.159.130:8983/solr/bankstatement/schema" target="_blank" rel="noopener">http://192.168.159.130:8983/solr/bankstatement/schema</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：application/json</span><br><span class="line">请求体：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;add-field&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;leId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;leAccountName&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;leAccountNo&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;trxFlag&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;accountingDateId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;trxDate&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;amount&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pdouble&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;amountAbs&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pdouble&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;currency&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;amountBalance&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pdouble&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;cashType&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;customerAccountName&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;customerAccountNo&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;userMemo&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;bank&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;createDate&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;createdBy&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;yearId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;quarterId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;monthId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;weekId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;dayId&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;pint&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;catalog&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;tags&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:true,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;add-dynamic-field&quot;:&#123;</span><br><span class="line">        &quot;name&quot;:&quot;muti_catalog_*&quot;,</span><br><span class="line">        &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">        &quot;indexed&quot;:true,</span><br><span class="line">        &quot;stored&quot;:true,</span><br><span class="line">        &quot;multiValued&quot;:false,</span><br><span class="line">        &quot;required&quot;:false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">返回：表示成功</span><br><span class="line">&#123;</span><br><span class="line">    &quot;responseHeader&quot;:&#123;</span><br><span class="line">        &quot;status&quot;:0,</span><br><span class="line">        &quot;QTime&quot;:22606</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/solr1/solr1-41.png" alt></p>
<ol start="2">
<li>内核enterprise:<br>发送post请求：<a href="http://192.168.159.130:8983/solr/enterprise/schema" target="_blank" rel="noopener">http://192.168.159.130:8983/solr/enterprise/schema</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：application/json</span><br><span class="line">请求体：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;add-field&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;name&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:false,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;:&quot;tags&quot;,</span><br><span class="line">            &quot;type&quot;:&quot;string&quot;,</span><br><span class="line">            &quot;indexed&quot;:true,</span><br><span class="line">            &quot;stored&quot;:true,</span><br><span class="line">            &quot;multiValued&quot;:true,</span><br><span class="line">            &quot;required&quot;:false</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">返回：表示成功</span><br><span class="line">&#123;</span><br><span class="line">    &quot;responseHeader&quot;:&#123;</span><br><span class="line">        &quot;status&quot;:0,</span><br><span class="line">        &quot;QTime&quot;:12265</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/images/solr1/solr1-42.png" alt></p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[企业级搜索应用服务器Solr（一）]]></title>
      <url>https://addonepiece.github.io/2020/06/15/solr-one/</url>
      <content type="html"><![CDATA[<h1 id="初识Solr"><a href="#初识Solr" class="headerlink" title="初识Solr"></a>初识Solr</h1><p>这几天新接触了一个Apache开源的搜索服务器Solr。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Solr是一个独立的企业级搜索应用服务器，它对外提供 API 接口。用户可以通过HTTP请求向Solr服务器提出插入数据和查找请求。交互数据主要是 JSON，但也可以是 XML、CSV 或其他格式。<br>Solr的部署分两种：单节点/SolrCloud集群。<br>Solr和一般的NoSQL 数据库一样，它是一种非关系数据存储和处理技术。存储结构是文档，文档都是扁平结构的，文档之间不存在相互依赖关系。</p>
<p>为什么要solr：</p>
<ul>
<li>solr是将整个索引操作功能封装好了的搜索引擎系统(企业级搜索引擎产品)。</li>
<li>solr可以部署到单独的服务器上(WEB服务)，它可以提供服务，我们的业务系统就只要发送请求，接收响应即 可，降低了业务系统的负载。</li>
<li>solr部署在专门的服务器上，它的索引库就不会受业务系统服务器存储空间的限制。</li>
<li>solr支持分布式集群，索引服务的容量和能力可以线性扩展。</li>
</ul>
<h2 id="windows下安装Solr"><a href="#windows下安装Solr" class="headerlink" title="windows下安装Solr"></a>windows下安装Solr</h2><p>安装 1.8+ 版本jdk。<br>下载solr-8.4.1.zip，并解压到自定义路径下。<a href="http://apache.cs.utah.edu/lucene/solr/8.4.1/solr-8.4.1.zip" target="_blank" rel="noopener">http://apache.cs.utah.edu/lucene/solr/8.4.1/solr-8.4.1.zip</a><br><img src="/images/solr1/solr1-1.png" alt><br>使用bin\solr.cmd，启动和停止 Solr、创建核心和集合、检查系统的状态…<br>这里只介绍启动单个Solr节点。</p>
<p>solr 启动、停止、重启命令<br>solr.cmd start -p 端口号<br>solr.cmd stop -all<br>solr.cmd restart -p 端口号<br>启动 Solr。默认端口：8983。<br><img src="/images/solr1/solr1-2.png" alt><br>检查Solr是否正在运行。<br><img src="/images/solr1/solr1-3.png" alt><br>访问管理控制台：<a href="http://localhost:8983/solr/" target="_blank" rel="noopener">http://localhost:8983/solr/</a><br>需要创建一个core才能进行索引和搜索。<br><img src="/images/solr1/solr1-4.png" alt><br>接下来就可以把文档存放到这个core上了。<br>core我的理解是：一个Solr 服务器实例，在实例上可以进行数据的CRUD了。这个数据一般存放类型相同的一类文档。我这边干脆就取名为user，准备放user一类的文档数据了。<br>一个Solr服务可以有多个core。<br><img src="/images/solr1/solr1-5.png" alt><br>core配置文件介绍：<br><img src="/images/solr1/solr1-6.png" alt></p>
<ul>
<li>solr.xml：为Solr 服务器实例指定配置选项。</li>
<li>每个 Solr 核心：<ul>
<li>core.properties：为每个核心定义特定的属性，例如其名称、模式的位置以及其他参数。</li>
<li>solrconfig.xml：控制高级行为。主要定义了Solr的一些处理规则，包括索引数据的存放位置，更新，删除，查询的一些规则配置。</li>
<li>managed-schema：描述将要求 Solr 索引的文档。为文档量身配置各种规则。这个配置文件非常重要。可以定义字段如何索引，字段类型有多少filter chain分词器、过滤器…以及其他很重要的配置。修改配置可以通过http请求api修改。</li>
<li>data/：索引、日志文件等。</li>
</ul>
</li>
</ul>
<h2 id="字段、字段类型等配置说明"><a href="#字段、字段类型等配置说明" class="headerlink" title="字段、字段类型等配置说明"></a>字段、字段类型等配置说明</h2><h3 id="字段定义"><a href="#字段定义" class="headerlink" title="字段定义"></a>字段定义</h3><p><img src="/images/solr1/solr1-7.png" alt><br>name：该字段的名称。<br>type：该fieldType字段的名称，必填。<br>indexed：如果为 true，则可以在查询中使用该字段的值来检索匹配的文档。默认true。<br>…</p>
<h3 id="字段类型定义"><a href="#字段类型定义" class="headerlink" title="字段类型定义"></a>字段类型定义</h3><p><img src="/images/solr1/solr1-8.png" alt><br><img src="/images/solr1/solr1-9.png" alt><br>name：fieldType 的名称<br>class：用于存储和索引此类型数据的类名<br>索引（indexed）：如果为 true，则可以在查询中使用该字段的值来检索匹配的文档。默认true<br>存储（stored）: 如果为 true，则字段的实际值可以通过查询来检索。默认true<br>docValues：如果为 true，则该字段的值将被放入一个面向列的 DocValues 结构中。<br>…</p>
<h3 id="Schema-API-操作managed-schema"><a href="#Schema-API-操作managed-schema" class="headerlink" title="Schema API 操作managed-schema"></a>Schema API 操作managed-schema</h3><p>使用 HTTP API 来管理这些配置<br><img src="/images/solr1/solr1-10.png" alt><br><img src="/images/solr1/solr1-11.png" alt><br>可以看到uesr这个core中，申明的字段和索引情况。<br><img src="/images/solr1/solr1-12.png" alt><br>add-field<br><img src="/images/solr1/solr1-13.png" alt><br>刚定义的字段，在文档中生成了<br><img src="/images/solr1/solr1-14.png" alt></p>
<h2 id="Solr分析器、标记器和过滤器"><a href="#Solr分析器、标记器和过滤器" class="headerlink" title="Solr分析器、标记器和过滤器"></a>Solr分析器、标记器和过滤器</h2><p><img src="/images/solr1/solr1-15.png" alt><br>标记器：Tokenizer 的工作是将文本流分解为令牌，其中每个令牌（通常）是文本中字符的子序列。分析器知道它配置的字段，但 tokenizer 不是。Tokenizers 从字符流（Reader）中读取并生成一系列令牌对象（TokenStream）。<br><img src="/images/solr1/solr1-16.png" alt><br>过滤器：过滤器的工作通常比 tokenizer 更容易，因为在大多数情况下，过滤器会依次查看流中的每个标记，并决定是否将其传递、替换或丢弃。<br><img src="/images/solr1/solr1-17.png" alt><br>去管理页面，感受下分析器、标记器和过滤器是如何链式运作的<br><img src="/images/solr1/solr1-18.png" alt></p>
<h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><p>Solr 可以接受来自许多不同来源的数据，包括 XML 文件、JSON文件、逗号分隔值（CSV）文件、从数据库表格中提取的数据以及常用文件格式（如 Microsoft Word 或 PDF）中的文件。<br>介绍3种方式，第一种方式用来上传数据库数据，后两种方式比较常见。<br>①Solr DataImportHandler<br>②HTTP 请求到 Solr 服务器来上传 XML 文件、json文件。XML格式的更新请求可以使用 Content-type: application/xml 或者 Content-type: text/xml 作为 XML 消息发送到更新处理程序；JSON 格式的更新请求可以使用 Content-Type: application/json 或 Content-Type: text/json 发送到 Solr 的 /update 处理程序。<br>③编写自定义 Java 应用程序以通过 SolrJ来获取数据（推荐）<br>前期准备： 添加field，与数据库表的字段对应起来<br>这是我们的数据源，将前5个作为字段传输。这里准备了435510 条数据<br><img src="/images/solr1/solr1-19.png" alt><br>先确认。这5个字段，managed-schema没被定义过<br>使用Postman 批量添加field<br><img src="/images/solr1/solr1-20.png" alt></p>
<h3 id="Solr-DataImportHandler来上传数据库数据"><a href="#Solr-DataImportHandler来上传数据库数据" class="headerlink" title="Solr DataImportHandler来上传数据库数据"></a>Solr DataImportHandler来上传数据库数据</h3><p>DataImportHandler提供一种可配置的方式向Solr导入数据，可以全量导入，也可以增量导入，还可声明式提供可配置的任务调度，让数据定时从关系型数据库中更新数据到Solr服务器。详见<br><a href="https://blog.csdn.net/qq_41674409/article/details/85143606" target="_blank" rel="noopener">https://blog.csdn.net/qq_41674409/article/details/85143606</a><br>下载 mysql-connector-java-5.1.40.jar（版本不要太高，会不兼容） 添加到solr-8.4.1\server\solr-webapp\webapp\WEB-INF\lib 下。<br>将solr-dataimporthandler-8.4.1.jar 、solr-dataimporthandler-extras-8.4.1.jar 从 solr-8.4.1\dist 复制到solr-8.4.1\server\solr-webapp\webapp\WEB-INF\lib 下。<br>修改 solrconfig.xml 添加 dataImport 请求资源映射。添加在<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/images/solr1/solr1-21.png" alt><br>\solr-8.4.1\server\solr\user\conf目录下创建 data-config.xml，配置访问数据库的用户名、密码、查询语句，column对应数据库中字段、name对应solr的schema.xml中字段。<br><img src="/images/solr1/solr1-22.png" alt><br>重启Solr： solr restart -p 8983<br>导入数据<br><img src="/images/solr1/solr1-23.png" alt><br>查看数据<br><img src="/images/solr1/solr1-24.png" alt><br><img src="/images/solr1/solr1-25.png" alt></p>
<h3 id="HTTP-请求到-Solr-服务器来上传-XML-文件"><a href="#HTTP-请求到-Solr-服务器来上传-XML-文件" class="headerlink" title="HTTP 请求到 Solr 服务器来上传 XML 文件"></a>HTTP 请求到 Solr 服务器来上传 XML 文件</h3><p>准备好满足条件的xml文件，格式为：<br><img src="/images/solr1/solr1-26.png" alt><br>新开一个core，并配置field。<br><img src="/images/solr1/solr1-27.png" alt><br><img src="/images/solr1/solr1-28.png" alt><br>查看数据<br><img src="/images/solr1/solr1-29.png" alt></p>
<h3 id="编写自定义-Java-应用程序以通过-SolrJ来获取数据"><a href="#编写自定义-Java-应用程序以通过-SolrJ来获取数据" class="headerlink" title="编写自定义 Java 应用程序以通过 SolrJ来获取数据"></a>编写自定义 Java 应用程序以通过 SolrJ来获取数据</h3><p>SolrJ导入，放在下面SolrJ模块。</p>
<h2 id="Solr搜索"><a href="#Solr搜索" class="headerlink" title="Solr搜索"></a>Solr搜索</h2><h3 id="Solr搜索的工作流程"><a href="#Solr搜索的工作流程" class="headerlink" title="Solr搜索的工作流程"></a>Solr搜索的工作流程</h3><p><img src="/images/solr1/solr1-30.png" alt><br>补充：下列这些情况，建议该字段配置docValues属性，提高性能。<br>需要聚合的字段，包括sort，agg，group，facet等 。<br>需要提供函数查询的字段。<br>需要高亮的字段。</p>
<h3 id="通用查询参数"><a href="#通用查询参数" class="headerlink" title="通用查询参数"></a>通用查询参数</h3><ol>
<li><p>defType 参数<br>defType 参数指定 Solr 应该用来处理请求中的主查询参数（q）的查询解析器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defType=dismax</span><br></pre></td></tr></table></figure>
<p> Solr中提供了三种解析器供选择：<br> lucene：   solr的Standard Query Parser  标准查询解析器（默认）<br> dismax：   DisMax Query Parser<br> edismax： Extended DisMax Query Parser (eDismax)</p>
</li>
<li><p>sort 参数<br>sort 参数按升序 (asc) 或降序 (desc) 顺序排列搜索结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort=&lt;field name&gt;&lt;direction&gt;,&lt;field name&gt;&lt;direction&gt;],…</span><br></pre></td></tr></table></figure>
</li>
<li><p>start 参数<br>分页查询的起始行号，默认为0；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>rows 参数<br>将查询的结果分页，返回最大文档数目。默认值是10。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rows=20</span><br></pre></td></tr></table></figure>
</li>
<li><p>fq（Filter Query）参数<br>fq 参数定义了一个查询，可以用来限制可以返回的文档的超集，而不影响 score。这对于加快复杂查询非常有用，因为指定的查询 fq 是独立于主查询而被缓存的。当以后的查询使用相同的过滤器时，会有一个缓存命中，过滤器结果从缓存中快速返回。<br>fq的传参说明：<br>在下面的例子中，只有流行度大于10并且段落为0的文档才会匹配。<br>可以一次传传多个fq：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fq=popularity:[10 TO *]&amp;fq=section:0</span><br></pre></td></tr></table></figure>
<p> 也可将多个过滤条件组合在一个fq:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fq=+popularity:[10 TO *] +section:0</span><br></pre></td></tr></table></figure>
<p> 每个过滤器查询的文档集都是独立缓存的，几个fq就缓存几个过滤结果集。</p>
</li>
<li><p>fl（Field List）参数<br>该 fl 参数将查询响应中包含的信息限制在指定的字段列表中。这些字段必须是 stored=”true” 或 docValues=”true”。<br>字段列表可以指定为空格分隔或逗号分隔的字段名称列表。<br>通配符 * 选择文档中的所有字段，它们是 stored=”true”、docValues=”true” 和 useDocValuesAsStored=”true”。<br>还可以添加伪字段（pseudo-fields）、函数和变换器。<br>示例：<br><img src="/images/solr1/solr1-31.png" alt><br>函数与 fl：<br>可以为结果中的每个文档计算函数，并将其作为伪字段（pseudo-field）返回：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fl=id,title,product(price,popularity)</span><br></pre></td></tr></table></figure>
<p> 文件变换器与 fl：<br> 文档变换器可以用来修改查询结果中每个文档返回的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fl=id,title,[explain]</span><br></pre></td></tr></table></figure>
<p> 字段名称别名：<br> 可以通过使用 “displayName” 前缀来更改对字段、函数或转换器的响应中使用的键。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l=id,sales_price:price,secret_sauce:prod(price,popularity),why_score:[explain style=nl]</span><br></pre></td></tr></table></figure>
</li>
<li><p>debug 参数<br>用于指定在结果中返回调试信息。</p>
</li>
<li>timeAllowed 参数<br>限定查询在多少毫秒内返回，如果到时间了还未执行完成，则直接返回部分结果。</li>
<li>wt 参数<br>指定响应的内容格式：json、xml、csv……  SearchHandler根据它选择ResponseWriter。默认JSON 将作为响应的格式返回。</li>
<li>cache 参数<br>设置是否对查询结果、过滤查询的结果进行缓存。默认是都会被缓存的。如果不需要缓存明确设置 cache=false。<br>…</li>
</ol>
<h3 id="查询解析器"><a href="#查询解析器" class="headerlink" title="查询解析器"></a>查询解析器</h3><ul>
<li>标准查询解析器</li>
<li>DisMax 查询解析器</li>
<li>扩展的 DisMax 查询解析器</li>
<li>其他解析器<br>查询解析器插件是 QParserPlugin 的所有子类。可自定义扩展自己的查询分析器。</li>
</ul>
<h4 id="标准查询解析器"><a href="#标准查询解析器" class="headerlink" title="标准查询解析器"></a>标准查询解析器</h4><p>Solr 的标准查询解析器（Query Parser）也被称为 “lucene” 解析器。<br>标准查询解析器的关键优势在于它支持强大且相当直观的语法，允许您创建各种结构化查询。最大的缺点是它不容忍出现语法错误，与 DisMax 查询解析器相比， DisMax 查询解析器的设计目的是尽可能地减少抛出错误。</p>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><p>q<br>使用标准查询语法定义查询。必须项。<br>……</p>
<h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><p>我们通过Solr Admin页面-Query来看看吧。内核user上，有我们之前存入的大量数据。<br><img src="/images/solr1/solr1-32.png" alt><br><img src="/images/solr1/solr1-33.png" alt></p>
<h5 id="指定标准查询分析器的条件"><a href="#指定标准查询分析器的条件" class="headerlink" title="指定标准查询分析器的条件"></a>指定标准查询分析器的条件</h5><p>检索词<br>有2种类型的检索词：单词和短语</p>
<ul>
<li>单词是一个单独的词，例如 “test” 或 “hello”</li>
<li>短语是一组由双引号包围的词组，如 “hello dolly”<br>多个检索词可以与布尔运算符组合在一起，形成更复杂的查询（如下所述）：</li>
</ul>
<p>操作符<br>条件修饰<br>根据需要，Solr支持多样的能够增加灵活度或精度的检索词模糊匹配。这些模糊匹配包括可以进行模糊查询或一般查询的通配符。</p>
<ul>
<li>通配符查询<br>solr标准查询支持在单词中使用一个或多个通配符。通配符可以应用于单词，但不能用于短语中。<table><br>  <tr><br>      <td>通配符查询类型</td><br>      <td>字符</td><br>      <td>示例</td><br>  </tr><br>  <tr><br>      <td>单个字符（匹配单个字符）</td><br>      <td>？</td><br>      <td>搜索字符串te?t将匹配 test 和 text。</td><br>  </tr><br>  <tr><br>      <td>多个字符（匹配0个或多个字符） </td><br>      <td> * </td><br>      <td>tes* -&gt; test, testing, 或 tester。<br>te*t -&gt; test 或 text. <br>*est -&gt; pest 或 test</td><br>  </tr><br></table></li>
<li><p>模糊查询<br>在单词词尾添加波浪号 〜 符号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roam~</span><br></pre></td></tr></table></figure>
<p>  这个搜索将匹配像 roams、foam、foams。它也将匹配“roam”这个词本身。<br>  一个可选的距离参数指定的最大可编辑数介于0和2之间，默认为2。例如：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roam~1</span><br></pre></td></tr></table></figure>
<p>  这将匹配 roams 和 foam 等术语，但不包括 foams，因为它的编辑距离为“2”。</p>
</li>
<li><p>邻近搜索<br>邻近查询将查询一个检索词与另一个检索词有指定距离的结果。<br>执行邻近查询，在查询检索词组最后添加～符号和一个数值。比如，要查询文档中的 “apache” 和 “jakarta” 之间有10个单词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;jakarta apache&quot;~10</span><br></pre></td></tr></table></figure>
<p>  这里所说的距离，是匹配指定检索词所需移动单词的数量。在上面的例子中，“apache” 和 “jakarta” 之间有10个词的距离则匹配。如果 “apache” 在 “jakarta” 前面，则需要更大的数，使 “apache” 能够在 “jakarta” 后面。</p>
</li>
<li><p>范围搜索<br>范围搜索指定字段的值范围。如果是非数字字段，按照字典排序。<br>比如，下面的例子是匹配所有的mod_date检索字段在20020101和20030101之间的结果（包括20020101和20030101）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod_date:[20020101 TO 20030101]</span><br></pre></td></tr></table></figure>
<p>  范围查询不限于日期字段或数字格式，还可以查询非日期字段：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title:&#123;Aida TO Carmen&#125;</span><br></pre></td></tr></table></figure>
<p>  将会查询所有 title 在 Aida 与 Carmen之间的文档（不包括Aida 和 Carmen）。<br>  通过括号决定是否包括上限和下限：<br>  1.方括号[]表示包含上限和下限；<br>  2.花括号{}表示不包含上限和下限；<br>  3.也可以同时使用两种括号，表示一个包含，一个不包含，比如：count:{ 1 TO 10 ]。</p>
</li>
<li><p>控制相关度查询<br>加权查询允许通过加权单词控制文档的相关度。比如，你查询 “jakarta apache” ，并且希望 “jakarta” 相关度更高，你可以使用 ^符号，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jakarta^4 apache</span><br></pre></td></tr></table></figure>
<p>  默认，加权因子是1。尽管加权因子必须是正数，但是可以小于1（比如，0.2）。</p>
</li>
<li><p>使用“^=”打分<br>常量打分查询使用 &lt;query_clause&gt;^=<score>，对整个变量设置指定分值。当你只关心一个特定的匹配条件，不希望其他因素产生影响，比如检索词频率或逆文献频率。<br>例如：</score></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(description:blue OR color:blue)^=1.0 text:shoes</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询指定字段<br>在solr中对数据创建索引是以字段为基准的，这是在solr的managed-schema文件中定义的。<br>搜索可以利用字段增加查询精度。比如，你可以指定一个字段来搜索，比如一个title字段。<br>在managed-schema文件中定义一个字段作为默认字段。如果你在查询的时候没有指定字段，solr只搜索默认字段。另外，你可以在查询过程中指定一个字段或字段组合。<br>要指定一个字段，只需要在检索词前面加上字段和冒号（:），然后就能够使用这个字段进行查询了。<br>比如，假设一个索引包括两个字段，title和text，并且text是默认字段。如果你想查询查询名为The Right Way的文档和包含don’t go this way的文档，你可以使用下面的检索方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title:&quot;The Right Way&quot; AND text:&quot;don&apos;t go this way&quot;</span><br><span class="line">title:&quot;Do it right&quot; AND &quot;don&apos;t go this way&quot;</span><br></pre></td></tr></table></figure>
<p>  既然text是默认字段，可以不用明确指明；所以，上面第二种方式忽略它。<br>  默认字段先于指定字段，所以查询title:Do it right将只在title字段查询Do，在默认字段上查询it和right。</p>
</li>
<li><p>标准查询支持的布尔运算符<br>布尔运算符可以在查询时使用布尔逻辑，在匹配文档时查询存在或不存在指定检索词或条件。下面的表格总结了标准查询可以使用的布尔运算符。<br><table><br><tr><br>  <td>布尔运算符</td><br>  <td>替代符号</td><br>  <td>描述</td><br></tr><br><tr><br>  <td>AND</td><br>  <td>&amp;&amp;</td><br>  <td>要求在布尔运算符两侧的任何一方都要匹配。</td><br></tr><br><tr><br>  <td>NOT </td><br>  <td>!</td><br>  <td>要求对应搜索词不存在。</td><br></tr><br><tr><br>  <td>OR</td><br>  <td>||</td><br>  <td>要求布尔运算符两侧一个或两个检索词都会出现。</td><br></tr><br><tr><br>  <td></td><br>  <td>+</td><br>  <td>要求符号”+”后的项必须在文档相应的域中存在</td><br></tr><br><tr><br>  <td></td><br>  <td>-</td><br>  <td>要求符号”-”后的项不存在。</td><br></tr><br></table><br>布尔运算符允许使用逻辑运算符的组合检索词。Lucene支持<code>AND</code>、<code>+</code>、<code>OR</code>、<code>NOT</code>和<code>-</code>作为逻辑运算符。<br>注：<br>当使用关键词（如AND、NOT）指定布尔表达式时，必须使用大写字母。</p>
<p>  布尔运算符OR (||)<br>  OR运算符是默认运算符。这就意味着，如果两个检索词之间没有布尔表达式，默认使用OR运算符。OR运算符链接的两个检索词，如果任何一个检索词存在文档中，这个文档将成为匹配文档。这就相当于并集。可以使用||代替OR。查询包含 “jakarta apache” 或 “jakarta,”，可以使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;jakarta apache&quot; jakarta</span><br><span class="line">&quot;jakarta apache&quot; OR jakarta</span><br></pre></td></tr></table></figure>
<p>  布尔运算符AND (&amp;&amp;)<br>  AND操作要求在一个文档中包含两个检索词，这相当于交集。可以使用&amp;&amp;代替AND。<br>  要查询包含 “jakarta apache” 和 “Apache Lucene”的文档，可以使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;jakarta apache&quot; AND &quot;Apache Lucene&quot;</span><br><span class="line">&quot;jakarta apache&quot; &amp;&amp; &quot;Apache Lucene&quot;</span><br></pre></td></tr></table></figure>
<p>  布尔运算符NOT (!)<br>  NOT运算符不包括那些包含NOT之后的检索词的文档。这相当于差集。可以使用!代替NOT。<br>  要查询包含 “jakarta apache” 但不包括 “Apache Lucene”的文档，可以使用</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;jakarta apache&quot; NOT &quot;Apache Lucene&quot;</span><br><span class="line">&quot;jakarta apache&quot; ! &quot;Apache Lucene&quot;</span><br></pre></td></tr></table></figure>
<p>  布尔运算符+<br>  +要求+之后检索词存在于至少一个文档的某个字段中，以便查询返回。<br>  比如，要查询文件，必须包含”jakarta”，可能或可能不包含”lucene”，可以使用查询</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+jakarta lucene</span><br></pre></td></tr></table></figure>
<p>  布尔运算符-<br>  -或“禁止”运算符不包括符号后包含检索词的文件。<br>  比如，要查询文件，必须包含”jakarta apache”，不包含”Apache Lucene”，可以使用查询</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;jakarta apache&quot; -&quot;Apache Lucene&quot;</span><br></pre></td></tr></table></figure>
<p>  转义特殊字符<br>  在solr的一次查询中，下列字符存在特殊含义：+ - &amp;&amp; || ! ( ) { } [ ] ^ “ ~ * ? : /。<br>  为了让solr解读这些字符时使用字面量，而不是特殊字符，可以在字符前加一个反斜杠\字符。例如，查询(1+1):2，为了不让solr把+、括号()对两个检索词进行子查询，需要在特殊字符前加上反斜杠转义字符：\(1\+1\)\:2。</p>
<p>  分组子查询<br>  支持使用括号来组合子句形式的子查询。如果你想控制一个查询的布尔逻辑，这是非常有用的。<br>  The query below searches for either “jakarta” or “apache” and “website”:<br>  下面的查询搜索 “jakarta” 或 “apache” 和 “website”：(jakarta OR apache) AND website。<br>  这样增加了查询的准确性，“website”必须存在，需要”jakarta” 或 “apache” 存在。</p>
<p>  group从句作为字段<br>  在查询过程中多一个字段使用两个或多个布尔运算符，需要使用括号组织布尔从句。比如，下面查询title字段必须包含”return”单词和”pink panther”短语：title:(+return +”pink panther”)。</p>
<p>  注释<br>  在查询串中支持C语言风格的注释。比如：”jakarta apache” /* 这是在一个普通查询串中间的注释 */ OR jakarta。注释可以被嵌套。</p>
</li>
</ul>
<h4 id="DisMax-查询解析器"><a href="#DisMax-查询解析器" class="headerlink" title="DisMax 查询解析器"></a>DisMax 查询解析器</h4><p>DisMax查询解析器设计用于处理用户输入的简单短语（无复杂语法），并根据每个字段的重要性使用不同的权重（升序）在多个字段中搜索单个术语。其他选项允许用户根据特定于每个用例的规则（独立于用户输入）影响分数。<br>一般来说，与“Lucene”Solr查询解析器的接口相比，DisMax查询解析器的接口更像Google的接口。这种相似性使DisMax成为许多用户应用程序的适当查询解析器。它接受一个简单的语法，很少产生错误消息。<br>DisMax查询解析器主要设计为易于使用，并且几乎可以接受任何输入而不返回错误。<br>语法：略</p>
<h4 id="扩展的-DisMax-查询解析器：eDismax"><a href="#扩展的-DisMax-查询解析器：eDismax" class="headerlink" title="扩展的 DisMax 查询解析器：eDismax"></a>扩展的 DisMax 查询解析器：eDismax</h4><p>除了支持所有的 DisMax 查询解析器参数外，同时支持完整的 Lucene 查询分析器语法，它与 Solr 的标准查询解析器具有相同的增强功能。</p>
<h3 id="Solr的函数查询"><a href="#Solr的函数查询" class="headerlink" title="Solr的函数查询"></a>Solr的函数查询</h3><p>函数查询允许你使用一个或多个数字字段的真实值生成一个相关性分数，函数查询在standard，DisMax，eDisMax下都能使用。<br>查询函数可以是常量，字段或者其他函数的组合。使用函数可以影响结果的排序。</p>
<h4 id="使用Function-Query"><a href="#使用Function-Query" class="headerlink" title="使用Function Query"></a>使用Function Query</h4><ol>
<li><p>直接向QParser指定函数参数，如func或frange：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=&#123;!func&#125;div(popularity,price)&amp;fq=&#123;!frange l=1000&#125;customer_ratings</span><br></pre></td></tr></table></figure>
</li>
<li><p>在排序时使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort=div(popularity,price) desc, score desc</span><br></pre></td></tr></table></figure>
</li>
<li><p>将函数的结果作为伪字段（pseudo-fields）添加到查询结果中的文档</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;fl=sum(x, y),id,a,b,c,score</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定函数的一个参数：在dDisMax中指定boost参数，在DisMax中指定bf参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=dismax&amp;bf=&quot;ord(popularity)^0.5 recip(rord(price),1,1000,1000)^0.3&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Lucene的QParser中使用<em>val</em>关键字指定函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=_val_:mynumericfield _val_:&quot;recip(rord(myfield),1,2,3)&quot;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="使用Function-Query-1"><a href="#使用Function-Query-1" class="headerlink" title="使用Function Query"></a>使用Function Query</h4><p>Solr中的可用函数<br>todo</p>
<h3 id="响应编写器"><a href="#响应编写器" class="headerlink" title="响应编写器"></a>响应编写器</h3><p>Solr 支持各种响应编写器，以确保查询响应可以被适当的语言或应用程序解析。<br>该 wt 参数选择要使用的响应编写器。</p>
<ul>
<li>JSON</li>
<li>XML</li>
<li>CSV</li>
<li>GeoJSON</li>
<li>javabin</li>
<li>PHP</li>
<li>PHPS</li>
<li>python</li>
<li>ruby</li>
<li>smile</li>
<li>velocity</li>
<li>XLSX</li>
<li>XSLT</li>
</ul>
<h4 id="JSON响应编写器"><a href="#JSON响应编写器" class="headerlink" title="JSON响应编写器"></a>JSON响应编写器</h4><p>默认的 Solr 响应编写器是 JsonResponseWriter。在请求中没有设置 wt 参数，则默认情况下将获得 JSON。<br>参数介绍：略</p>
<h4 id="标准的XML响应编写器"><a href="#标准的XML响应编写器" class="headerlink" title="标准的XML响应编写器"></a>标准的XML响应编写器</h4><p>XML 响应编写器是 Solr 当前包含的最通用和可重用的响应编写器。这是大多数关于 Solr 查询响应的讨论和文档中使用的格式。<br>参数介绍：略</p>
<h3 id="Solr的提交方式"><a href="#Solr的提交方式" class="headerlink" title="Solr的提交方式"></a>Solr的提交方式</h3><p>Solr的提交方式有两种，标准提交（硬提交，hard commit）和软提交(soft commit)。</p>
<h4 id="Hard-commit"><a href="#Hard-commit" class="headerlink" title="Hard commit"></a>Hard commit</h4><ul>
<li>默认的提交即硬提交，commit之后会立刻将文档同步到硬盘，在开启新搜索器之前会阻塞，直到同步完成。</li>
<li>默认情况下commit后会开启一个新搜索器（newSearcher），然后进行预热，预热完成后顶替旧搜索器，使旧缓存失效，但是开启新searcher及预热的过程（IO消耗）耗费资源过大，且可能被阻塞，所以应尽量避免在高峰期开启newsearcher,搜索器同一时间只能有一个处于active状态。</li>
<li>为了避免频繁commit，solr提供了autocommit功能，可以设置每隔多久提交一次，或者待提交文档量达到阀值提交一次，并且可定义是否在提交后开启新的搜索器，若不开启，则缓存不能够被刷新，新更新文档不能够被实时读取到。<br><img src="/images/solr1/solr1-34.png" alt></li>
</ul>
<h4 id="Soft-commit"><a href="#Soft-commit" class="headerlink" title="Soft commit"></a>Soft commit</h4><ul>
<li>软提交是将文档提交到内存，并不实时写入硬盘，减少了耗时的I/O操作。</li>
<li>为了保证实时搜索，solr在软提交基础上引入了近实时搜索（NRT），NRT并不会被文档更新所阻塞，也不会等待文档合并完成再打开一个搜索器。</li>
<li>在lucene4.x 之前，solr采用NRTManager实现NRT,之后使用ControlledRealTimeReopenThread实现，它通过IndexWriter对象来监控内存中的文档变化，从而得到最新的文档信息，该过程既不需要高耗时的I/O操作，也不需要刷新搜索器，所以非常之快，耗费资源很少。</li>
<li>所以近实时搜索（NRT）是软提交的一个特性。</li>
<li>同样的软提交也支持自动提交的方式，配置如下：<br><img src="/images/solr1/solr1-35.png" alt></li>
</ul>
<h4 id="结合优化"><a href="#结合优化" class="headerlink" title="结合优化"></a>结合优化</h4><p>上述两种提交方式并不冲突，试想我们程序使用了软提交，但何时可以把数据真正同步到磁盘呢？这时候就可以两者结合达到目的。我们设置每隔5000ms进行一次软提交，文档存入了内存，也可以实时搜索，然后每隔300000ms又会进行进行一次硬提交，同步到磁盘，无需刷新Searcher，如此两者兼顾。在配置文件中配置后，在客户端就不需要维护提交方式和提交时间了。<br><img src="/images/solr1/solr1-36.png" alt></p>
<h3 id="导出Solr结果集"><a href="#导出Solr结果集" class="headerlink" title="导出Solr结果集"></a>导出Solr结果集</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><ul>
<li>可以使用特殊的秩查询解析器和响应编写器来导出完全排序的结果集，这种解析器和响应编写器专门设计用于处理涉及排序和导出数百万条记录的场景。</li>
<li>此功能使用 stream 排序技术，在毫秒内开始发送记录，并继续对结果进行 stream 处理，直到整个结果集被排序并且导出为止。</li>
<li>此功能可能有用的情况包括：会话分析、分布式合并联接、时间序列汇总、高基数字段上的聚合、完全分布式字段合并和基于排序的统计信息。</li>
</ul>
<h4 id="请求结果导出"><a href="#请求结果导出" class="headerlink" title="请求结果导出"></a>请求结果导出</h4><ul>
<li>可以使用 /export 来请求导出查询的结果集。</li>
<li>所有查询都必须包括 sort 和 fl 参数，否则查询将返回一个错误。过滤器查询也被支持。</li>
<li>受支持的响应编写器是 json 和 javabin。由于向后兼容性的原因，wt=xsort也被支持作为输入，但是 wt=xsort 与 wt=json 的行为相同。默认的输出格式是 json。<br>  示例：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8983/solr/core_name/export?q=my-query&amp;sort=severity+desc,timestamp+desc&amp;fl=severity,timestamp,msg</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="SolrJ"><a href="#SolrJ" class="headerlink" title="SolrJ"></a>SolrJ</h2><p>solrj是访问Solr服务的java客户端，提供索引和搜索的请求方法，SolrJ通常嵌入在业务系统中，通过SolrJ的API接口操作Solr服务，如下图：<br><img src="/images/solr1/solr1-37.png" alt><br>demo代码：详见cfa-tagging项目的SolrJTest.java。</p>
<ul>
<li><p>SolrTag类定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//忽略未匹配到的字段</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SolrTag</span> </span>&#123;</span><br><span class="line">    <span class="comment">// solr查询若直接将数据转为对象，需要指定Field，该值需要和managed-schema配置Field的name一致</span></span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"leId"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer leId;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"enterpriseName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String enterpriseName;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"enterpriseAttr"</span>)</span><br><span class="line">    <span class="keyword">private</span> String enterpriseAttr;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"enterpriseValue"</span>)</span><br><span class="line">    <span class="keyword">private</span> String enterpriseValue;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"valueValue"</span>)</span><br><span class="line">    <span class="keyword">private</span> String valueValue;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLeId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> leId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeId</span><span class="params">(Integer leId)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.leId = leId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEnterpriseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> enterpriseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnterpriseName</span><span class="params">(String enterpriseName)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.enterpriseName = enterpriseName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEnterpriseAttr</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> enterpriseAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnterpriseAttr</span><span class="params">(String enterpriseAttr)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.enterpriseAttr = enterpriseAttr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEnterpriseValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> enterpriseValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnterpriseValue</span><span class="params">(String enterpriseValue)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.enterpriseValue = enterpriseValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValueValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> valueValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValueValue</span><span class="params">(String valueValue)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.valueValue = valueValue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"SolrTag [leId="</span> + leId + <span class="string">", enterpriseName="</span> + enterpriseName + <span class="string">", enterpriseAttr="</span> + enterpriseAttr</span><br><span class="line">   + <span class="string">", enterpriseValue="</span> + enterpriseValue + <span class="string">", valueValue="</span> + valueValue + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>SolrJTest单元测试类定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Description : SolrJ CRUD操作的单元测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">WebAppConfiguration</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SolrJTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SolrTagMapper solrTagMapper;</span><br><span class="line">    <span class="keyword">private</span> SolrClient solrClient;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化SolrClient</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> String solrUrl = <span class="string">"http://localhost:8983/solr/c4c_tag"</span>;</span><br><span class="line"> solrClient = <span class="keyword">new</span> HttpSolrClient.Builder(solrUrl).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryFields</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> SchemaRequest.Fields queryFields = <span class="keyword">new</span> SchemaRequest.Fields();</span><br><span class="line"> NamedList&lt;Object&gt; existFields = solrClient.request(queryFields);</span><br><span class="line"> Iterator&lt;Entry&lt;String, Object&gt;&gt; iter = existFields.iterator();</span><br><span class="line"> <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    Entry&lt;String, Object&gt; next = iter.next();</span><br><span class="line">    System.out.println(next.getKey() + <span class="string">":"</span> + next.getValue());</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加字段，包括字段的名称、类型、是否存储，是否索引等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFields</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> List&lt;Map&lt;String, Object&gt;&gt; fieldAttributesList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> Map&lt;String, Object&gt; fieldAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> <span class="comment">// 域名</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"name"</span>, <span class="string">"leId"</span>);</span><br><span class="line"> <span class="comment">// 域的类型，可以是string，pint，如果需要分词设为text_ik</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"type"</span>, <span class="string">"pint"</span>);</span><br><span class="line"> <span class="comment">// 是否索引，默认为true</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"indexed"</span>, <span class="keyword">true</span>);</span><br><span class="line"> <span class="comment">// 是否存储，默认为true</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"stored"</span>, <span class="keyword">true</span>);</span><br><span class="line"> <span class="comment">// 是否多值，默认为false</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"multiValued"</span>, <span class="keyword">false</span>);</span><br><span class="line"> <span class="comment">// 是否必须，默认false，schema文件中有一个id已默认必须</span></span><br><span class="line"> fieldAttributes.put(<span class="string">"required"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributesList.add(fieldAttributes);</span><br><span class="line"> fieldAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> fieldAttributes.put(<span class="string">"name"</span>, <span class="string">"enterpriseName"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"type"</span>, <span class="string">"string"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"indexed"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"stored"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"multiValued"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"required"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributesList.add(fieldAttributes);</span><br><span class="line"> fieldAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> fieldAttributes.put(<span class="string">"name"</span>, <span class="string">"enterpriseAttr"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"type"</span>, <span class="string">"string"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"indexed"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"stored"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"multiValued"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"required"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributesList.add(fieldAttributes);</span><br><span class="line"> fieldAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> fieldAttributes.put(<span class="string">"name"</span>, <span class="string">"enterpriseValue"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"type"</span>, <span class="string">"string"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"indexed"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"stored"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"multiValued"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"required"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributesList.add(fieldAttributes);</span><br><span class="line"> fieldAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> fieldAttributes.put(<span class="string">"name"</span>, <span class="string">"valueValue"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"type"</span>, <span class="string">"string"</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"indexed"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"stored"</span>, <span class="keyword">true</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"multiValued"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributes.put(<span class="string">"required"</span>, <span class="keyword">false</span>);</span><br><span class="line"> fieldAttributesList.add(fieldAttributes);</span><br><span class="line"> SchemaRequest.AddField addField = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">for</span> (Map&lt;String, Object&gt; map : fieldAttributesList) &#123;</span><br><span class="line">    addField = <span class="keyword">new</span> SchemaRequest.AddField(map);</span><br><span class="line">    solrClient.request(addField);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加字段，包括字段的名称、类型、是否存储，是否索引等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteField</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> SchemaRequest.DeleteField delField = <span class="keyword">new</span> SchemaRequest.DeleteField(<span class="string">"delField"</span>);</span><br><span class="line"> solrClient.request(delField);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过对象添加单条数据，若添加时id已存在，那么solr会执行修改操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> SolrTag tag = <span class="keyword">new</span> SolrTag();</span><br><span class="line"> tag.setLeId(<span class="number">1</span>);</span><br><span class="line"> tag.setEnterpriseName(<span class="string">"国企"</span>);</span><br><span class="line"> tag.setEnterpriseAttr(<span class="string">"2-5 年"</span>);</span><br><span class="line"> tag.setEnterpriseValue(<span class="string">"AA有限公司"</span>);</span><br><span class="line"> tag.setValueValue(<span class="string">"IT行业"</span>);</span><br><span class="line"> solrClient.addBean(tag);</span><br><span class="line"> solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量添加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBeans</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 从数据库查出所有的记录</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = solrTagMapper.listAll();</span><br><span class="line"> <span class="comment">// 添加</span></span><br><span class="line"> solrClient.addBeans(solrTags);</span><br><span class="line"> solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过document添加单条数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> SolrInputDocument document = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line"> document.addField(<span class="string">"leId"</span>, <span class="number">2</span>);</span><br><span class="line"> document.addField(<span class="string">"enterpriseName"</span>, <span class="string">"国企"</span>);</span><br><span class="line"> document.addField(<span class="string">"enterpriseAttr"</span>, <span class="string">"3年以上"</span>);</span><br><span class="line"> document.addField(<span class="string">"enterpriseValue"</span>, <span class="string">"BB有限公司"</span>);</span><br><span class="line"> document.addField(<span class="string">"valueValue"</span>, <span class="string">"IT行业"</span>);</span><br><span class="line"> solrClient.add(document);</span><br><span class="line"> solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两种删除方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 方式一：根据id删除</span></span><br><span class="line"><span class="comment">//  solrClient.deleteById(id);</span></span><br><span class="line"> <span class="comment">// 方式二：根据查询结构删除</span></span><br><span class="line"> solrClient.deleteByQuery(<span class="string">"enterpriseName:国企"</span>);</span><br><span class="line"> solrClient.commit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有/select?q=*:*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限定返回字段/select?q=*:*&amp;fl=param1,param2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryFl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 设置限定返回字段</span></span><br><span class="line"> solrQuery.setFields(<span class="string">"leId"</span>, <span class="string">"enterpriseName"</span>, <span class="string">"enterpriseAttr"</span>);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页/select?q=*:*&amp;rows=5&amp;start=0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 设置分页信息</span></span><br><span class="line"> solrQuery.setStart(<span class="number">0</span>);</span><br><span class="line"> solrQuery.setRows(<span class="number">20</span>);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增加限定条件/select?q=*:*&amp;fq=leId:&#123;70 TO *]&amp;fq=valueValue:公司</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryFq</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 设置限定条件</span></span><br><span class="line"> solrQuery.setFilterQueries(<span class="string">"leId:&#123;70 TO *]"</span>, <span class="string">"valueValue:公司"</span>);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用函数,并设置别名/select?q=*:*&amp;fl:"leId", "alias:sum(leId,0.1)", "valueValue"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryFunction</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 将函数的结果作为伪字段,添加到查询结果中的文档</span></span><br><span class="line"> solrQuery.setFields(<span class="string">"leId"</span>, <span class="string">"alias:sum(leId,0.1)"</span>, <span class="string">"valueValue"</span>);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加排序/select?q=*:*&amp;sort:leId desc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">querySort</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 添加排序</span></span><br><span class="line"> solrQuery.setSort(<span class="string">"leId"</span>, SolrQuery.ORDER.desc);</span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果</span></span><br><span class="line"> List&lt;SolrTag&gt; solrTags = response.getBeans(SolrTag<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> <span class="comment">// 打印匹配总数</span></span><br><span class="line"> System.out.println(<span class="string">"匹配总数为："</span> + response.getResults().getNumFound());</span><br><span class="line"> <span class="comment">// 打印搜索结果</span></span><br><span class="line"> <span class="keyword">for</span> (SolrTag solrTag : solrTags) &#123;</span><br><span class="line">    System.out.println(solrTag);</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组/select?q=*:*&amp;group.limit=20&amp;group.offset=0&amp;group.ngroups=true&amp;wt=javabin&amp;version=2&amp;group.field=enterpriseName&amp;group=true</span></span><br><span class="line"><span class="comment"> * group=true：设置开启分组查询 group.field=xx：设置分组字段 group.limit=20：设置分组后展示分组下数据量</span></span><br><span class="line"><span class="comment"> * group.ngroups=true：设置为true表示会返回分组的分组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryGroup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">// 构造搜索条件</span></span><br><span class="line"> SolrQuery solrQuery = <span class="keyword">new</span> SolrQuery();</span><br><span class="line"> <span class="comment">// 设置搜索关键词</span></span><br><span class="line"> solrQuery.setQuery(<span class="string">"*:*"</span>);</span><br><span class="line"> <span class="comment">// 开启分组功能</span></span><br><span class="line"> solrQuery.set(GroupParams.GROUP, <span class="keyword">true</span>);</span><br><span class="line"> <span class="comment">// 按照enterpriseName分组</span></span><br><span class="line"> solrQuery.set(GroupParams.GROUP_FIELD, <span class="string">"enterpriseName"</span>);</span><br><span class="line"> <span class="comment">// 设置每个分组里从第几条数据开始返回，用于组内分页，这里不进行分页</span></span><br><span class="line"> solrQuery.set(GroupParams.GROUP_OFFSET, <span class="number">0</span>);</span><br><span class="line"> <span class="comment">// 设置每个分组最多返回几条数据</span></span><br><span class="line"> solrQuery.set(GroupParams.GROUP_LIMIT, <span class="number">20</span>);</span><br><span class="line"> <span class="comment">// 是否返回总的组数</span></span><br><span class="line"> solrQuery.set(GroupParams.GROUP_TOTAL_COUNT, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//  //组内排序</span></span><br><span class="line"><span class="comment">//  solrQuery.set(GroupParams.GROUP_SORT,"filed asc");</span></span><br><span class="line"><span class="comment">//        //组间排序</span></span><br><span class="line"><span class="comment">//  solrQuery.set(CommonParams.SORT,"filed desc");</span></span><br><span class="line"> <span class="comment">// 执行查询</span></span><br><span class="line"> QueryResponse response = solrClient.query(solrQuery);</span><br><span class="line"> <span class="comment">// 获取查询结果列表</span></span><br><span class="line"> GroupResponse groupResponse = response.getGroupResponse();</span><br><span class="line"> <span class="comment">// 获取根据不同分组方式查询到的结果</span></span><br><span class="line"> List&lt;GroupCommand&gt; groupCommandList = groupResponse.getValues();</span><br><span class="line"> <span class="comment">// 由于这里只有一种分组策略，所以直接取第一个对象</span></span><br><span class="line"> GroupCommand groupCommand = groupCommandList.get(<span class="number">0</span>);</span><br><span class="line"> List&lt;Group&gt; groups = groupCommand.getValues();</span><br><span class="line"> <span class="comment">// 打印每个分组信息</span></span><br><span class="line"> SolrDocumentList list = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">for</span> (Group group : groups) &#123;</span><br><span class="line">    <span class="comment">// 获取每个分组内的数据</span></span><br><span class="line">    list = group.getResult();</span><br><span class="line">    System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">    <span class="keyword">for</span> (SolrDocument solrDocument : list) &#123;</span><br><span class="line">   <span class="comment">// 方便演示，直接转换成json打印</span></span><br><span class="line">   String record = JSON.toJSONString(solrDocument);</span><br><span class="line">   System.out.println(record);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="以下内容属于Solr可选扩展功能："><a href="#以下内容属于Solr可选扩展功能：" class="headerlink" title="以下内容属于Solr可选扩展功能："></a>以下内容属于Solr可选扩展功能：</h3><ul>
<li>身份验证插件</li>
<li>hadoop</li>
<li>授权插件</li>
<li>签名证书SSL</li>
<li>HDFS存储</li>
<li>备份与还原</li>
<li>……</li>
</ul>
<h3 id="以下内容属于集群SolrCloud的功能："><a href="#以下内容属于集群SolrCloud的功能：" class="headerlink" title="以下内容属于集群SolrCloud的功能："></a>以下内容属于集群SolrCloud的功能：</h3><ul>
<li>SolrCloud介绍</li>
<li>SolrCloud集群部署</li>
<li>SolrCloud工作原理</li>
<li>碎片、副本、索引数据</li>
<li>分布式请求</li>
<li>扩展与容错</li>
<li>ZooKeeper搭建</li>
<li>ZooKeeper控制访问</li>
<li>ZooKeeper管理配置文件</li>
<li>SolrCloud的Collections API</li>
<li>流表达式</li>
<li>并行SQL接口</li>
<li>并行SQL体系结构的三个逻辑层组成。</li>
<li>……</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Solr </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敏捷-Scrum5大价值观]]></title>
      <url>https://addonepiece.github.io/2020/01/13/agile-scrum-values/</url>
      <content type="html"><![CDATA[<p><img src="/images/agile-scrum-values.png" alt><br>Scrum价值观是专注、开放、勇气、承诺和尊重。它们非常重要，而且经常被误解，以至于在2016年7月被添加到Scrum指南中。原文如下：</p>
<ul>
<li>Respect - Scrum Team members respect each other to be capable, independent people</li>
<li>Focus - Everyone focuses on the work of the sprint and the goals of the Scrum Team</li>
<li>Commitment - People personally commit to achieving the goals of the Scrum Team</li>
<li>Courage - Scrum Team members have courage to do the right thing and work on tough problems</li>
<li>Openness - The Scrum Team and its stakeholders agree to be open about all the work and the challenges with performing the work</li>
</ul>
<p>这五个价值观很容易记住，但是很难理解它们的含义，如何应用它们，以及如何在团队和个人中识别它们。没有Scrum的价值观，我们只是在做活动，不会最大化Scrum的好处，使业务敏捷。</p>
<h1 id="Scrum-Values-Focus-Part-1-of-5"><a href="#Scrum-Values-Focus-Part-1-of-5" class="headerlink" title="Scrum Values: Focus (Part 1 of 5)"></a>Scrum Values: Focus (Part 1 of 5)</h1><p><i style="color:#f63;">Focus（专注）：专注于让客户满意。专注于冲刺（sprint）及其目标。</i><br>为了更好的完成任务，当我们处理复杂性和不可预测性任务时，专注是必不可少的。</p>
<h2 id="专注有助于经验主义和团队协作。"><a href="#专注有助于经验主义和团队协作。" class="headerlink" title="专注有助于经验主义和团队协作。"></a>专注有助于经验主义和团队协作。</h2><ul>
<li>当Scrum团队在一件或两件事情上进行协作时，他们通常会更有效，而不是独立地处理单独的产品待办事项。他们先做一件事，然后再做下一件事。这可以减少来自在制品和冲刺结束时未完成的工作的潜在浪费。虽然Scrum并没有告诉你如何交付，但是focus可以引导团队发现他们最好的工作方式，从而更快地完成工作并将浪费降到最低。</li>
<li>当有多个问题时，focus可以帮助团队确定首先要解决的问题，经常检查他们的进度，并在他们努力寻找解决方案时尝试新的实验。</li>
<li>当有相互竞争的优先事项时，专注可以帮助团队决定现在最重要的事情是什么。</li>
<li>当未来不确定的时候，有一种趋势是渐近明细。专注有助于团队接受不确定性，看看他们今天所知道的，然后迈出一小步。这种方法之所以有效，是因为我们从实践中学习，并且可以根据所学改变方向。</li>
<li>开发团队在交付“已完成”增量方面的共同责任，使人们关注整体结果，而不仅仅是每个人可以完成什么。</li>
<li>有了产品愿景，就可以专注于我们要去的地方，并且可以帮助团队的判断和决策。</li>
</ul>
<h2 id="Scrum框架包含有助于提Focus高度的元素。"><a href="#Scrum框架包含有助于提Focus高度的元素。" class="headerlink" title="Scrum框架包含有助于提Focus高度的元素。"></a>Scrum框架包含有助于提Focus高度的元素。</h2><ul>
<li>我们的重点是至少在每次冲刺结束时都有一个“完成”的增量。</li>
<li>Scrum事件和工件有助于创建关注于检查进度和新信息的焦点，因此我们可以以足够频繁的间隔进行调整。</li>
<li>我们专注于一个Sprint目标来指导团队交付什么。</li>
<li>每个角色都有一个独特的责任感，可以帮助个人知道应该把什么作为他们的优先事项。这最终有助于团队的成果。</li>
<li>产品Backlog是一个有序的列表，它创建了对下一步最重要事情的关注。</li>
<li>有时间限制的活动会产生一种紧迫感，帮助我们专注于活动的目的。</li>
</ul>
<p>团队需要不断地和协作地精炼“专注”对他们意味着什么，以便真正最大化Scrum。</p>
<h1 id="Scrum-Values-Openness-Part-2-of-5"><a href="#Scrum-Values-Openness-Part-2-of-5" class="headerlink" title="Scrum Values: Openness (Part 2 of 5)"></a>Scrum Values: Openness (Part 2 of 5)</h1><p><i style="color:#f63;">Openness（开放）：Scrum强调保持开放。</i><br>当我们处理复杂性和不可预测性时，开放是必不可少的。</p>
<h2 id="开放性促进了经验主义和协作团队精神。"><a href="#开放性促进了经验主义和协作团队精神。" class="headerlink" title="开放性促进了经验主义和协作团队精神。"></a>开放性促进了经验主义和协作团队精神。</h2><ul>
<li>公开我们的工作有助于为我们的进展创造透明度。没有透明度，任何检查和调整的尝试都将是有缺陷的。</li>
<li>开放性使团队成员能够寻求帮助。</li>
<li>开放性允许团队成员互相提供帮助。</li>
<li>开放性使团队成员能够分享他们的观点，感受到同行的意见，并能够支持团队决策。</li>
<li>当我们的假设被证明无效时，开放性帮助我们承认错误并改变方向。这适用于我们认为有价值的功能。这也适用于我们选择如何在产品中实现功能。</li>
</ul>
<h2 id="Scrum框架包含有助于促进开放性的元素。"><a href="#Scrum框架包含有助于促进开放性的元素。" class="headerlink" title="Scrum框架包含有助于促进开放性的元素。"></a>Scrum框架包含有助于促进开放性的元素。</h2><ul>
<li>将Sprint时间限制在30天或30天以下，可以促进基于新信息的改变方向的开放性。</li>
<li>Sprint目标是固定的并提供了指导，但是实现Sprint目标的计划是开放的，可以根据开发团队正在学习的内容进行更改。</li>
<li>透明的产品待办事项清单向我们的利益相关者展示了对产品计划（以及未计划的）和下一步可能发生的事情的开放性。</li>
<li>Sprint回顾的重点是不断改进我们团队的交互、流程和工具，这就要求我们对反馈、反思和改变工作方式持开放态度。</li>
<li>Sprint评审展示了与利益相关者分享进展的开放性，以及对反馈和与他们合作的开放性。</li>
</ul>
<p>团队需要不断地和协作地精炼“开放”对他们意味着什么，以便真正最大化Scrum。</p>
<h1 id="Scrum-Values-Courage-Part-3-of-5"><a href="#Scrum-Values-Courage-Part-3-of-5" class="headerlink" title="# Scrum Values: Courage (Part 3 of 5)"></a># Scrum Values: Courage (Part 3 of 5)</h1><p><i style="color:#f63;">Courage（勇气）：Scrum团队成员有勇气做正确的事情并解决棘手的问题。</i><br>勇气是解决复杂问题和培养高绩效团队的关键。</p>
<h2 id="勇气有助于经验主义和团队合作。"><a href="#勇气有助于经验主义和团队合作。" class="headerlink" title="勇气有助于经验主义和团队合作。"></a>勇气有助于经验主义和团队合作。</h2><ul>
<li>在压力下保持进展的透明度，以便更快地交付成果，这需要勇气。</li>
<li>不让我们的利益相关者放弃工作需要勇气。</li>
<li>寻求帮助或承认我们不知道怎么做需要勇气。</li>
<li>当其他人没有履行对团队的承诺时，让他们承担责任需要勇气。</li>
<li>我们可能会发现我们制造了顾客不想要的东西。承认我们的假设是错误的并改变方向需要勇气。</li>
<li>尝试建立我们从未建立过的东西需要勇气，不知道它是否会起作用。</li>
<li>与团队成员分享不同意见并进行富有成效的冲突需要勇气。</li>
<li>承认错误需要勇气。这可能适用于我们的技术工作、我们的决定，或者我们的行为方式。</li>
</ul>
<h2 id="Scrum框架包含有助于提升勇气的元素。"><a href="#Scrum框架包含有助于提升勇气的元素。" class="headerlink" title="Scrum框架包含有助于提升勇气的元素。"></a>Scrum框架包含有助于提升勇气的元素。</h2><ul>
<li>每一次Scrum活动都是一个检验和适应的机会。这种内在的假设，即改变方向是可以的，这使我们有了勇气。我们可以改变建设方向。我们可以改变建设方向。</li>
<li>冲刺的时间限制了失败对冲刺长度的影响。这给了我们勇气去尝试新事物，去实验，去学习。</li>
<li>Scrum的三个角色和他们各自的职责提升了勇气。产品负责人对产品价值最大化负责，因此她可以通过对低价值特征说“不”来表现勇气。开发团队负责交付高质量的产品，在压力下降低质量时，他们可以通过说“不”来展示勇气。</li>
<li>通过Sprint Backlog和产品Backlog，我们对计划的工作是透明的。通过向利益相关者展示完成的增量，我们对进度是透明的。透明需要勇气，透明有助于我们建立信任。信任越多，勇气越大。这是一个良性循环。</li>
<li>Sprint回顾的目的是检查我们作为Scrum团队的情况，并确定改进的行动。这使我们有勇气提出我们如何合作的问题。这使我们有勇气去尝试新事物，去想要更多。</li>
</ul>
<p>这仅仅是几个例子，说明Scrum“勇气”如何在Scrum Team中体现，帮助他们最大限度地发挥Scrum的好处。还有很多。团队需要不断地和协作地精炼“勇气”对他们意味着什么，以便真正最大化Scrum。</p>
<h1 id="Scrum-Values-Commitment-Part-4-of-5"><a href="#Scrum-Values-Commitment-Part-4-of-5" class="headerlink" title="Scrum Values: Commitment (Part 4 of 5)"></a>Scrum Values: Commitment (Part 4 of 5)</h1><p><i style="color:#f63;">Commitment（承诺）：对致力于实现Scrum团队目标做出承诺。</i><br>承诺对于解决复杂问题和发展高绩效团队至关重要。Scrum中的承诺常常被误解为在指定日期交付一个指定范围的承诺。这从来不是Scrum指南中承诺这个词的本意。我希望这篇文章有助于阐明承诺的价值。</p>
<h2 id="承诺有助于经验主义和团队协作。"><a href="#承诺有助于经验主义和团队协作。" class="headerlink" title="承诺有助于经验主义和团队协作。"></a>承诺有助于经验主义和团队协作。</h2><ul>
<li>当我们致力于团队的成功，而不仅仅是关心我们个人的成就时，这就创造了一个信任、高效解决问题和高团队标准的环境。</li>
<li>当我们致力于全面地进行Scrum时，而不仅仅是挑选容易的部分，我们可以充分体验透明、检查和适应的好处。</li>
<li>致力于持续改进，更容易根据新信息或经验数据改变方向。</li>
<li>承诺就是全力以赴。我们不能预测或控制产品开发中的所有复杂性，但我们可以承诺采取行动和调整我们的行为，基于反馈和新的学习。</li>
<li>当我们致力于交付价值时，我们会感觉到一种更强烈的共同目标感，这种意识驱使我们去合作。</li>
</ul>
<h2 id="Scrum框架包括有助于促进承诺的元素。"><a href="#Scrum框架包括有助于促进承诺的元素。" class="headerlink" title="Scrum框架包括有助于促进承诺的元素。"></a>Scrum框架包括有助于促进承诺的元素。</h2><ul>
<li>每个Scrum角色都有明确的责任，这是一种承诺。<br>1.产品经理（Product Owner）通过做出最佳决策来优化产品的价值，而不是简单地试图取悦每一个利益相关者，以此来证明自己的承诺。<br>2.开发团队通过创建一个符合他们“完成”定义的增量来展示他们的承诺，而不是几乎完成的事情。<br>3.Scrum Master通过维护Scrum框架来展示承诺，这意味着我们不会在压力下扩展Sprint或其他时间框来完成任务。Scrum Master通过消除Scrum团队无法解决的障碍来展示承诺，而不是容忍组织的现状。</li>
<li>在Sprint结束时交付一个“完成”增量可以促进对质量和持续改进的承诺。</li>
<li>产品待办事项清单能够保证透明度。涉众可以看到产品和当前工单中当前计划的内容。</li>
<li>Sprint Backlog使我们能够致力于提高进度的透明度。开发团队拥有Sprint Backlog，它总是根据我们所学到的来反映我们当前的进度。</li>
<li>Scrum每日站会是开发团队展示对彼此承诺的机会。他们合作检查他们的进展并调整他们的计划。它们决定了如何才能最好地协同工作来实现Sprint目标。</li>
<li>Sprint回顾会促进团队对持续改进的承诺。我们检查我们的流程、工具和交互，确定并致力于可操作的改进。</li>
</ul>
<p>这只是几个例子，说明Scrum的“承诺”如何在Scrum Team内部实现，以帮助他们最大化Scrum的好处。还有很多。团队需要不断地和协作地精炼“承诺”对他们意味着什么，以便真正最大化Scrum。</p>
<h1 id="Scrum-Values-Respect-Part-5-of-5"><a href="#Scrum-Values-Respect-Part-5-of-5" class="headerlink" title="Scrum Values: Respect (Part 5 of 5)"></a>Scrum Values: Respect (Part 5 of 5)</h1><p><i style="color:#f63;">Respect（尊重）：Scrum团队成员相互尊重，认为自己是有能力、独立的人。</i><br>尊重对于解决复杂问题和发展高绩效团队至关重要。这似乎是显而易见的，所以我将与大家分享Scrum中尊重价值的一些更微妙的例子。</p>
<h2 id="尊重有助于经验主义和团队合作。"><a href="#尊重有助于经验主义和团队合作。" class="headerlink" title="尊重有助于经验主义和团队合作。"></a>尊重有助于经验主义和团队合作。</h2><ul>
<li>如果我们尊重人们天生的足智多谋、富有创造力和能够合作解决复杂问题的能力，那么我们就赋予了自组织团队权力并使之成为可能。</li>
<li>通过尊重人们不同的背景、经验和技能范围，团队能够以创造性的方式有效地解决复杂的问题。</li>
<li>当我们尊重人们是由自主、掌握和目标所激励的时候，我们就创造了一个能吸引人们的环境，使团队变得比他们的部分总和还要强大。</li>
<li>如果我们尊重人们在考虑到他们当时所知道的情况和他们目前的资源的情况下正在尽最大努力，我们就能实现透明度。我们可以根据所学改变方向。</li>
<li>当我们表现出对他人的尊重，并假定他们有良好的意愿时，我们可以进行艰难的对话，帮助我们找出解决冲突的方法，并作为一个团队变得更强大。</li>
<li>当尊重所有的意见和观点时，我们可以确保每个人都有机会被倾听。当我们感觉自己被听到时，即使这个决定不是我们的偏好，也有可能完全支持团队的决定。</li>
</ul>
<h2 id="Scrum框架包括有助于促进尊重的元素。"><a href="#Scrum框架包括有助于促进尊重的元素。" class="headerlink" title="Scrum框架包括有助于促进尊重的元素。"></a>Scrum框架包括有助于促进尊重的元素。</h2><ul>
<li>整个Scrum团队参加Sprint计划、Sprint回顾和Sprint回顾。这促进了对每个角色、责任和不同观点的尊重。</li>
<li>开发团队是跨职能的，这意味着作为一个整体，它拥有交付“完成”产品增量所需的所有技能。这促进了对每个人的经验、技能和想法的尊重。这也促进了学习和成长。</li>
<li>Sprint Backlog归开发团队所有。因为他们是做这项工作的人，所以他们决定在一次冲刺中能做多少以及如何做这项工作。这表明了对他们的知识和技能的尊重，以及对以可持续的速度工作的尊重。</li>
<li>通过在Sprint审查中只审查“完成”的产品，我们为真正的进展带来了透明度。这表明了对我们利益相关者的尊重。</li>
<li>产品所有者寻求利益相关者的意见，与之合作，并为其设定现实的期望。这是对利益相关者的又一次尊重。</li>
<li>Scrum Master关注的是Scrum团队的健康和Scrum的有效使用。拥有一个专注于教学、促进和指导的角色，表明了对人和团队及其成长能力的尊重。</li>
<li>Scrum专注于交付价值，这表明了我们对组织的尊重，因为它不会把钱花在低价值的特性或可能永远不会使用的东西上。</li>
<li>在Sprint结束时有一个潜在的可释放的增量，这表明了我们对组织的尊重，因为我们没有强迫更多的投资来实现价值。它给组织提供投资决策的灵活性。</li>
</ul>
<p>这仅仅是几个例子，说明Scrum的价值如何在Scrum Team内部体现，以帮助他们最大化Scrum的好处。还有很多。团队需要不断地和协作地精炼“尊重”对他们意味着什么，以便真正最大化Scrum。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当Scrum团队体现并践行承诺、勇气、专注、开放和尊重的价值观时，Scrum的透明、检查和适应的支柱就会活跃起来，并为每个人建立信任。Scrum团队成员在处理Scrum事件、角色和工件时学习和探索这些价值观。文章参考自<a href="https://www.scrum.org/resources/blog/wet-weekend-scrum-values" target="_blank" rel="noopener">A Wet Weekend with the Scrum Values</a></p>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敏捷-Scrum三大支柱]]></title>
      <url>https://addonepiece.github.io/2020/01/02/agile-scrum-pillars/</url>
      <content type="html"><![CDATA[<p><img src="/images/agile-scrum-pillars2.jpeg" alt></p>
<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这三个支柱是在实现Scrum时驱动其他流程的动力，并解释了其中许多流程、仪式和行为背后的原因。理解这三个支柱可以在您的项目中更好地实现Scrum，也许还可以解释为什么事情是以这样的方式完成的。</p>
<h1 id="Scrum-理论的三大支柱"><a href="#Scrum-理论的三大支柱" class="headerlink" title="Scrum 理论的三大支柱"></a>Scrum 理论的三大支柱</h1><p>Scrum 基于经验过程控制理论，或称之为经验主义。经验主义主张知识源自实际经验以及 当前已知情况下做出的决定所获得。Scrum 采纳一种迭代、增量式的方法来优化对未来的 预测和控制风险。<br><i style="color:#f63;">透明、检视和适应</i>是经验过程控制的三大支柱，支撑起每一个经验过程的实施。<br><img src="/images/agile-scrum-pillars.jpeg" alt></p>
<h2 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h2><p>过程中的关键环节对于那些对产出负责的人必须是显而易见的。要拥有透明，就要为这些 关键环节制定统一的标准，这样所有留意这些环节的人都会对观察到的事物有统一的理 解。</p>
<p>例如</p>
<ul>
<li>所有参与者谈及过程时都必须使用统一的术语。</li>
<li>负责完成工作和检视结果增量的人必须对“完成”的定义，有一致的理解。</li>
</ul>
<h2 id="检视"><a href="#检视" class="headerlink" title="检视"></a>检视</h2><p>Scrum 的使用者必须经常检视 Scrum 的工件和完成 Sprint 目标的进展，以便发现不必要 的差异。检视不应该过于频繁而阻碍工作本身。当检视是由技能娴熟的检视者在工作中勤 勉地执行时，效果最佳。</p>
<h2 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h2><p>如果检视者发现过程中的一个或多个方面偏离可接受范围以外，并且将会导致产品不可接 受时，就必须对过程或过程化的内容加以调整。调整工作必须尽快执行如此才能最小化进 一步的偏离。</p>
<h2 id="三大支柱的作用"><a href="#三大支柱的作用" class="headerlink" title="三大支柱的作用"></a>三大支柱的作用</h2><p>Scrum之所以能够工作，并不是因为它有三个角色、五个事件和三个工件，而是因为它坚持迭代的、基于价值的增量交付的基本敏捷原则，通过频繁地收集客户反馈和接受变更。而Scrum的三大支柱为收集需求，发现问题，解决问题，改进问题提供支撑。这导致更快的上市时间、更好的交付可预测性、更高的客户响应能力、通过管理不断变化的优先级改变方向的能力、增强的软件质量和改进的风险管理。</p>
<h2 id="与用Scrum相关的推荐资源"><a href="#与用Scrum相关的推荐资源" class="headerlink" title="与用Scrum相关的推荐资源"></a>与用Scrum相关的推荐资源</h2><ul>
<li><a href="https://addonepiece.github.io">敏捷-Scrum 价值观 to do</a></li>
<li><a href="https://addonepiece.github.io">敏捷-Scrum 跨职能团队 to do</a></li>
<li><a href="https://addonepiece.github.io">敏捷-Scrum 自组织 todo</a></li>
<li><a href="https://addonepiece.github.io">敏捷-Scrum 持续改进 todo</a></li>
<li><a href="https://addonepiece.github.io">敏捷-Scrum 故事完成的定义todo</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重构改善即有代码设计]]></title>
      <url>https://addonepiece.github.io/2019/12/24/java-restructure/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>公司最近在改造一个之前做好的产品级大项目。这个项目之前是用的Spring MVC + jsp做的。现在我们要把这个项目改成 Spring boot + Spring MVC + mybatis + react的架构。改造后的项目将按照业务分成十几个微服务，使用Spring cloud进行服务治理。说是改造但为了满足进度和工期，我们后台的做法是找到对应的模块代码迁移到新的微服务中。在这个过程中我们发现了很架构，性能，编码规范等一系列问题，于是我们这支追求卓越的开发团队一致要求加强过程中对代码的重构。<br>下面我将给出一些重构切入点以便团队参考。</p>
<h1 id="重构前提"><a href="#重构前提" class="headerlink" title="重构前提"></a>重构前提</h1><p>重构也是有前提的。重构就是对既有代码的修改，那么即有代码肯定有他原来的业务逻辑，我们进行重构时一定要满足原来的业务逻辑。那么，我们怎么保证这一点呢？那就是为即将修改的代码建立一组可靠的测试环境。这些测试是必要的，因为尽管<i style="color:#f63;">遵循重构手法可以使我避免绝大多数引入bug的情形</i>，但我毕竟不是神，还是有可能犯错。所以我需要可靠的测试环境。</p>
<p>在此推荐大家阅读并参照《重构改善即有代码的设计》，《阿里巴巴Java开发手册》等书目进行重构。</p>
<h1 id="重构切入点"><a href="#重构切入点" class="headerlink" title="重构切入点"></a>重构切入点</h1><h2 id="移除不必要的属性设值方法"><a href="#移除不必要的属性设值方法" class="headerlink" title="移除不必要的属性设值方法"></a>移除不必要的属性设值方法</h2><p>如果你为某个字段提供了设置函数，这就暗示这个字段值可以被改变。如果你不希望在对象被创建之后此字段还有机会被改变，那就不要为它提供设值函数，同时将该字段设置为final。这样你的意图会更加清晰，并且可以排除其值被修改的可能性—-这种可能性往往是非常大的。<br><img src="/images/java-rebuild-unsetparameter.png" alt></p>
<h2 id="属性下放"><a href="#属性下放" class="headerlink" title="属性下放"></a>属性下放</h2><p>超类中的某个字段只被部分（而非全部）子类用到。将这个字段移到需要它的那些子类去。<br><img src="/images/java-rebuild-filedown.png" alt></p>
<h2 id="封装字段（Encapsulate-Field）"><a href="#封装字段（Encapsulate-Field）" class="headerlink" title="封装字段（Encapsulate Field）"></a>封装字段（Encapsulate Field）</h2><p>你的类中存在一个public字段，将它声明为private，并提供相应的访问函数。<br>面向对象的首要原则之一就是封装，或者称为“数据封装”。按此原则你绝对不应该将数据声明为private，否则其他对象就有可能访问甚至修改修改这项数据，而拥有该数据的对象却毫无感觉。<br>通过这项重构手法，你可以将数据隐藏起来，并提供相应的访问函数。但它毕竟只是第一步。如果一个类除了访问函数不能提供其他行为，它终究只是一个哑巴类。这样的类不能享受对象技术带来的好处。而你知道，浪费任何一个对象都是很不好的。实施Encapsulate Field之后，我会尝试寻找到新建访问函数的代码，看看是否可以通过简单的Move Method轻快的将它们移动到新对象中。<br><img src="/images/java-rebuild-privatefile.png" alt></p>
<h2 id="分解并重组过长的方法"><a href="#分解并重组过长的方法" class="headerlink" title="分解并重组过长的方法"></a>分解并重组过长的方法</h2><p>要知道，代码块越小，代码的功能就越容易管理，代码的处理和移动也就越轻松，可读性也会更强。对方法的行数进行限制也是很多编码规范中的要求。</p>
<p>分解并重组过长的方法三部曲：抽取方法、移动方法、使用多态。<br>目的是：对象方法责任合理分配、代码易于维护。</p>
<h2 id="重命名方法名"><a href="#重命名方法名" class="headerlink" title="重命名方法名"></a>重命名方法名</h2><p>函数的名称未能揭示函数的用途，则考虑对重命名方法名。<br><img src="/images/Java-rebuild-renamemethod.jpeg" alt></p>
<h2 id="移除未使用的参数"><a href="#移除未使用的参数" class="headerlink" title="移除未使用的参数"></a>移除未使用的参数</h2><p><img src="/images/java-rebuild-delparameter.png" alt><br>程序员可能经常添加参数，却往往不愿意去掉它们。他们打的如意算盘是：无论如何，多余的参数不会引起任何问题，而且以后还可能用上它。<br>这是恶魔的诱惑，一定要把它从脑子里赶出去！参数代表着函数所需的信息，不同的参数代表不同的意义。函数调用者必须为每一个参数操心该传什么东西进去。如果你不去掉多余参数，就是让你的每一位用户多操一份心。是很不划算的。</p>
<h2 id="方法下放"><a href="#方法下放" class="headerlink" title="方法下放"></a>方法下放</h2><p>超类中的某个方法只被部分（而非全部）子类用到。将这个方法移到需要它的那些子类去。<br><img src="/images/java-rebuild-methoddown.png" alt></p>
<h2 id="方法隐藏"><a href="#方法隐藏" class="headerlink" title="方法隐藏"></a>方法隐藏</h2><p>有一个函数，从来没有被其他任何类使用到，将这个函数设置为private。<br>重构往往促使你修改函数的可见度。</p>
<h2 id="简化条件语句"><a href="#简化条件语句" class="headerlink" title="简化条件语句"></a>简化条件语句</h2><p>简化条件语句（if else、switch case等），使得程序逻辑更加清楚，同时方便扩展。</p>
<h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><ol>
<li><p>合并条件语句：能合则合<br> 将多个条件合并，并以一个函数（Extract Method）的形式表示这个条件，即将复 杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性。<br> 例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 伪代码如下</span><br><span class="line">if ((file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...)) &#123; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 上面代码应该进行如下重构</span><br><span class="line">final boolean existed = (file.open(fileName, &quot;w&quot;) != null) &amp;&amp; (...) || (...); if (existed) &#123;</span><br><span class="line">... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并重复的条件执行片段<br> 重复的条件执行片段，可以提出到条件之外，根据情况提到条件之前或条件之后。</p>
</li>
<li>用守卫语句代替嵌套条件：特别条件直接return<br> 含义：守卫语句就是要么return要么抛异常的语句。<br> 用法：守卫语句通常用在一些不。寻常的条件处，表示一旦发生直接返回。守卫语句可以减少很多if - then - else的跳转，使逻辑变得清晰明了。有的时候，为了使用守卫语句，需要将已有的条件逆转，在逆转条件的时候不要使用非操作，这样不直接，非操作的条件都可以改成反向的条件。</li>
<li>引入Null对象：Null对象也是对象，利用多态<br> 注意：空对象一定是常量，它们的任何成分从来不发生变化。因此，我们实现空对象的时候使用单例模式。<br> 做法：主要是考虑 NullObject和isNull方法。</li>
</ol>
<h2 id="提炼超类"><a href="#提炼超类" class="headerlink" title="提炼超类"></a>提炼超类</h2><p>重复代码是系统中最糟糕的东西之一。如果你在不同地方做同一件事，一旦需要修改那些代码，你就得平白做更多的修改。</p>
<p>重复代码的某种形式就是：<br>两个类以相同的方式做类似的事情，或者以不同的方式做类似的事情。对象提供了一种简化这种情况的机制，那就是继承。<br>另一种选择就是Extract Class，这两种方案之间的选择就是继承和委托之间的选择。<br><img src="/images/java-rebuild-extractsuperclass.png" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>万能切入点，看着不顺眼的地方。但记得前提是你有良好的编码习惯,可靠的测试环境和高覆盖率的自测。<br>重构的节奏：测试、小修改、测试、小修改、测试、小修改……正是这种节奏让重构得以快速而安全地前进。</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[User Stories/用户故事]]></title>
      <url>https://addonepiece.github.io/2019/12/21/aigle-userStroies/</url>
      <content type="html"><![CDATA[<h1 id="User-Stories-用户故事"><a href="#User-Stories-用户故事" class="headerlink" title="User Stories/用户故事"></a>User Stories/用户故事</h1><p>下文翻译自<a href="https://www.mountaingoatsoftware.com/agile/user-stories" target="_blank" rel="noopener">Mike Cohn的博客</a></p>
<p><img src="/images/agile-userStories.jpeg" alt></p>
<p>用户故事是敏捷方法的一部分，该方法有助于将重点从编写需求转移到讨论需求。所有的敏捷用户故事都包括一个或两个书面句子，以及关于这个需求的一系列描述。</p>
<h2 id="什么是用户故事？"><a href="#什么是用户故事？" class="headerlink" title="什么是用户故事？"></a>什么是用户故事？</h2><p>用户故事是从需要新功能的人员（通常是系统的用户或客户）的角度出发，对功能的简短描述。它们通常遵循一个简单的模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作为一个&lt;用户类型&gt;，我想要&lt;一些目标&gt;，以便&lt;一些原因&gt;。</span><br><span class="line">As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.</span><br></pre></td></tr></table></figure></p>
<p>用户故事通常写在索引卡或便签上，并排贴在墙壁或桌子上，以方便计划和讨论。因此，他们将人们的注意力从写作需求转移到讨论功需求上。实际上，这些讨论比任何书面内容都重要。</p>
<h2 id="可以展示一些用户故事的示例吗？"><a href="#可以展示一些用户故事的示例吗？" class="headerlink" title="可以展示一些用户故事的示例吗？"></a>可以展示一些用户故事的示例吗？</h2><p>用户故事的好处之一是可以描述各种大小的需求。我们可以编写一个用户用户来涵盖大量功能，这些大型用户故事通常被称为史诗（Epics）。这是一个桌面备份产品的史诗级用户故事（epic agile user story）的示例：</p>
<ul>
<li>作为用户，我可以备份整个硬盘。</li>
<li>As a user, I can backup my entire hard drive.</li>
</ul>
<p>由于史诗（epic）太大，以至于敏捷团队通常无法在一个迭代中完成，因此在进入开发之前，史诗被拆分为多个较小的用户故事。上面的史诗可以分为数十个（或可能数百个），包括以下两个：</p>
<ul>
<li>作为高级用户，我可以根据文件大小，创建日期和修改日期指定要备份的文件或文件夹。</li>
<li>作为用户，我可以指示不备份的文件夹，这样我的备份驱动器就不会充满不需要保存的内容。</li>
</ul>
<h2 id="如何将细节添加到用户故事？"><a href="#如何将细节添加到用户故事？" class="headerlink" title="如何将细节添加到用户故事？"></a>如何将细节添加到用户故事？</h2><p>可以通过两种方式将详细信息添加到用户故事：</p>
<ul>
<li>通过将用户故事分成多个较小的用户故事。</li>
<li>通过添加“满足条件”（conditions of satisfaction）。</li>
</ul>
<p>当一个相对较大的故事分为多个较小的用户故事时，自然会添加详细信息。毕竟，已经写了更多的东西。</p>
<p>满足的条件只是一个高层次的验收测试，在敏捷用户故事完成之后，这个测试才是真实的。考虑以下作为另一个敏捷用户故事示例：</p>
<p>作为市场营销副总裁，我想选择一个假期用来回顾过去广告活动的效果，以便确定有收益的活动。</p>
<p>通过添加以下满足条件，可以将详细信息添加到该用户故事：</p>
<ul>
<li>确保它适用于主要的零售假期：圣诞节，复活节，总统日，母亲节，父亲节，劳动节，元旦。</li>
<li>支持跨两个日历年的假期（无跨三个假期）。</li>
<li>假期可以从一个假期设置到下一个假期（例如，感恩节至圣诞节）。</li>
<li>假期可以设置为假期前的几天。</li>
</ul>
<h2 id="谁撰写用户故事？"><a href="#谁撰写用户故事？" class="headerlink" title="谁撰写用户故事？"></a>谁撰写用户故事？</h2><p><img src="/images/agile-us-author.png" alt><br>任何人都可以编写用户故事。确保用户故事存在于产品待办列表（product backlog）是PO的责任，但这并不意味着PO是编写它们的人。在一个好的敏捷项目过程中，您应该期望每个团队成员都编写一些用户故事。</p>
<p>另外，请注意，撰写用户故事的人远不如参与讨论的人重要。</p>
<h2 id="用户故事何时编写？"><a href="#用户故事何时编写？" class="headerlink" title="用户故事何时编写？"></a>用户故事何时编写？</h2><p>用户故事是在整个敏捷项目中编写的。通常，在敏捷项目开始时会举行一个故事写作研讨会。团队中的每个人都以创建产品待办列表（product backlog）为目标，该待办列表完整描述了在项目过程中或项目三到六个月的发布周期内要被添加的功能。</p>
<p>这些用户故事中肯定会出现一些史诗（Epic）级的需求。随后，史诗将被分解成较小的故事，这些故事更容易放入单个迭代中。此外，任何人都可以随时编写新故事并将其添加到产品待办列表中。</p>
<h2 id="用户故事可以代替需求文档吗？"><a href="#用户故事可以代替需求文档吗？" class="headerlink" title="用户故事可以代替需求文档吗？"></a>用户故事可以代替需求文档吗？</h2><p>敏捷项目，特别是Scrum项目，使用产品待办列表（product backlog），这是一个包含了要在产品或服务中开发的功能的有序列表。尽管产品待办列表项（product backlog items）可以满足团队的任何需求，但用户故事已成为产品待办列表项的最佳和最受欢迎的形式。</p>
<p>尽管可以将产品待办列表视为传统项目需求文档的替代品，但重要的是要记住，在讨论故事之前，敏捷用户故事的书面部分（“作为用户，我想要…”）是不完整的。</p>
<p>通常最好将书面部分视为实际需求的参考。用户故事可能指向描述工作流程的图表，显示如何执行计算的电子表格，或PO/团队期望的任何其他工件。</p>
<h2 id="与用户故事相关的推荐资源"><a href="#与用户故事相关的推荐资源" class="headerlink" title="与用户故事相关的推荐资源"></a>与用户故事相关的推荐资源</h2><ul>
<li><a href="https://www.mountaingoatsoftware.com/blog/advantages-of-the-as-a-user-i-want-user-story-template" target="_blank" rel="noopener">“作为用户，我想要”用户故事模板的优点。</a></li>
<li><a href="https://www.mountaingoatsoftware.com/blog/a-sample-format-for-a-spreadsheet-based-product-backlog" target="_blank" rel="noopener">基于电子表格的产品待办列表的样本格式</a></li>
<li><a href="https://www.mountaingoatsoftware.com/articles/advantages-of-user-stories-for-requirements" target="_blank" rel="noopener">用户故事对需求的优势</a></li>
<li><a href="https://www.mountaingoatsoftware.com/blog/non-functional-requirements-as-user-stories" target="_blank" rel="noopener">非功能需求作为用户故事</a></li>
<li><a href="https://www.mountaingoatsoftware.com/presentations/introduction-to-user-stories" target="_blank" rel="noopener">用户故事简介</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrummaster保护团队是把双刃剑。]]></title>
      <url>https://addonepiece.github.io/2019/12/15/agile-protectTeam/</url>
      <content type="html"><![CDATA[<h1 id="一、【翻译】Scrummaster保护团队是把双刃剑。"><a href="#一、【翻译】Scrummaster保护团队是把双刃剑。" class="headerlink" title="一、【翻译】Scrummaster保护团队是把双刃剑。"></a>一、【翻译】Scrummaster保护团队是把双刃剑。</h1><h2 id="下文翻译自Mike-Cohn的博客"><a href="#下文翻译自Mike-Cohn的博客" class="headerlink" title="下文翻译自Mike Cohn的博客"></a>下文翻译自<a href="https://www.mountaingoatsoftware.com/blog/protecting-the-team-cuts-both-ways" target="_blank" rel="noopener">Mike Cohn的博客</a></h2><p>ScrumMaster的职责之一是保护团队，这是公认的Scrum格言。通常的例子是ScrumMaster必须保护团队不受过于激进的产品经理的影响。这个例子没有什么错，许多团队确实需要得到保护，不受产品经理的影响，因为他们对更多功能的渴望会促使团队在质量方面走捷径。</p>
<p>然而，一个好的ScrumMaster也可以保护团队不受一个更有害的问题的影响：自满。在Scrum实现了一些简单的、早期的改进之后，一些团队变得自满了。他们不再寻求进一步的改进。这取决于团队的ScrumMaster能否保护他们不受这种自满情绪的影响。</p>
<p>因此，一个好的ScrumMaster有时不得不站出来面对一个咄咄逼人的产品经理，并说：“现在不是让这个团队更加努力的时候。他们正在尽可能地努力工作，如果再施加压力，他们很可能会变得马虎。我给一个好的ScrumMaster的建议是：要能掌握团队状态，并知道是时候该干什么了，比如团队该休整了,团队已经准备好了,团队能够做什么,团队是时候可以寻求突破了等。ScrumMaster应该保护团队不受产品经理的影响并且不自满。</p>
<h2 id="直言不讳，表达你的观点？"><a href="#直言不讳，表达你的观点？" class="headerlink" title="直言不讳，表达你的观点？"></a>直言不讳，表达你的观点？</h2><p>有些地方可能翻译的不好，你可以留言纠正或是表达你的恶观点。</p>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】敏捷管理过程框架Scrum]]></title>
      <url>https://addonepiece.github.io/2019/12/14/agile-scrum/</url>
      <content type="html"><![CDATA[<h1 id="【翻译】敏捷管理过程框架Scrum"><a href="#【翻译】敏捷管理过程框架Scrum" class="headerlink" title="【翻译】敏捷管理过程框架Scrum"></a>【翻译】敏捷管理过程框架Scrum</h1><p>文章翻译自<a href="https://www.mountaingoatsoftware.com/agile/scrum" target="_blank" rel="noopener">Mike Cohn的博客</a><br><img src="/images/agile-scrum.png" alt><br>Scrum是一种敏捷的项目管理方式，通常用于软件开发项目。使用Scrum进行敏捷软件开发通常被视为一种方法论；但与其将Scrum视为方法论，不如将其视为管理过程的框架。</p>
<h2 id="什么是Scrum？"><a href="#什么是Scrum？" class="headerlink" title="什么是Scrum？"></a>什么是Scrum？</h2><p>在敏捷Scrum世界中，与其提供关于如何在项目中完成所有事情的完整、详细的描述，还不如将其中的大部分留给Scrum软件开发团队。这是因为团队将最清楚如何解决他们提出的问题。</p>
<p>这就是为什么在Scrum开发中，例如，Sprint计划会议以期望的结果（对下一个冲刺中要开发的一组特征的承诺）来代替，而不是在大多数方法学中提供的一组入口标准、任务定义、验证标准、退出标准（ETVX文章末尾有解释说明）等等。</p>
<p>Scrum依赖于一个自组织、跨职能的团队。scrum团队是自组织的，因为没有一个整体的团队领导来决定哪个人将执行哪个任务或者如何解决一个问题。这些问题是由整个团队决定的。<br><img src="/images/scrum-team.png" alt><br>在Scrum中，团队是跨职能的，这意味着每个人都需要从一个想法到实现一个特性。</p>
<p>在敏捷开发中，Scrum团队由两个特定的角色支持。第一个是ScrumMaster，他可以被认为是团队的教练，帮助团队成员使用Scrum流程在最高级别上执行任务。</p>
<p>产品所有者（product owner，PO）在国内通常叫做产品经理，是Scrum软件开发中的另一个角色，代表业务、客户或用户，并指导团队构建正确的产品。</p>
<h2 id="Scrum开发：涉及到什么？"><a href="#Scrum开发：涉及到什么？" class="headerlink" title="Scrum开发：涉及到什么？"></a>Scrum开发：涉及到什么？</h2><p>Scrum模型建议项目通过一系列的sprint进行。根据敏捷方法，sprint的时间限制不超过一个月，通常是两周。</p>
<p>Scrum方法论提倡在sprint开始时召开计划会议，在会议上，团队成员计算出他们可以提交多少<a href="https://addonepiece.github.io/2019/12/21/aigle-userStroies/">用户故事/User Storie</a>，然后创建sprint backlog——sprint期间要执行的任务列表。</p>
<p>在敏捷Scrum冲刺过程中，Scrum团队从idea到编码和测试的功能都是<a href="https://www.jianshu.com/p/20065cd7d976" target="_blank" rel="noopener">特性/Features</a>的一小部分。最后，这些特性完成了，意味着编码、测试并集成到不断发展的产品或系统中。</p>
<p><img src="/images/agile-EpicFeatureStory.png" alt></p>
<p>在sprint的每一天，所有团队成员都应该参加Scrum的站会，包括ScrumMaster和PO（产品经理）。会议时间限制在15分钟以内。在此期间，团队成员分享他们在前一天所做的工作，并将在这一天工作，并记录和核对过程遇到的问题障碍和风险。Scrum模型将每日站会视为一种同步团队成员sprint工作的方式。</p>
<p>在sprint结束时，团队进行sprint评审，在此期间，团队向PO或希望提供反馈以影响下一次sprint的任何其他干系人演示新功能。Scrum软件开发中的这个反馈循环可能会导致新交付功能的更改，也可能会导致修改或向产品backlog添加项。</p>
<p>Scrum项目管理的另一个活动是在每个sprint结束时的sprint回顾。整个团队都参加了这次会议，包括ScrumMaster和PO。回顾会是一个反思已结束的sprint并确定改进项的机会。</p>
<h2 id="Scrum过程：主要工件"><a href="#Scrum过程：主要工件" class="headerlink" title="Scrum过程：主要工件"></a>Scrum过程：主要工件</h2><p>Scrum开发中的主要工件当然是产品本身。Scrum模型期望团队在每个Scrum sprint结束时将产品或系统带到一个潜在的可交付状态。</p>
<p>产品backlog是Scrum的另一个工件。这是要添加到产品中的功能的完整列表。PO优先处理积压工作，这样团队总是首先处理最有价值的特性。</p>
<p>使用Scrum方法创建产品backlog的最流行和最成功的方法是用用户故事填充它，用户故事是从用户或客户的角度描述功能的简短描述。</p>
<p>在Scrum项目管理中，在sprint的第一天和计划会议期间，团队成员创建sprint backlog。sprint backlog可以看作是团队的sprint待办事项列表，而产品backlog则是要构建的特性列表（以用户故事的形式编写）。</p>
<p>sprint backlog是团队需要执行的任务列表，显示在sprint期间交付的功能。</p>
<p>Scrum敏捷方法产生的其他工件是sprint burndown图表和release burndown图表。Burndown图表即燃尽图显示了sprint或release中剩余的工作量，是Scrum软件开发中的一个有效工具，用于确定sprint或release是否按计划在预期日期完成所有计划工作。</p>
<h2 id="敏捷Scrum项目：主要角色"><a href="#敏捷Scrum项目：主要角色" class="headerlink" title="敏捷Scrum项目：主要角色"></a>敏捷Scrum项目：主要角色</h2><p>即使你是Scrum新手，你也可能听说过ScrumMaster这个角色。ScrumMaster是团队的教练，帮助Scrum实践者达到最高的绩效水平。</p>
<p>在Scrum过程中，ScrumMaster在许多方面与传统的项目经理不同，包括这个角色不向团队提供日常指导，也不向个人分配任务。</p>
<p>一个好的ScrumMaster可以保护团队不受外界干扰，让团队成员在冲刺过程中疯狂地专注于他们选择的目标。</p>
<p>当ScrumMaster专注于帮助团队尽其所能做到最好时，PO会努力引导团队达到正确的目标。PO通过创建一个令人信服的产品远景，然后通过产品backlog将该远景传达给团队来实现这一点。</p>
<p>PO（产品经理）负责对Scrum开发期间的待办列表的优先级进行排序，以保证系统的构成，被其用户、开发团队如期望的被了解。<br>上面一句话原文是这样的，感觉比较难翻译。The product owner is responsible for prioritizing the backlog during Scrum development, to ensure it’s up to par as more is learned about the system being built, its users, the team and so on.<br>我请教几位敏捷大神，给出的翻译如下，贴出来供大家参考。<br>在Scrum开发里，PO负责待办列表的优先级排序，以建立对系统，用户群体以及团队等问题的共识基础。</p>
<p>Scrum项目管理的第三个也是最后一个角色是Scrum团队本身。虽然在Scrum中，个人可能以不同的职称加入团队，但这些职称并不重要。Scrum方法论指出，每个人都尽其所能地为完成每个sprint的工作做出贡献。</p>
<p>这并不意味着测试人员将被期望重新构建系统；在采用敏捷Scrum模型之前，个人将把大部分（有时是全部）时间花在他们工作的任何规程上。但是，在Scrum中，人们希望个人能够超越他们喜欢的学科，只要这样做是为了团队的利益。</p>
<p>在敏捷方法论中，考虑这三个角色相互关联的一种方式是作为一辆赛车。</p>
<p>Scrum团队就是汽车本身，随时准备沿着它所指的任何方向前进。PO是司机，确保汽车总是朝着正确的方向行驶。ScrumMaster是主要的机械师，它能使汽车保持良好的调教和最佳性能。</p>
<h2 id="ETVX补充说明"><a href="#ETVX补充说明" class="headerlink" title="ETVX补充说明"></a>ETVX补充说明</h2><p>ETVX（Entry / Task / Verification / eXit)模式。<br>IBM公司于80年代提出一个结构化的描述架构-ETVX ( Entry / Task / Verification / eXit )模式来叙述整个软体发展的生命周期模式与每个阶段相对应的作业活动，让研读的人员能够非常清楚整个专案的软体发展架构。<br>ETVX模式可以说是以质量为基础的角度来建立流程和活动的模式，它将PDCA循环的思路直接融入到了软件项目计划和软件开发生命周期模型中。在CMMI的标准体系的建立中，针对高端流程图到各个PA域，都可以借鉴ETVX模式的方法来进行各种规程的建立。</p>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】敏捷中的Scrum Master]]></title>
      <url>https://addonepiece.github.io/2019/12/14/agile-scrum-master/</url>
      <content type="html"><![CDATA[<p>公司在2018年年初开始推行敏捷，在公司高层领导的大力支持下我们开展了敏捷转型。我有幸参与和见证了公司敏捷转型的全过程。在我们的敏捷团队中我是Scrum Master的角色。为了能更好的胜任SM的角色，也为了能够更好的为公司敏捷转型尽一分力，我一直都在努力地做好本职工作并不断地学习敏捷知识。在这期间我曾多次问自己什么是Scrum Master，只有你知道什么是Scrum Master你才能更好的去成为Scrum Master。<br>那么，什么是Scrum Master？希望大家能在下面这篇翻文中找到答案。</p>
<h1 id="一、【翻译】什么是Scrum-Master。"><a href="#一、【翻译】什么是Scrum-Master。" class="headerlink" title="一、【翻译】什么是Scrum Master。"></a>一、【翻译】什么是Scrum Master。</h1><h2 id="下文翻译自Mike-Cohn的博客"><a href="#下文翻译自Mike-Cohn的博客" class="headerlink" title="下文翻译自Mike Cohn的博客"></a>下文翻译自<a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html" target="_blank" rel="noopener">Mike Cohn的博客</a></h2><p>什么是Scrum Master？ScrumMaster负责确保Scrum团队遵循<a href="https://addonepiece.github.io/2019/12/14/agile-scrum/">Scrum</a>的价值观和实践。ScrumMaster通常被认为是团队的教练，帮助团队尽可能地做好工作。ScrumMaster也可以被看作是团队的过程所有者，它与项目的关键干系人product owner（称为产品所有者）建立了一种平衡。</p>
<p>ScrumMaster尽一切可能帮助团队在最高水平上表现。这包括消除任何阻碍进度的因素，促进会议的召开，以及与产品负责人合作以确保产品待办事项处于良好状态并为下一个sprint做好准备。ScrumMaster角色通常由前项目经理或技术团队领导担任，但可以是任何人。<br>ScrumMaster也经常被视为团队的保护者。最常见的例子是ScrumMaster通过确保团队不会由于来自过分激进的产品所有者的压力而过度承诺在sprint期间能够实现的目标来保护团队。然而，一个好的ScrumMaster也能保持团队不<a href="http://localhost:4000/2019/12/15/agile-protectTeam/" target="_blank" rel="noopener">自满</a>。</p>
<p><img src="/images/agile-scrum-master.jpeg" alt></p>
<p>什么是Scrum Master角色，它是如何融入到项目中的？许多新加入ScrumMaster角色的人都在与ScrumMaster明显的矛盾斗争，ScrumMaster既是团队的服务型领导，又是没有权力的人。</p>
<p>当我们意识到尽管ScrumMaster无权控制Scrum团队成员，但ScrumMaster确实有权控制这个过程时，表面上的矛盾就消失了。尽管ScrumMaster可能不能说“你被解雇了”，但ScrumMaster可以说，“我决定下个月我们要尝试两周的冲刺。”</p>
<p>ScrumMaster帮助团队使用Scrum。把ScrumMaster的帮助想象成一个私人教练，他帮助你坚持锻炼方案，以正确的形式进行所有的锻炼。一个好的教练将提供动力，同时确保你不会通过跳过一个艰苦的锻炼来作弊。然而，教练的权限是有限的。</p>
<p>教练不能强迫你做你不想做的运动。相反，教练会提醒你你的目标以及你选择如何实现这些目标。如果教练有权，则由客户授予。scrummaster是一样的：他们有权限，但是这个权限是由团队授予的。</p>
<p>ScrumMaster可以对团队说，“听着，我们应该在每个sprint结束时交付潜在的可交付软件。我们这次没有那样做。我们能做些什么来确保我们在下一次冲刺中做得更好？“这是ScrumMaster对流程行使权限；如果团队未能交付可能交付的东西，那么流程就出了问题。</p>
<p>但是由于ScrumMaster的权限是在对流程流程的控制内，所以同一个ScrumMaster不应该说，“因为我们在最后一个sprint中未能交付一些可能可以交付的东西，所以我希望在提交所有代码之前要让托德（人名）进行review（检查）。”让托德review代码可能是一个好主意，但是这个决定不是ScrumMaster的权限。这样做超出了流程的权限，并干涉了团队的工作方式。</p>
<p>由于权限仅限于确保团队遵循流程，ScrumMaster的角色可能比典型项目经理的角色更难做。项目经理通常可以这么讲，那就是“就按我说的做”。而ScrumMaster可以这样说的场景是有限的，并且只限于确保Scrum得到遵循。</p>
<p>阅读更多关于<a href="https://www.mountaingoatsoftware.com/agile/scrum/roles/scrummaster/requirements" target="_blank" rel="noopener">ScrumMaster相关</a>的信息。</p>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java建造者模式解读]]></title>
      <url>https://addonepiece.github.io/2019/12/13/Java-pattern-builder/</url>
      <content type="html"><![CDATA[<p>Builder模式是代码编写过程中经常会用到的一类设计模式。最近重读了《Effective Java》和《设计模式》的builder章节，同时也读了其他人对于builder模式的理解和应用，在此记录我自己对Builder模式的一些理解。</p>
<h1 id="一、意图"><a href="#一、意图" class="headerlink" title="一、意图"></a>一、意图</h1><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
<h1 id="二、场景"><a href="#二、场景" class="headerlink" title="二、场景"></a>二、场景</h1><p>1.当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。<br>2.当构造过程必须允许被构造的对象有不同的表示时。</p>
<h1 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h1><p>遇到多个构造器参数时要考虑用构建器。静态工厂和构造器有个共同的局限性：它们都不能很好地扩展到大量的可选参数。<br>考虑这样的一个场景：用一个类表示包装食品外面显示的营养成分标签。这些标签中有几个域是必需的：每份的含量、每罐的含量以及每份的卡路里，还有超过20个可选域:总脂肪量、饱和脂肪量、转化脂肪、胆固醇、钠等等。<br>程序员一向习惯采用重叠构造器模式，在这种模式下，你提供第一个只有必要参数的构造器，第二个构造器有一个可选参数，第三个有两个可选参数，以此类推，最后一个构造器包含所有可选参数。重叠构造器模式可行，但是当有许多参数的时候，客户端代码会很难编写，并且仍然难以阅读。一长串类型相同的参数会导致一些微妙的错误。如果客户端不小心颠倒了其中两个参数的顺序，编译器也不会出错，但是程序在运行时会出现错误的行为。</p>
<p>下面是Builder模式的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBuilder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servingSize = builder.servingSize;</span><br><span class="line">        <span class="keyword">this</span>.servings = builder.servings;</span><br><span class="line">        <span class="keyword">this</span>.calories = builder.calories;</span><br><span class="line">        <span class="keyword">this</span>.fat = builder.fat;</span><br><span class="line">        <span class="keyword">this</span>.sodium = builder.sodium;</span><br><span class="line">        <span class="keyword">this</span>.carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NutritionFacts&#123;"</span> + <span class="string">"servingSize="</span> + <span class="keyword">this</span>.servingSize + <span class="string">", servings="</span> + <span class="keyword">this</span>.servings + <span class="string">", calories="</span></span><br><span class="line">                + <span class="keyword">this</span>.calories + <span class="string">", fat="</span> + <span class="keyword">this</span>.fat + <span class="string">", sodium="</span> + <span class="keyword">this</span>.sodium + <span class="string">", carbohydrate="</span></span><br><span class="line">                + <span class="keyword">this</span>.carbohydrate + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">IBuilder</span>&lt;<span class="title">NutritionFacts</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// Required parameters</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</span><br><span class="line">        <span class="comment">// Optional parameters - initialized to default values</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> servingSize, <span class="keyword">final</span> <span class="keyword">int</span> servings)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="keyword">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.calories = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.fat = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.carbohydrate = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sodium = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NutritionFacts是不可变的。builder的setter方法返回builder本身，以便可以把调用链接起来。下面就是客户端代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IBuilder&lt;NutritionFacts&gt; builder = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">5</span>, <span class="number">3</span>).calories(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">final</span> NutritionFacts nutritionFacts = createNutritionFacts(builder);</span><br><span class="line">        System.out.println(nutritionFacts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> NutritionFacts <span class="title">createNutritionFacts</span><span class="params">(<span class="keyword">final</span> IBuilder&lt;NutritionFacts&gt; builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样的客户端代码很容易编写，更重要的是，易于阅读。</p>
<h1 id="四、个人理解"><a href="#四、个人理解" class="headerlink" title="四、个人理解"></a>四、个人理解</h1><h2 id="builder模式要点"><a href="#builder模式要点" class="headerlink" title="builder模式要点"></a>builder模式要点</h2><p>1.用于分步骤构建一个复杂的对象。builder提供几种固定的步骤接口和获取最终对象接口，这些步骤接口的调用次数、调用顺序由Director决定，最终通过获取最终对象接口得到最终产品。</p>
<p>2.支持多种构建算法。不同构件算法可以创建出不同的表现。Builder模式封装了构建算法，调用者无需知道具体的构建算法细节。</p>
<p>3.拥有稳定的部件类型及部件装配方式。builder接受的组件类型和组件装配方式稳定不变，构建算法和它的组件互不影响。</p>
<h2 id="builder模式优点"><a href="#builder模式优点" class="headerlink" title="builder模式优点"></a>builder模式优点</h2><p>1.将一个“复杂对象的构建算法”与它的“部件及组装方式”分离，使得构建算法可以独立应对变化；</p>
<p>2.不同构件算法可以复用相同的部件和部件组装方式；</p>
<p>3.不同构件算法，可以生成不同表现的对象；</p>
<p>4.“部件类型“及其”组装方式“相对稳定，不随着构建算法改变而改变。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解builder模式重点在两个词，“创建对象”和“一变一不变”。<br>“创建对象”指明builder模式的最终目的为创建对象，是大前提。“一变一不变”即构建算法多变，但是部件和部件装配方式稳定不变，既可以用于描述builder模式使用场景，也是builder模式的特点。<br>案例代码是可以运行的，自己敲一敲。至少要考下来放到ide中运行下，分析下来帮助你理解和吸收。</p>
<p>参考：<br>1.《大话设计模式》<br>2.《Effective Java 第二版》</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[敏捷团队建设之守破离]]></title>
      <url>https://addonepiece.github.io/2019/12/12/agile-shoupoli/</url>
      <content type="html"><![CDATA[<p>敬请期待</p>
]]></content>
      
        <categories>
            
            <category> 敏捷 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 敏捷/Agile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Vue、ElementUI的换肤解决方案]]></title>
      <url>https://addonepiece.github.io/2019/07/01/vue-element-change-theme/</url>
      <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>换肤这个功能，不能算是很常见，但是也是有需求的，所以这里提供几种前端的换肤解决方案，供大家参考。</p>
<p>本文将介绍几种基于Vue、Element-UI的换肤实现方案，力争通俗易懂，易上手，希望大家喜欢~</p>
<a id="more"></a>
<h1 id="方案一、使用全局的样式覆盖（前端通用）"><a href="#方案一、使用全局的样式覆盖（前端通用）" class="headerlink" title="方案一、使用全局的样式覆盖（前端通用）"></a>方案一、使用全局的样式覆盖（前端通用）</h1><blockquote>
<p>这个应该是最常见，也是大家最容易想到的，也是最容易实现的一种方案。</p>
</blockquote>
<p>我们单独写一份样式表（css 文件 <a href="https://github.com/addonepiece/vue-cms/blob/master/src/assets/custom-theme/science-blue.css" target="_blank" rel="noopener">深空蓝.css</a>），以一个特定的命名开头（比如 <code>.blue-theme</code>），然后在这个 css 文件中，完成我们第二套皮肤的样式代码，然后当我们点击换肤的时候，就将 <code>blue-theme</code> 这个 <code>class</code> 添加到 <code>body</code> 标签中，那么这个时候，我们的换肤效果就出来了。</p>
<p><img src="https://img-blog.csdnimg.cn/20190904142928156.gif" alt="在这里插入图片描述"></p>
<p>当我们这里点击深空蓝的时候，将 class <code>science-blue</code> 添加到 <code>body</code> 上，点击青铜绿的时候，就将 <code>science-blue</code> 去掉，因为我们默认的就是青铜绿。</p>
<h1 id="方案二、自定义自己的Element-ui配色"><a href="#方案二、自定义自己的Element-ui配色" class="headerlink" title="方案二、自定义自己的Element-ui配色"></a>方案二、自定义自己的Element-ui配色</h1><p>默认的 Element 的配色是：</p>
<font color="#409EFF" size="4"><strong>蓝 色</strong></font><br><font color="#67C23A" size="4"><strong>绿 色</strong></font><br><font color="#E6A23C" size="4"><strong>橙 色</strong></font><br><font color="#F56C6C" size="4"><strong>红 色</strong></font><br><font color="#909399" size="4"><strong>灰 色</strong></font>

<p>Element-UI 还提供了了一个自定义的 <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="noopener">配色工具</a> 以及 <a href="https://element.eleme.cn/#/zh-CN/theme/preview" target="_blank" rel="noopener">配置页面</a>，通过这个工具或者这个页面，我们可以自定义上面五种主色调以及辅助色。</p>
<p><img src="https://img-blog.csdnimg.cn/20190831135330563.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt></p>
<p>配好以后，如果是工具就生成，如果是网页就下载。得到一个样式文件，这就是我们配置好的主题样式文件。<br><img src="https://img-blog.csdnimg.cn/2019083114454182.png" alt></p>
<p>保持 <code>css</code>文件与 <code>fonts</code> 目录的关系不变（ps：这点很重要），将其放入我们的项目中。（你可以将这个<code>css</code> 文件改成你喜欢的名字，比如我改成了叫：<code>theme-summer.css</code>）<br><img src="https://img-blog.csdnimg.cn/20190831144837820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt></p>
<p>然后在我们项目的 <code>main.js</code> 中，注释掉 <code>Element-UI</code> 的原来 css 文件引入，引入我们刚才放进项目中的 css 文件。<br><img src="https://img-blog.csdnimg.cn/2019083115045758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt><br>这个时候，项目中关于 Element-UI 的颜色，就变成了刚才我们自定义配置的颜色配色了。（<font color="#7ed321">下面是我自定义的一套颜色，你们觉得如何？</font>）</p>
<p><img src="https://img-blog.csdnimg.cn/20190831175858923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>但是，你发现没，这样只是将我们项目中的 Element-UI 的默认配色改成我们想要的；但是我们要做的是换肤功能，希望颜色是可以切换的。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/2019083117114450.png" alt></p>
<p>所以，我们还是用上面的方法，给这个生成的css文件里面的每一个 <code>css</code> 样式加上一个独特的命名前缀，然后换肤的时候，就将这个 <code>class</code> 添加到 <code>body</code> 上面，如此一来，也能实现很丰富的换肤功能（因为我们可以自己配很多套好看的配色）</p>
<p><strong>现在摆在眼前的一个需要解决的问题是：这个 <code>css</code> 文件加命名空间怎么加？</strong><br><img src="https://img-blog.csdnimg.cn/2019083117211126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>我们看一下这个工具生成的，或者 <a href="https://element.eleme.cn/#/zh-CN/theme/preview" target="_blank" rel="noopener">配置页面</a> 导出的这个 css 文件，混淆压缩的代码，手动给每一个样式外面包裹一个 class 来做命名空间是不现实的，所以这里要用到一个 <code>gulp</code> 插件 <code>gulp-css-wrap</code> ，可以帮助我们完成这个结果。</p>
<p>首先：<br><code>npm i gulp gulp-clean-css gulp-css-wrap -D</code></p>
<p>然后，编写 <code>gulpfile.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)</span><br><span class="line"><span class="keyword">var</span> cssWrap = <span class="built_in">require</span>(<span class="string">'gulp-css-wrap'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> customThemeName = <span class="string">'.theme-summer'</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src( path.resolve(<span class="string">'./index.css'</span>))</span><br><span class="line">    .pipe(cssWrap(&#123;<span class="attr">selector</span>: customThemeName&#125;))</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>然后运行 <code>gulp</code></p>
<p>这样就得到了一个以 <code>.theme-summer</code> 为命名空间的自定义主题了。</p>
<p>加完以后，我们按照前面介绍的切换 <code>body</code> 元素的 <code>class</code> 的方法，就可以实现皮肤切换的功能了。</p>
<p><img src="https://img-blog.csdnimg.cn/20190904143459163.gif" alt></p>
<h1 id="方案三、快速改变网站颜色"><a href="#方案三、快速改变网站颜色" class="headerlink" title="方案三、快速改变网站颜色"></a>方案三、快速改变网站颜色</h1><p>依据 Element 官网所介绍，Element 使用 SCSS 编写，如果你的项目也使用了 SCSS，那么可以直接在项目中改变 Element 的样式变量。新建一个 <code>element-variables.scss</code> 样式文件。（温馨提示：请确保你安装了 <code>node-sass</code> 与 <code>sass-loader</code>）</p>
<p><code>element-variables.scss</code> 文件，这里就不贴出来了，具体可以看这里：<a href="https://github.com/addonepiece/vue-cms/blob/master/src/element-variables.scss" target="_blank" rel="noopener">element-variables.scss</a>，这个文件里面定义了很多颜色变量</p>
<p>这种方法使用起来是简单的，你只需将其引入<br><img src="https://img-blog.csdnimg.cn/20190831181453850.png" alt="在这里插入图片描述"><br>修改里面的颜色变量即可生效。<br><img src="https://img-blog.csdnimg.cn/20190831181844187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这种方法是快捷的，修改几个颜色变量即可生效。（然后就可以部署啦~）</p>
<font color="red">这里有一个问题，如何在 js 中修改这个 <code>element-variables.scss</code> 文件里面的变量？如果可以实现，那么就可以实现实时动态换色了。</font>

<blockquote>
<p>补充说明： js 修改 scss 变量是有方案的，但是在我们项目中无法做到动态换颜色，为什么呢？因为我们项目中所有的 css 预编译语言（sass,less,stylus）最终都会编译成 css；也就是说，打包后的项目中只有编译后的 css 文件。那么你 js 改 scss 变量的方法在打包后的项目中是不起作用的。</p>
</blockquote>
<h1 id="方案四、实时更换主色调"><a href="#方案四、实时更换主色调" class="headerlink" title="方案四、实时更换主色调"></a>方案四、实时更换主色调</h1><font color="red">前面已经介绍了几种方法可以做到换肤，但都是在我们的限定提供的几个皮肤范围内换肤；但我们有一个需求是，弹出一个颜色选择器，然后我们选了什么颜色，页面的主色调就立马改成什么颜色。</font>

<p><code>ElementUI</code> 官网中有实现动态换肤，它能让用户自定义颜色值，而且展示效果也更加优雅。 我们来看看他是怎么实现的(这里引用的是官方的 <a href="https://github.com/ElemeFE/element/issues/3054" target="_blank" rel="noopener">实现解释</a>)</p>
<ul>
<li>获取当前版本的 <code>Element-UI</code> 的样式文件（在线 <code>XHR</code> 获取）</li>
<li>根据用户选择的主题色，生成一系列对应的颜色（比如，选择绿色，生成不同程度的浅绿，深绿…）</li>
<li>颜色替换（用刚刚生成的颜色来替换样式文件中的颜色）</li>
<li>直接在页面上加 <code>style</code> 标签，把生成的样式填进去</li>
</ul>
<font color="#1a6">我们一起来看一下技术实现细节吧，强烈建议你打开代码一起来看： <a href="https://github.com/addonepiece/vue-cms/blob/master/src/views/theme/index.vue#L167-L297" target="_blank" rel="noopener">https://github.com/addonepiece/vue-cms/blob/master/src/views/theme/index.vue#L167-L297</a>）</font>

<p>1、首先我们需要拿到通过 package.json 拿到 <code>element-ui</code> 的版本号，根据该版本号去请求相应的样式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果没有chalk就是第一次换颜色，需要远程获取css文件，赋值给chalk</span></span><br><span class="line"><span class="comment">// 后续的换颜色操作，就不用远程获取了</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.chalk) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`https://unpkg.com/element-ui@<span class="subst">$&#123;version&#125;</span>/lib/theme-chalk/index.css`</span></span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.getCSSString(url, <span class="string">'chalk'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>getCSSString</code> 方法是一个常用 <code>XHR</code>，用来获取远程 <code>css</code> 资源文件。</p>
<p>2、根据用户选择的颜色，生成相应的颜色<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入一个颜色的HEX，得到这个颜色的深浅颜色数组</span></span><br><span class="line"><span class="comment"> * 我们知道，我们默认的主色调蓝色，在实际使用中，还需要对应的浅蓝和深蓝</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[string]]&#125;</span> </span>theme [color]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;[array]&#125;</span>       </span>[对应的深浅颜色数组]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">getThemeCluster(theme) &#123;</span><br><span class="line">    <span class="comment">// 具体看代码，这里就不写了</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、颜色替换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 更新样式 - 使用新的颜色变量替换之前的 */</span></span><br><span class="line">updateStyle(style, oldCluster, newCluster) &#123;</span><br><span class="line">  <span class="keyword">let</span> newStyle = style</span><br><span class="line">  oldCluster.forEach(<span class="function">(<span class="params">color, index</span>) =&gt;</span> &#123;</span><br><span class="line">    newStyle = newStyle.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(color, <span class="string">'ig'</span>), newCluster[index])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> newStyle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、在页面上加 <code>style</code> 标签，把生成的样式填进去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> styleTag = <span class="built_in">document</span>.getElementById(id)</span><br><span class="line"><span class="keyword">if</span> (!styleTag) &#123;</span><br><span class="line">  styleTag = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>)</span><br><span class="line">  styleTag.setAttribute(<span class="string">'id'</span>, id)</span><br><span class="line">  <span class="built_in">document</span>.head.appendChild(styleTag)</span><br><span class="line">&#125;</span><br><span class="line">styleTag.innerText = newStyle</span><br></pre></td></tr></table></figure></p>
<p>第一次换颜色的时候，需要创建一个 <code>style</code> 标签，添加到 <code>body</code> 中，后面的换颜色，就不用了。</p>
<p>OK啦，看下效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20190904185728363.gif" alt="在这里插入图片描述"></p>
<p id="div-border-left-blue">【在线演示：<a href="https://addonepiece.github.io/vue-cms/index.html">vue-cms</a>】<br>【源代码：<a href="https://github.com/addonepiece/vue-cms/blob/master/src/views/theme/index.vue" target="_blank" rel="noopener">github.com/addonepiece/vue-cms</a>】<br></p>

]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】如何优雅处理前端异常]]></title>
      <url>https://addonepiece.github.io/2019/05/01/js-exception-handing/</url>
      <content type="html"><![CDATA[<p>前端一直是距离用户最近的一层，随着产品的日益完善，我们会更加注重用户体验，而前端异常却如鲠在喉，甚是烦人。</p>
<h1 id="一、为什么要处理异常？"><a href="#一、为什么要处理异常？" class="headerlink" title="一、为什么要处理异常？"></a>一、为什么要处理异常？</h1><p id="div-border-left-green">异常是不可控的，会影响最终的呈现结果，但是我们有充分的理由去做这样的事情。</p>

<p>1.增强用户体验；<br>2.远程定位问题；<br>3.未雨绸缪，及早发现问题；<br>4.无法复线问题，尤其是移动端，机型，系统都是问题；<br>5.完善的前端方案，前端监控系统；</p>
<a id="more"></a>
<p>对于 JS 而言，我们面对的仅仅只是异常，异常的出现不会直接导致 JS 引擎崩溃，最多只会使当前执行的任务终止。</p>
<h1 id="二、需要处理哪些异常？"><a href="#二、需要处理哪些异常？" class="headerlink" title="二、需要处理哪些异常？"></a>二、需要处理哪些异常？</h1><p>对于前端来说，我们可做的异常捕获还真不少。总结一下，大概如下：</p>
<ul>
<li>JS 语法错误、代码异常</li>
<li>AJAX 请求异常</li>
<li>静态资源加载异常</li>
<li>Promise 异常</li>
<li>Iframe 异常</li>
<li>跨域 Script error</li>
<li>崩溃和卡顿</li>
</ul>
<p id="div-border-left-yellow">下面我会针对每种具体情况来说明如何处理这些异常。</p>


<h1 id="三、Try-Catch-的误区"><a href="#三、Try-Catch-的误区" class="headerlink" title="三、Try-Catch 的误区"></a>三、Try-Catch 的误区</h1><p id="div-border-top-blue"><code>try-catch</code> 只能捕获到 <font color="red"><strong>同步</strong></font> 的运行时错误，对 <font color="red">语法</font> 和 <font color="red">异步</font> 错误却无能为力，捕获不到。【不能捕获XHR，AJAX的异常】</p>

<p>1.同步运行时错误：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">'jartto'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(nam);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">捕获到异常： <span class="built_in">ReferenceError</span>: nam is not defined at &lt;anonymous&gt;:<span class="number">3</span>:<span class="number">15</span></span><br></pre></td></tr></table></figure></p>
<p>2.不能捕获到语法错误，我们修改一下代码，删掉一个单引号：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="string">'jartto;</span></span><br><span class="line"><span class="string">  console.log(nam);</span></span><br><span class="line"><span class="string">&#125; catch(e) &#123;</span></span><br><span class="line"><span class="string">  console.log('</span>捕获到异常：<span class="string">',e);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Invalid or unexpected token</span><br></pre></td></tr></table></figure></p>
<blockquote>
<font color="#0e8a16">不过语法错误在我们开发阶段就可以看到，应该不会顺利上到线上环境吧。?</font>
</blockquote>
<p>3.异步错误<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="literal">undefined</span>.map(<span class="function"><span class="params">v</span> =&gt;</span> v);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们看看日志：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'map'</span> <span class="keyword">of</span> <span class="literal">undefined</span> at setTimeout (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>:3:11)</span></span><br></pre></td></tr></table></figure></p>
<p>并没有捕获到异常，这是需要我们特别注意的地方。<font color="#b60205">【try catch 无法捕获异步异常】</font></p>
<h1 id="四、window-onerror-不是万能的"><a href="#四、window-onerror-不是万能的" class="headerlink" title="四、window.onerror 不是万能的"></a>四、window.onerror 不是万能的</h1><p>当 JS 运行时错误发生时，window 会触发一个 ErrorEvent 接口的 error 事件，并执行 <code>window.onerror()</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>message    错误信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;String&#125;</span>  </span>source    出错文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Number&#125;</span>  </span>lineno    行号</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Number&#125;</span>  </span>colno    列号</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;Object&#125;</span>  </span>error  Error对象（对象）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>1.首先试试同步运行时错误<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line"><span class="comment">// message：错误信息（字符串）。</span></span><br><span class="line"><span class="comment">// source：发生错误的脚本URL（字符串）</span></span><br><span class="line"><span class="comment">// lineno：发生错误的行号（数字）</span></span><br><span class="line"><span class="comment">// colno：发生错误的列号（数字）</span></span><br><span class="line"><span class="comment">// error：Error对象（对象）</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line">Jartto;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，我们捕获到了异常：<br><img src="/images/js-exception-handing-1.png" alt></p>
<p>2.再试试语法错误呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Jartto</span></span><br></pre></td></tr></table></figure></p>
<p>控制台打印出了这样的异常：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Invalid or unexpected token</span><br></pre></td></tr></table></figure></p>
<p id="div-border-top-red">什么，竟然没有捕获到语法错误？!!</p>

<p>3.怀着忐忑的心，我们最后来试试异步运行时错误：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Jartto;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>控制台输出了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">捕获到异常： &#123;<span class="attr">message</span>: <span class="string">"Uncaught ReferenceError: Jartto is not defined"</span>, </span><br><span class="line">  source: <span class="string">"http://127.0.0.1:8001/"</span>, </span><br><span class="line">  lineno: <span class="number">36</span>, <span class="attr">colno</span>: <span class="number">5</span>, </span><br><span class="line">  error: <span class="built_in">ReferenceError</span>: Jartto is not defined at setTimeout (http:<span class="comment">//127.0.0.1:8001/:36:5)&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>4.接着，我们试试网络请求异常的情况：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src="./</span>jartto.png<span class="string">"&gt;</span></span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-red">我们发现，不论是静态资源异常，或者接口异常，错误都无法捕获到。</p>

<p>补充一点：<code>window.onerror</code> 函数只有在返回 true 的时候，异常才不会向上抛出，否则即使是知道异常的发生控制台还是会显示 <code>Uncaught Error: xxxxx</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  Jartto;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>控制台就不会再有这样的错误了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">ReferenceError</span>: Jartto is not defined</span><br><span class="line">    at setTimeout ((index):<span class="number">36</span>)</span><br></pre></td></tr></table></figure></p>
<font color="#ff8f00">需要注意：</font>

<ul>
<li>onerror 最好写在所有 JS 脚本的前面，否则有可能捕获不到错误；</li>
<li>onerror 无法捕获语法错误；</li>
</ul>
<p id="div-border-top-red">到这里基本就清晰了：在实际的使用过程中，<code>onerror</code> 主要是来捕获预料之外的错误，而 <code>try-catch</code> 则是用来在可预见情况下监控特定的错误，两者结合使用更加高效。</p>

<p id="div-border-left-yellow">问题又来了，捕获不到静态资源加载异常怎么办？</p>

<h1 id="五、window-addEventListener"><a href="#五、window-addEventListener" class="headerlink" title="五、window.addEventListener"></a>五、window.addEventListener</h1><p>当一项资源（如图片或脚本）加载失败，加载资源的元素会触发一个 Event 接口的 error 事件，并执行该元素上的 <code>onerror()</code> 处理函数。这些 error 事件不会向上冒泡到 window ，不过（至少在 Firefox 中）能被单一的 <code>window.addEventListener</code> 捕获。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;scritp&gt;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, (error) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>, error);</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;img src="./</span>jartto.png<span class="string">"&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>控制台输出：<br><img src="/images/js-exception-handing-2.png" alt></p>
<p>由于网络请求异常不会事件冒泡，因此必须在捕获阶段将其捕捉到才行，但是这种方式虽然可以捕捉到网络请求的异常，但是无法判断 HTTP 的状态是 404 还是其他比如 500 等等，所以还需要配合服务端日志才进行排查分析才可以。</p>
<font color="red">需要注意：</font>

<ul>
<li>不同浏览器下返回的 error 对象可能不同，需要注意兼容处理。</li>
<li>需要注意避免 addEventListener 重复监听。</li>
</ul>
<h1 id="六、Promise-Catch"><a href="#六、Promise-Catch" class="headerlink" title="六、Promise Catch"></a>六、Promise Catch</h1><p id="div-border-top-blue">在 promise 中使用 catch 可以非常方便的捕获到异步 error ，这个很简单。</p>

<p>没有写 catch 的 Promise 中抛出的错误无法被 onerror 或 try-catch 捕获到，所以我们务必要在 Promise 中不要忘记写 catch 处理抛出的异常。</p>
<p>解决方案： 为了防止有漏掉的 Promise 异常，建议在全局增加一个对 <code>unhandledrejection</code>的监听，用来全局监听 <code>Uncaught Promise Error</code>。使用方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unhandledrejection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>我们继续来尝试一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unhandledrejection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">'promise error'</span>);</span><br></pre></td></tr></table></figure></p>
<p>可以看到如下输出：<br><img src="/images/js-exception-handing-3.png" alt></p>
<p>那如果对 Promise 不进行 catch 呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"unhandledrejection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>, e);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">'jartto: promise error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>嗯，事实证明，也是会被正常捕获到的。</p>
<p>所以，正如我们上面所说，为了防止有漏掉的 Promise 异常，建议在全局增加一个对 <code>unhandledrejection</code> 的监听，用来全局监听 <code>Uncaught Promise Error</code>。</p>
<p>补充一点：如果去掉控制台的异常显示，需要加上：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault();</span><br></pre></td></tr></table></figure></p>
<h1 id="七、VUE-errorHandler"><a href="#七、VUE-errorHandler" class="headerlink" title="七、VUE errorHandler"></a>七、VUE errorHandler</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function">(<span class="params">err, vm, info</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'通过vue errorHandler捕获的错误'</span>);</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.error(vm);</span><br><span class="line">  <span class="built_in">console</span>.error(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八、React-异常捕获"><a href="#八、React-异常捕获" class="headerlink" title="八、React 异常捕获"></a>八、React 异常捕获</h1><p>React 16 提供了一个内置函数 componentDidCatch，使用它可以非常简单的获取到 react 下的错误信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidCatch(error, info) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除此之外，我们可以了解一下：<code>error boundary</code><br>UI 的某部分引起的 JS 错误不应该破坏整个程序，为了帮 React 的使用者解决这个问题，React 16 介绍了一种关于错误边界（error boundary)的新观念。</p>
<p id="div-border-left-red">需要注意的是： error boundaries 并不会捕捉下面这些错误。</p>

<p>1.事件处理器<br>2.异步代码<br>3.服务端的渲染代码<br>4.在 error boundaries 区域内的错误</p>
<p>我们来举一个小例子，在下面这个 <code>componentDIdCatch(error,info)</code> 里的类会变成一个 <code>error boundary</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">hasError</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  componentDidCatch(error, info) &#123;</span><br><span class="line">    <span class="comment">// Display fallback UI</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">hasError</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="comment">// You can also log the error to an error reporting service</span></span><br><span class="line">    logErrorToMyService(error, info);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasError) &#123;</span><br><span class="line">      <span class="comment">// You can render any custom fallback UI</span></span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Something went wrong.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们像使用普通组件那样使用它：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ErrorBoundary&gt;</span><br><span class="line">  &lt;MyWidget /&gt;</span><br><span class="line">&lt;<span class="regexp">/ErrorBoundary&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>componentDidCatch()</code> 方法像 JS 的 <code>catch{}</code> 模块一样工作，但是对于组件，只有 class 类型的组件<code>( class component )</code>可以成为一个 <code>error boundaries</code>。</p>
<p>实际上，大多数情况下我们可以在整个程序中定义一个 <code>error boundary</code>组件，之后就可以一直使用它了！</p>
<h1 id="九、iframe-异常"><a href="#九、iframe-异常" class="headerlink" title="九、iframe 异常"></a>九、iframe 异常</h1><p>对于 iframe 的异常捕获，我们还得借力 <code>window.onerror</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'捕获到异常：'</span>,&#123;message, source, lineno, colno, error&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一个简单的例子可能如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"./iframe.html"</span> frameborder=<span class="string">"0"</span>&gt;&lt;<span class="regexp">/iframe&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  window.frames[0].onerror = function (message, source, lineno, colno, error) &#123;</span></span><br><span class="line"><span class="regexp">    console.log('捕获到 iframe 异常：',&#123;message, source, lineno, colno, error&#125;);</span></span><br><span class="line"><span class="regexp">    return true;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="十、Script-error"><a href="#十、Script-error" class="headerlink" title="十、Script error"></a>十、Script error</h1><p>一般情况，如果出现 <code>script error</code> 这样的错误，基本上可以确定是出现了跨域问题。这时候，是不会有其他太多辅助信息的，但是解决思路无非如下：</p>
<p id="div-border-left-blue">跨源资源共享机制( CORS )：我们为 script 标签添加 crossOrigin 属性。</p>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://jartto.wang/main.js"</span> crossorigin&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者动态去添加 js 脚本：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.crossOrigin = <span class="string">'anonymous'</span>;</span><br><span class="line">script.src = url;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-yellow">特别注意，服务器端需要设置：Access-Control-Allow-Origin </p>

<p>此外，我们也可以试试这个 - <a href="https://juejin.im/post/5c00a405f265da610e7fd024" target="_blank" rel="noopener">解决 Script Error 的另类思路</a>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originAddEventListener = EventTarget.prototype.addEventListener;</span><br><span class="line">EventTarget.prototype.addEventListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, listener, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrappedListener = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> listener.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> originAddEventListener.call(<span class="keyword">this</span>, type, wrappedListener, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单解释一下：</p>
<ul>
<li>改写了 EventTarget 的 addEventListener 方法；</li>
<li>对传入的 listener 进行包装，返回包装过的 listener，对其执行进行 try-catch；</li>
<li>浏览器不会对 try-catch 起来的异常进行跨域拦截，所以 catch 到的时候，是有堆栈信息的；</li>
<li>重新 throw 出来异常的时候，执行的是同域代码，所以 window.onerror 捕获的时候不会丢失堆栈信息；</li>
</ul>
<p>利用包装 addEventListener，我们还可以达到「扩展堆栈」的效果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> originAddEventListener = EventTarget.prototype.addEventListener;</span><br><span class="line">   EventTarget.prototype.addEventListener = <span class="function"><span class="keyword">function</span> (<span class="params">type, listener, options</span>) </span>&#123;</span><br><span class="line">+    <span class="comment">// 捕获添加事件时的堆栈</span></span><br><span class="line">+    <span class="keyword">const</span> addStack = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Event (<span class="subst">$&#123;type&#125;</span>)`</span>).stack;</span><br><span class="line">     <span class="keyword">const</span> wrappedListener = <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> listener.apply(<span class="keyword">this</span>, args);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">+        <span class="comment">// 异常发生时，扩展堆栈</span></span><br><span class="line">+        err.stack += <span class="string">'\n'</span> + addStack;</span><br><span class="line">         <span class="keyword">throw</span> err;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> originAddEventListener.call(<span class="keyword">this</span>, type, wrappedListener, options);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)();</span><br></pre></td></tr></table></figure></p>
<h1 id="十一、崩溃和卡顿"><a href="#十一、崩溃和卡顿" class="headerlink" title="十一、崩溃和卡顿"></a>十一、崩溃和卡顿</h1><p>卡顿也就是网页暂时响应比较慢， JS 可能无法及时执行。但崩溃就不一样了，网页都崩溃了，JS 都不运行了，还有什么办法可以监控网页的崩溃，并将网页崩溃上报呢？</p>
<blockquote>
<p>崩溃和卡顿也是不可忽视的，也许会导致你的用户流失。</p>
</blockquote>
<p>1.利用 window 对象的 load 和 beforeunload 事件实现了网页崩溃的监控。<br>不错的文章，推荐阅读：<a href="http://jasonjl.me/blog/2015/06/21/taking-action-on-browser-crashes/" target="_blank" rel="noopener">Logging Information on Browser Crashes</a>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  sessionStorage.setItem(<span class="string">'good_exit'</span>, <span class="string">'pending'</span>);</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      sessionStorage.setItem(<span class="string">'time_before_crash'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>().toString());</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'beforeunload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  sessionStorage.setItem(<span class="string">'good_exit'</span>, <span class="string">'true'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span>(sessionStorage.getItem(<span class="string">'good_exit'</span>) &amp;&amp;</span><br><span class="line">  sessionStorage.getItem(<span class="string">'good_exit'</span>) !== <span class="string">'true'</span>) &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      insert crash logging code here</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  alert(<span class="string">'Hey, welcome back from your crash, looks like you crashed on: '</span> + sessionStorage.getItem(<span class="string">'time_before_crash'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2.基于以下原因，我们可以使用 <code>Service Worker</code> 来实现 <a href="https://juejin.im/entry/5be158116fb9a049c6434f4a?utm_source=gold_browser_extension" target="_blank" rel="noopener">网页崩溃的监控</a>：</p>
<ul>
<li>Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了，Service Worker 一般情况下不会崩溃；</li>
<li>Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态；</li>
<li>网页可以通过 <code>navigator.serviceWorker.controller.postMessage</code> API 向掌管自己的 SW 发送消息。</li>
</ul>
<h1 id="十二、错误上报"><a href="#十二、错误上报" class="headerlink" title="十二、错误上报"></a>十二、错误上报</h1><p>1.通过 Ajax 发送数据<br>因为 Ajax 请求本身也有可能会发生异常，而且有可能会引发跨域问题，一般情况下更推荐使用动态创建 img 标签的形式进行上报。</p>
<p>2.动态创建 img 标签的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">report</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reportUrl = <span class="string">'http://jartto.wang/report'</span>;</span><br><span class="line">  <span class="keyword">new</span> Image().src = <span class="string">`<span class="subst">$&#123;reportUrl&#125;</span>?logs=<span class="subst">$&#123;error&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>收集异常信息量太多，怎么办？实际中，我们不得不考虑这样一种情况：如果你的网站访问量很大，那么一个必然的错误发送的信息就有很多条，这时候，我们需要设置采集率，从而减缓服务器的压力：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Reporter.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 只采集 30%</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">Math</span>.random() &lt; <span class="number">0.3</span>) &#123;</span><br><span class="line">    send(data)      <span class="comment">// 上报错误信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>采集率应该通过实际情况来设定，随机数，或者某些用户特征都是不错的选择。<font color="red">【这个随机数用的不错！】</font></p>
<h1 id="十三、总结"><a href="#十三、总结" class="headerlink" title="十三、总结"></a>十三、总结</h1><p id="div-border-left-yellow">回到我们开头提出的那个问题，如何优雅的处理异常呢？</p>

<p>1.可疑区域增加 Try-Catch<br>2.全局监控 JS 异常 window.onerror<br>3.全局监控静态资源异常 window.addEventListener<br>4.捕获没有 Catch 的 Promise 异常：unhandledrejection<br>5.VUE errorHandler 和 React componentDidCatch<br>6.监控网页崩溃：window 对象的 load 和 beforeunload<br>7.跨域 crossOrigin 解决</p>
<p>其实很简单，正如本文所说：采用组合方案，分类型的去捕获异常，这样基本 80%-90% 的问题都化于无形。</p>
<p><a href="http://jartto.wang/2018/11/20/js-exception-handling/" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手把手教你 Vue 服务端渲染]]></title>
      <url>https://addonepiece.github.io/2019/03/31/vue-ssr/</url>
      <content type="html"><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>在写这篇文章之前，我有写一篇 <a href="https://addonepiece.github.io/2018/06/18/vue-prerender/">Vue 预渲染的教程</a> 以及 <a href="https://addonepiece.github.io/prerender-website/index.html">在线示例</a>，有需要的可以看一下~</p>
<hr>
<font color="green">【下面开始 Vue 服务端渲染】</font>

<a id="more"></a>
<p>服务端渲染 = SSR = Server-Side Rendering</p>
<p><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue 服务器渲染</a> 可以说是我们学习 Vue 技术的最后一个环节了；也是上手难度稍为高一点的一个环节。</p>
<p>目前还没有发现很好的学习资料或者教程，文档也不是特别明白，这也导致了很多人没能拿下 vue 的 ssr。</p>
<p>所以就想着写一个曲线平滑，循序渐进，明了易懂的 <a href="https://github.com/addonepiece/vue-ssr-lessons" target="_blank" rel="noopener">教程</a> 来帮助大家找到 Vue SSR 的感觉。</p>
<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><font color="red">由于内容较多，如果只写一篇文章就想把 Vue SSR 介绍清晰透彻的话，我觉得不太现实；</font>所以就想着把一个完整的 Vue SSR 项目细分开来，每一个小节讲解一个知识点，这样效果应该会好一点吧。这个项目虽然不大，但已经包含了 Vue SSR 的所有内容。</p>
<p id="div-border-top-green">项目仓库：<a href="https://github.com/addonepiece/vue-ssr-lessons" target="_blank" rel="noopener">https://github.com/addonepiece/vue-ssr-lessons</a><br></p>

<p>1、<a href="https://github.com/addonepiece/vue-ssr-lessons" target="_blank" rel="noopener">这个教程</a> 分为 7 个小节，每个小节都是一个独立的可以运行的小项目，这样可以减少大家出错的概率（如果只给出最终的代码，那万一又跑不起来，岂不凉凉，影响大家学习的心情）；每个小节简单配备了 <strong>运行步骤</strong> 以及 <strong>简要说明</strong> 来帮助大家运行项目以及了解本节的知识点。</p>
<p><img src="/images/vue-ssr-1.png" alt></p>
<p>2、其次，每个小节都是在前一小节的基础上，继续补充写代码的，这样，大家对比就能知道，这一节具体增加了哪些代码，哪些内容；方便大家学习某一个小节的知识（如果笼统的一次性给出最终代码，这样在找代码之间逻辑关系时，比较吃力）</p>
<h1 id="章节介绍"><a href="#章节介绍" class="headerlink" title="章节介绍"></a>章节介绍</h1><p>第一节：一个最简单的服务端渲染原型（10 行代码）【难度：<i class="fa fa-star"></i>】<br>第二节：与服务器集成，使用 Express 作为服务器提供服务【难度：<i class="fa fa-star"></i>】<br>第三节：使用一个页面模版【难度：<i class="fa fa-star"></i>】<br>第四节：开发客户端与服务端入口文件，配置webpack【难度：<i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i>】<br>第五节：使用vue-router来做路由【难度：<i class="fa fa-star"></i><i class="fa fa-star"></i>】<br>第六节：数据，vuex，状态容器【难度：<i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i><i class="fa fa-star"></i>】<br>第七节：增加一些额外的功能，完善项目【难度：<i class="fa fa-star"></i><i class="fa fa-star"></i>】</p>
<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><p>1、建议你先看一遍 Vue SSR 的文档，<em>看不懂的地方不要慌，留个印象也行</em><br>2、学习这个课程的时候，打开 Vue SSR 的文档；找到当前这一小节对应文档中的文字介绍部分<br>3、如果你基础有点薄弱的话，不要太过于着急<br>4、不能保证所有人看一遍就能学会，但是能保证所有人，两遍能拿下<br>5、如果你能跟着动手敲的话，将会事半功倍</p>
<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><p><strong>1、避免单例状态</strong><br>在 <code>app.js</code> 中，暴露一个可以重复执行的工厂函数，为每个请求创建新的应用程序实例。</p>
<p><a href="https://ssr.vuejs.org/zh/guide/structure.html#%E9%81%BF%E5%85%8D%E7%8A%B6%E6%80%81%E5%8D%95%E4%BE%8B" target="_blank" rel="noopener">相关文档</a></p>
<p><img src="/images/vue-ssr-2.png" alt></p>
<p><strong>2、配置webpack</strong><br><code>webpack</code> 配置文件包含：基本配置(base config)、客户端配置(client config)、服务器配置(server config)。<br>基本配置包含两个环境（客户端环境，服务器环境）共享的配置；然后客户端配置和服务器配置都会通过使用 <code>webpack-merge</code> 来简单的扩展基本配置。</p>
<p><a href="https://ssr.vuejs.org/zh/guide/build-config.html" target="_blank" rel="noopener">相关文档</a></p>
<blockquote>
<p>教程中的 webpack 相关的配置已经配置好了，你可以直接全部拿过来用就行了</p>
</blockquote>
<p><strong>3、createBundleRenderer</strong><br>我们在前三节使用的都是 <code>vue-server-renderer</code> 中的 <code>createRenderer</code> 方法；从第四节开始，我们使用的是 <code>createBundleRenderer</code>，所创建的 <code>bundle renderer</code>，用法和普通 <code>renderer</code> 相同。 <code>createBundleRenderer</code> 接收一个 <code>server bundle</code> 生成的特殊 <code>JSON</code> 文件。但是 <code>bundle renderer</code> 提供以下优点：</p>
<ul>
<li>内置的 <code>source map</code> 支持（在 <code>webpack</code> 配置中使用 <code>devtool: &#39;source-map&#39;</code>）</li>
<li>在开发环境甚至部署过程中热重载（通过读取更新后的 <code>bundle</code>，然后重新创建 <code>renderer</code> 实例）</li>
<li>关键 <code>CSS(critical CSS)</code> 注入（在使用 <code>*.vue</code> 文件时）：自动内联在渲染过程中用到的组件所需的 <code>CSS</code>。更多细节请查看 <code>CSS</code> 章节。</li>
<li>使用 <code>clientManifest</code> 进行资源注入：自动推断出最佳的预加载(<code>preload</code>)和预取(<code>prefetch</code>)指令，以及初始渲染所需的代码分割 <code>chunk</code>。</li>
</ul>
<p><a href="https://ssr.vuejs.org/zh/guide/bundle-renderer.html" target="_blank" rel="noopener">相关文档</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Travis CI 自动更新 GitHub Pages]]></title>
      <url>https://addonepiece.github.io/2019/02/05/travis-ci/</url>
      <content type="html"><![CDATA[<p><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> 提供的是持续集成服务（Continuous Integration，简称 CI）。我们在软件开发过程中，有构建、测试、部署这些必不可少的步骤，而这些会花掉我们很多的时间。为了提高软件开发的效率，现在涌现了很多自动化工具。<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> 是目前<a href="https://github.blog/2017-11-07-github-welcomes-all-ci-tools/" target="_blank" rel="noopener">市场份额</a>最大的一个，而且有很详细的文档以及可以和 Github 很好的对接。</p>
<a id="more"></a>
<p>Travis CI 还是很强大的，用好这个工具不仅可以提高效率，还能使开发流程更可靠和专业化。</p>
<p>就我写的 <a href="https://addonepiece.github.io/web-bookmarks/">web-bookmarks</a> 这个项目来说的话，每次更改完都要手动部署到 GitHub Pages。</p>
<p>从最开始的手动构建部署：手动敲构建命令，然后手动推到 GitHub。(<em>重复的次数多了就显得很麻烦，出错的几率也会变大。</em>)</p>
<p>后来写了一个构建部署的脚本：每次开发完，再手动执行脚本，完成构建部署。</p>
<p>再到现在的使用 CI 自动更新：开发完，我只用将源码 push 到 GitHub 做版本管理，就 ok 了；Travis 监测到代码有变化，然后就会自动执行我们设定好的任务。【优秀～】</p>
<h1 id="一、什么是持续集成"><a href="#一、什么是持续集成" class="headerlink" title="一、什么是持续集成"></a>一、什么是持续集成</h1><p>Travis CI 提供的持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。</p>
<p>持续集成指的是只要代码有变更，就自动运行构建和测试，反馈运行结果。</p>
<p id="div-border-top-purple">举一个例子：我们可以在我们的开源项目中，安排一个代码格式检查和测试的任务 <code>npm run test</code>，不管是自己提交代码，还是别人提交的 PR，Travis 监测到代码有新的内容，都会来执行这个任务。【不管代码写的怎样，格式一定不能乱～，哈哈😄】<br></p>

<p>持续集成的好处在于，每次代码的小幅变更，就能看到运行结果，从而不断累积小的变更，而不是在开发周期结束时，一下子合并一大块代码。</p>
<h1 id="二、开始使用"><a href="#二、开始使用" class="headerlink" title="二、开始使用"></a>二、开始使用</h1><p>首先打开官方网站 <a href="https://travis-ci.org" target="_blank" rel="noopener">travis-ci.org</a>，然后使用 Github 账号登入 Travis CI，然后 Travis 中会列出你 Github 上面所有的仓库，以及你所属于的组织。</p>
<p>然后，勾选你需要 Travis 帮你自动构建的仓库，打开仓库旁边的开关，打开以后，Travis 就会监听这个仓库的所有变化了。</p>
<p><img src="/images/travis-ci-1.png" alt="travis-ci-1"></p>
<h1 id="三、-travis-yml"><a href="#三、-travis-yml" class="headerlink" title="三、.travis.yml"></a>三、.travis.yml</h1><p>Travis 要求项目的根目录下面，必须有一个 <code>.travis.yml</code> 文件。这是配置文件，指定了 Travis 的行为。该文件必须保存在 Github 仓库里面，一旦代码仓库有新的 <code>Commit</code>，Travis 就会去找这个文件，执行里面的命令。</p>
<p>所以呢，我们就可以在这个文件里，配置我们任务（Travis 监测到仓库有 <code>commit</code> 后会自动执行）。</p>
<p>一个简单的 <code>.travis.yml</code> 文件如下：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">script:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>所以呢，我在 <code>.travis.yml</code> 里，配置了一个执行脚本的任务；那么现在 Travis 监测到我仓库有 <code>commit</code> 后就会找到 <code>.travis.yml</code> 这个文件，然后就执行了我的那个脚本了。</p>
<h2 id="install-字段"><a href="#install-字段" class="headerlink" title="install 字段"></a>install 字段</h2><p><code>install</code> 字段用来指定安装脚本，如果有多个脚本，可以写成下面的形式。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">command1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">command2</span></span><br></pre></td></tr></table></figure></p>
<p>上面代码中，如果 <code>command1</code> 失败了，整个构建就会停下来，不再往下进行<br>如果不需要安装，即跳过安装阶段，就直接设为 <code>true</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="script-字段"><a href="#script-字段" class="headerlink" title="script 字段"></a>script 字段</h2><p><code>script</code> 字段用来配置构建或者测试脚本，如果有多个脚本，可以写成下面的形式。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">command1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">command2</span></span><br></pre></td></tr></table></figure></p>
<p>注意，<code>script</code> 与 <code>install</code> 不一样，如果 <code>command1</code> 失败，<code>command2</code> 会继续执行。但是，整个构建阶段的状态是失败。</p>
<p>如果 <code>command2</code> 只有在 <code>command1</code> 成功后才能执行，就要写成下面这样。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span> <span class="string">command1</span> <span class="string">&amp;&amp;</span> <span class="string">command2</span></span><br></pre></td></tr></table></figure></p>
<h1 id="四、部署时面临的问题"><a href="#四、部署时面临的问题" class="headerlink" title="四、部署时面临的问题"></a>四、部署时面临的问题</h1><p id="div-border-left-red">现在脚本是由 Travis CI 来执行的，部署的时候，怎么让 Travis 有权限往 Github 提交代码呢？</p>

<p>Github 有提供一个 <a href="https://github.blog/2013-05-16-personal-api-tokens/" target="_blank" rel="noopener">Personal access tokens</a>，这个 Token 与 账号密码 以及 SSH Keys 同样具有 Github 写入能力。</p>
<p>前往 Github 帐号 Settings 页面，在左侧选择 <code>Personal Access Token</code>，然后在右侧面板点击 <code>“Generate new token”</code> 来新建一个 Token。需要注意的是，创建完的 Token 只有第一次可见，之后再访问就无法看见（只能看见他的名称），因此要保存好这个值。</p>
<p><img src="/images/travis-ci-2.png" alt="travis-ci-2"></p>
<p>那么，这个 Token 怎么使用呢。</p>
<h2 id="方案一、"><a href="#方案一、" class="headerlink" title="方案一、"></a>方案一、</h2><p>一个比较方便快捷的方式，是通过 Travis 网站，写在每个仓库的设置页面里，有一个 <code>Environment Variables</code> 的配置项，给我们的 Token 起一个名字 <code>gh_token</code> 添加进去。这样以来，脚本内部就可以使用这个环境变量了。<br><img src="/images/travis-ci-3.png" alt="travis-ci-1"><br>你可以在你脚本内部使用 <code>${gh_token}</code> 的形式来使用这个 Token 了。【当然了，你还可以添加其他的环境变量进去。】【<a href="https://docs.travis-ci.com/user/environment-variables" target="_blank" rel="noopener">官方文档在这里</a>】</p>
<p>使用 <code>Personal access tokens</code> 向 GitHub 提交代码的命令格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $&#123;GH_TOKEN&#125; 对应就是 Personal access tokens ， GH_TOKEN 是环境变量名</span></span><br><span class="line"><span class="comment"># $&#123;GH_REF&#125; 对应的是你的 Github 仓库地址，GH_REF 是变量名</span></span><br><span class="line">git push -f <span class="string">"https://<span class="variable">$&#123;GH_TOKEN&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:gh-pages</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-green">这里需要注意的是：<br>1、GitHub 生成的这个 Token ，只有生成的时候可以看到明文，后面就看不到明文了，所以你使用的时候最好一次操作成功。<br>2、Travis CI 中添加 Token 时，记得用密文，要不然在 <code>build log</code> 中是可以被看到的。<br></p>

<h2 id="方案二、"><a href="#方案二、" class="headerlink" title="方案二、"></a>方案二、</h2><p>你还可以使用 Travis CI 提供的加密工具来加密我们的这个 Token。加密原理机制如下：</p>
<p><img src="/images/travis-encrypt.png" alt="travis-ci-encrypt"></p>
<p>首先，安装 Ruby 的包 <code>travis</code> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Travis CI 命令行工具</span></span><br><span class="line">$ gem install travis</span><br></pre></td></tr></table></figure></p>
<p>然后，就可以用 <code>travis encrypt</code> 命令加密信息。<br>在项目的根目录下，执行下面的命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt name=secretvalue</span><br></pre></td></tr></table></figure></p>
<p>上面命令中，<code>gh_token</code> 是要加密的变量名，<code>secretvalue</code> 是要加密的变量值。执行以后，屏幕上会输出如下信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secure: &quot;... encrypted data ...&quot;</span><br></pre></td></tr></table></figure></p>
<p>现在，就可以把这一行加入 <code>.travis.yml</code> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env:</span><br><span class="line">  global:</span><br><span class="line">    - GH_REF: github.com/addonepiece/xxxxx.git</span><br><span class="line">    - secure: <span class="string">"... entrypted data ..."</span></span><br></pre></td></tr></table></figure></p>
<p>然后，脚本里面就可以使用环境变量 <code>gh_token</code> 了，Travis 会在运行时自动对它解密。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $&#123;gh_token&#125; 对应就是 Personal access tokens ， gh_token 是环境变量名</span></span><br><span class="line"><span class="comment"># $&#123;GH_REF&#125; 对应的是你的 Github 仓库地址，GH_REF 是变量名</span></span><br><span class="line">git push -f <span class="string">"https://<span class="variable">$&#123;gh_token&#125;</span>@<span class="variable">$&#123;GH_REF&#125;</span>"</span> master:gh-pages</span><br></pre></td></tr></table></figure>
<p><code>travis encrypt</code> 命令的 <code>--add</code> 参数会把输出自动写入 <code>.travis.yml</code>，省掉了修改 <code>env</code> 字段的步骤。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt name=secretvalue --add</span><br></pre></td></tr></table></figure></p>
<p>详细信息请看<a href="https://docs.travis-ci.com/user/encryption-keys/" target="_blank" rel="noopener">官方文档</a></p>
<p id="div-border-top-red">可以参考我的 <a href="https://github.com/addonepiece/vue-cms" target="_blank" title="vue-cms">vue-cms</a> 这个项目中的 <code>.travis.yml</code> 文件</p>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="如何显示-Status-Image"><a href="#如何显示-Status-Image" class="headerlink" title="如何显示 Status Image"></a>如何显示 Status Image</h2><p><a href="https://travis-ci.org/addonepiece/web-bookmarks" target="_blank" rel="noopener"><img src="https://travis-ci.org/addonepiece/web-bookmarks.svg?branch=master" alt="Build Status"></a></p>
<p><img src="/images/travis-ci-4x.png" alt="travis-ci-4"></p>
<h2 id="如何跳过自动构建"><a href="#如何跳过自动构建" class="headerlink" title="如何跳过自动构建"></a>如何跳过自动构建</h2><p>如果 commit 不想让 Travis 构建，那么就在 commit message 里加上 [ci skip] 就行了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"[ci skip] commit message"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>如果遇到脚本权限不够的提示或者问题，你可以给你的脚本加上权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x deploy.sh</span><br></pre></td></tr></table></figure></p>
<p>或者在 <code>.travis.yml</code> 里加：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">u+x</span> <span class="string">deploy.sh</span></span><br></pre></td></tr></table></figure></p>
<h1 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h1><h2 id="Travis-CI-加密文件"><a href="#Travis-CI-加密文件" class="headerlink" title="Travis CI 加密文件"></a>Travis CI 加密文件</h2><p>如果要加密的是文件（比如私钥），Travis 提供了加密文件功能。<br>安装命令行客户端以后，使用下面的命令登入 Travis CI 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br></pre></td></tr></table></figure></p>
<p>然后，进入项目的根目录，使用 <code>travis encrypt-file</code> 命令加密那些想要加密的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ travis entrypt-file bacon.txt</span><br><span class="line"></span><br><span class="line">encrypting bacon.txt <span class="keyword">for</span> rkh/travis-encrypt-file-example</span><br><span class="line">storing result as bacon.txt.enc</span><br><span class="line">storing secure env variables <span class="keyword">for</span> decryption</span><br><span class="line"></span><br><span class="line">Please add the following to your build script (before_install stage <span class="keyword">in</span> your .travis.yml, <span class="keyword">for</span> instance):</span><br><span class="line"></span><br><span class="line">    openssl aes-256-cbc -K <span class="variable">$encrypted_0a6446eb3ae3_key</span> -iv <span class="variable">$encrypted_0a6446eb3ae3_key</span> -<span class="keyword">in</span> bacon.txt.enc -out bacon.txt -d</span><br><span class="line"></span><br><span class="line">Pro Tip: You can add it automatically by running with --add.</span><br><span class="line"></span><br><span class="line">Make sure to add bacon.txt.enc to the git repository.</span><br><span class="line">Make sure not to add bacon.txt to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure></p>
<p>上面的代码对文件 <code>bacon.txt</code> 进行加密，加密后会生成 <code>bacon.txt.enc</code> ，该文件需要提交到代码库。此外，该命令还会生成一个环境变量 <code>$entrypted_0a6446eb3ae3_key</code>，保存密钥，储存在 Travis CI，文件解密时需要这个环境变量。你需要把解密所需的 <code>openssl</code> 命令，写在 <code>.travis.yml</code> 的 <code>before_install</code> 字段里面。这些都写在上面的命令行提示里面。</p>
<p><code>--add</code> 参数可以自动把环境变量写入 <code>.travis.yml</code> 。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ travis encrypt-file bacon.txt --add</span><br><span class="line">entrypting bacon.txt <span class="keyword">for</span> rkh/travis-encrypt-file-example</span><br><span class="line">storing result as bacon.txt.enc</span><br><span class="line">storing secure env variables <span class="keyword">for</span> decryption</span><br><span class="line"></span><br><span class="line">Make sure to add bacon.txt.enc to the git repository.</span><br><span class="line">Make sure not to add bacon.txt to the git repository.</span><br><span class="line">Commit all changes to your .travis.yml.</span><br></pre></td></tr></table></figure>
<p>详细信息请看<a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener">官方文档</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是REST/RESTful API？]]></title>
      <url>https://addonepiece.github.io/2019/01/17/java-REST/</url>
      <content type="html"><![CDATA[<h1 id="文章内容及目的（CONTENT-amp-OBJECTIVE）"><a href="#文章内容及目的（CONTENT-amp-OBJECTIVE）" class="headerlink" title="文章内容及目的（CONTENT &amp; OBJECTIVE）"></a>文章内容及目的（CONTENT &amp; OBJECTIVE）</h1><p>1.了解什么是REST<br>2.了解如何使用REST范式/风格设计各端<br><img src="/images/Java-REST.jpeg" alt></p>
<h1 id="REST（REPRESENTATIONAL-STATE-TRANSFER）"><a href="#REST（REPRESENTATIONAL-STATE-TRANSFER）" class="headerlink" title="REST（REPRESENTATIONAL STATE TRANSFER）"></a>REST（REPRESENTATIONAL STATE TRANSFER）</h1><p>REST（英文：Representational State Transfer）是一种无状态资源传输体系范式，用在服务端和客户端之间提供标准，从而使系统之间的通信更容易。与REST兼容的系统，通常称为RESTful系统，其特点是它们是无状态的，并且分离了客户端和服务端的关注点。我们将讨论这些术语的含义以及它们为什么是Web等服务实现前后端分离的有益特性。</p>
<h1 id="客户端与服务端分离（SEPARATION-OF-CLIENT-AND-SERVER）"><a href="#客户端与服务端分离（SEPARATION-OF-CLIENT-AND-SERVER）" class="headerlink" title="客户端与服务端分离（SEPARATION OF CLIENT AND SERVER）"></a>客户端与服务端分离（SEPARATION OF CLIENT AND SERVER）</h1><p>在REST架构范式中，客户端的实现和服务端的实现可以独立完成，而彼此不必知道对方。这意味着客户端的代码可以在不影响服务端操作的情况下随时更改，服务端的代码可以在不影响客户端操作的情况下更改。<br>只要双方都知道要向对方发送什么格式的消息，它们就可以保持模块化和分离。将用户界面关注点与数据存储关注点分开，通过简化服务端组件，我们改进了跨平台的接口的灵活性，并提高了可伸缩性。此外，分离允许每个组件独立地发展。</p>
<p>通过使用一个REST接口，不同的客户端访问相同的REST端点，执行相同的操作，并接收相同的响应。</p>
<h1 id="无状态性（STATELESSNESS）"><a href="#无状态性（STATELESSNESS）" class="headerlink" title="无状态性（STATELESSNESS）"></a>无状态性（STATELESSNESS）</h1><p>遵循REST范式的系统是无状态的，这意味着服务端不需要知道客户端处于什么状态，反之亦然。这样，服务端和客户端都可以理解接收到的任何消息，即使没有看到以前的消息。这种无状态限制是通过使用资源而不是命令来实现的。资源是网络中的名词-它们描述任何对象、文档或东西，您可能需要存储或发送到其他服务。</p>
<p>因为REST系统通过对资源的标准操作进行交互，所以它们不依赖于接口的实现。</p>
<p>这些约束有助于RESTful应用程序实现可靠性、快速性能和可伸缩性，因为这些组件可以在不影响整个系统的情况下进行管理、更新和重用，甚至在系统运行期间也是如此。</p>
<p>现在，我们将探讨在实现RESTful接口时，客户端和服务端之间的通信实际上是如何发生的。</p>
<h1 id="客户端和服务端之间的通信（COMMUNICATION-BETWEEN-CLIENT-AND-SERVER）"><a href="#客户端和服务端之间的通信（COMMUNICATION-BETWEEN-CLIENT-AND-SERVER）" class="headerlink" title="客户端和服务端之间的通信（COMMUNICATION BETWEEN CLIENT AND SERVER）"></a>客户端和服务端之间的通信（COMMUNICATION BETWEEN CLIENT AND SERVER）</h1><p>在REST体系结构中，客户端发送请求以检索或修改资源，而服务端则向这些请求发送响应。让我们看看发出请求和发送响应的标准方法。</p>
<h1 id="提交请求（MAKING-REQUESTS）"><a href="#提交请求（MAKING-REQUESTS）" class="headerlink" title="提交请求（MAKING REQUESTS）"></a>提交请求（MAKING REQUESTS）</h1><p>REST要求客户端向服务端发出请求，以便检索或修改服务端上的数据。请求通常包括：</p>
<ul>
<li>一个HTTP动词，定义要执行的操作类型.</li>
<li>HTTP的头域，允许客户端传递有关请求的头信息。</li>
<li>资源的路径</li>
<li>包含数据的可选消息正文</li>
</ul>
<h2 id="1-HTTP动词（HTTP-VERBS）"><a href="#1-HTTP动词（HTTP-VERBS）" class="headerlink" title="1.HTTP动词（HTTP VERBS）"></a>1.HTTP动词（HTTP VERBS）</h2><p>我们在请求中使用5个基本HTTP动词来与REST系统中的资源交互：</p>
<ul>
<li>GET （SELECT）：从服务端检索特定资源，或资源列表。</li>
<li>POST （CREATE）：在服务端上创建一个新的资源。</li>
<li>PUT （UPDATE）：更新服务端上的资源，提供整个资源。</li>
<li>PATCH （UPDATE）：更新服务端上的资源，仅提供更改的属性。</li>
<li>DELETE （DELETE）：从服务端删除资源。<br>这里有两个较少知名的HTTP动词：<ul>
<li>HEAD - 检索有关资源的元数据，例如数据的哈希或上次更新时间。</li>
<li>OPTIONS - 检索关于客户端被允许对资源做什么的信息。</li>
<li>一个好的RESTful API将使用四个半HTTP动词，允许第三方与其数据进行交互，并且不会将动作/动词作为URL段。</li>
</ul>
</li>
</ul>
<p>通常，GET请求可以被缓存（通常是！）在浏览器，例如将缓存请求头用于第二次用户的POST请求。 HEAD请求基本上是一个没有响应主体的GET，并且也可以被缓存。</p>
<h2 id="2-头信息和接收参数（HEADERS-AND-ACCEPT-PARAMETERS）"><a href="#2-头信息和接收参数（HEADERS-AND-ACCEPT-PARAMETERS）" class="headerlink" title="2.头信息和接收参数（HEADERS AND ACCEPT PARAMETERS）"></a>2.头信息和接收参数（HEADERS AND ACCEPT PARAMETERS）</h2><p>在请求头中，客户端发送它能够从服务端接收的内容类型。这称为Accept字段，它确保服务端不会发送客户端无法理解或处理的数据。<br>例如，包含HTML的文本文件将使用text/HTML类型指定。如果此文本文件包含CSS，则将其指定为text/CSS。通用文本文件将被表示为文本/纯文本。但是，这个默认值text/plain并不是一个全部捕获的值。如果客户端需要文本/css并接收到文本/plain，则它将无法识别内容。内容类型的选项是MIME类型。</p>
<p>MIME类型，MIME（Multipurpose Internet Mail Extensions，多功能因特网邮件扩展）原来是用来判断电子邮件附件的格式而设计的一个字符串，后来演变为网络文档，及企业网和Internet上的其他应用程序中的文件格式的规范。<br>MIME类型是由一个媒体类型和一个子类型组成。媒体类型和子类型用一个斜杠（/）分隔开，例如text/css，它会告诉浏览器文件是纯文本文件，也是一个CSS样式表。每一个媒体类型都表示一种文件类型，媒体类型及说明见下表。<br><img src="/images/java-rest-MIME.jpg" alt></p>
<p>其他类型和常用子类型：</p>
<ul>
<li>image — image/png, image/jpeg, image/gif</li>
<li>audio — audio/wav, image/mpeg</li>
<li>video — video/mp4, video/ogg</li>
<li>application — application/json, application/pdf,</li>
<li>application/xml, application/octet-stream</li>
</ul>
<p>例如，访问服务端上项目资源中id为23的资源的客户端可能会发送如下GET请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /articles/23</span><br><span class="line">Accept: text/html, application/xhtml</span><br></pre></td></tr></table></figure></p>
<p>在本例中，Accept header字段表示客户机将接受text/html或application/xhtml格式的内容。</p>
<h2 id="3-资源路径（PATHS）"><a href="#3-资源路径（PATHS）" class="headerlink" title="3.资源路径（PATHS）"></a>3.资源路径（PATHS）</h2><p>请求必须包含应对其执行操作的资源的路径。在restfulapi中，路径的设计应该帮助客户端知道发生了什么。</p>
<p>按照惯例，路径的第一部分应该是资源的复数形式。这使得嵌套路径易于阅读和理解。</p>
<p>像fashionboutique.com/customers/223/orders/12这样的路径在它指向什么方面是清楚的，即使您以前从未见过这种特定的路径，因为它是层次化的描述明确的。我们可以看到，对于id为223的客户，我们正在访问id为12的订单。</p>
<p>路径应包含定位所需资源的特定信息。当引用资源的列表或集合时，无需向fashionboutique.com/customers路径中的POST请求添加id，因为服务器将为新对象生成id。</p>
<p>如果我们试图访问一个资源，我们需要在路径上附加一个id。例如：GET fashionboutique.com/customers/：id-检索客户资源中具有指定id的项目。DELETE fashionboutique.com/customers/：id-删除客户资源中具有指定id的项。</p>
<h1 id="发送响应（SENDING-RESPONSES）"><a href="#发送响应（SENDING-RESPONSES）" class="headerlink" title="发送响应（SENDING RESPONSES）"></a>发送响应（SENDING RESPONSES）</h1><h2 id="1-内容类型-CONTENT-TYPES"><a href="#1-内容类型-CONTENT-TYPES" class="headerlink" title="1.内容类型(CONTENT TYPES)"></a>1.内容类型(CONTENT TYPES)</h2><p>在服务端向客户端返回数据的情况下，服务端必须在响应的头中包含一个内容类型。此内容类型标题字段提醒客户端它在响应正文中发送的数据类型。这些内容类型是MIME类型，就像它们在请求头的accept字段中一样。服务端在响应中发回的内容类型应该是客户端在请求的accept字段中指定的选项之一。</p>
<p>例如，当客户端使用此GET请求访问项目资源中id为23的资源时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /articles/23 HTTP/1.1</span><br><span class="line">Accept: text/html, application/xhtml</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 (OK)</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></table></figure>
<p>这意味着请求的内容正以text/html的内容类型返回到响应体中，客户端表示可以接受。</p>
<h2 id="2-响应状态码（RESPONSE-CODES）"><a href="#2-响应状态码（RESPONSE-CODES）" class="headerlink" title="2.响应状态码（RESPONSE CODES）"></a>2.响应状态码（RESPONSE CODES）</h2><p>服务端的响应包含状态码，用于提醒客户端有关操作成功的信息。作为一名开发人员，您不需要知道每个状态码（其中有许多），但您应该知道最常见的状态代码以及如何使用它们：</p>
<ul>
<li>200 OK - [GET]<br>客户端从服务器请求数据，服务器为它们找到它（等幂）</li>
<li>201 CREATED - [POST / PUT / PATCH]<br>客户端提供了服务器数据，并且服务器创建了一个资源</li>
<li>204 无内容 - [删除]<br>客户端要求服务器删除资源，并且服务器将其删除</li>
<li>400 无效请求 - [POST / PUT / PATCH]<br>客户端给服务器的数据不良，服务器没有做任何事情（幂等）</li>
<li>404错误<br>客户端引用了一个不存在的资源或集合，并且服务器什么也不做（幂等）</li>
<li>500内部服务器错误<br>服务器遇到错误，并且客户端不知道请求是否成功</li>
</ul>
<h2 id="3-响应状态码范围（RESPONSE-CODES-RANGE）"><a href="#3-响应状态码范围（RESPONSE-CODES-RANGE）" class="headerlink" title="3.响应状态码范围（RESPONSE CODES RANGE）"></a>3.响应状态码范围（RESPONSE CODES RANGE）</h2><ul>
<li>1xx 范围保留用于底层HTTP的东西，你很可能永远也用不到。</li>
<li>2xx 范围保留用于成功消息，尽可能确保您的服务器尽可能多地向客户端发送这些消息。</li>
<li>3xx 范围保留用于重定向。大多数API不使用这些请求很多（不像SEO人使用它们那么频繁），然而，较新的超媒体风格API将更多地使用这些请求。</li>
<li>4xx 范围保留用于响应客户端做出的错误，例如。他们提供不良数据或要求不存在的东西。这些请求应该是幂等的，而不是更改服务器的状态。</li>
<li>5xx 范围的状态码是保留给服务器端错误用的。这些错误常常是从底层的函数抛出来的，甚至开发人员也通常没法处理，发送这类状态码的目的以确保客户端获得某种响应。当收到5xx响应时，客户端不可能知道服务器的状态，所以这类状态码是要尽可能的避免。</li>
</ul>
<h1 id="EXAMPLES-OF-REQUESTS-AND-RESPONSES-请求和响应示例"><a href="#EXAMPLES-OF-REQUESTS-AND-RESPONSES-请求和响应示例" class="headerlink" title="(EXAMPLES OF REQUESTS AND RESPONSES)请求和响应示例"></a>(EXAMPLES OF REQUESTS AND RESPONSES)请求和响应示例</h1><p>假设我们有一个应用程序，允许您查看、创建、编辑和删除fashionboutique.com上的一家小型服装店的客户和订单。我们可以创建一个HTTP API，允许客户端执行以下功能：<br>如果我们想查看所有客户，请求如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://fashionboutique.com/customers</span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure></p>
<p>可能的响应头如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Status Code: 200 (OK)</span><br><span class="line">Content-type: application/json</span><br></pre></td></tr></table></figure></p>
<p>然后是以application/json格式请求的客户数据。<br>通过提交据创建新客户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST http://fashionboutique.com/customers</span><br><span class="line">Body:</span><br><span class="line">&#123;</span><br><span class="line">  “customer”: &#123;</span><br><span class="line">    “name” = “Scylla Buss”</span><br><span class="line">    “email” = “scylla.buss@codecademy.org”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后，服务器为该对象生成一个id，并将其返回给客户端，其响应头类似于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">201 (CREATED)</span><br><span class="line">Content-type: application/json</span><br></pre></td></tr></table></figure></p>
<p>要查看单个客户，我们需要指定该客户的id：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET http://fashionboutique.com/customers/123</span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure></p>
<p>可能的响应头如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Status Code: 200 (OK)</span><br><span class="line">Content-type: application/json</span><br></pre></td></tr></table></figure></p>
<p>后面是application/json格式的id为23的客户资源的数据。<br>我们可以通过输入新数据来更新该客户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT http://fashionboutique.com/customers/123</span><br><span class="line">Body:</span><br><span class="line">&#123;</span><br><span class="line">  “customer”: &#123;</span><br><span class="line">    “name” = “Scylla Buss”</span><br><span class="line">    “email” = “scyllabuss1@codecademy.com”</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可能的响应头的状态代码为：200（OK），用于通知客户端id为123的项已被修改。<br>我们还可以通过指定该客户的id来删除该客户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE http://fashionboutique.com/customers/123</span><br></pre></td></tr></table></figure></p>
<p>响应将有一个包含状态代码204（无内容）的头，通知客户端id为123的项已被删除，而正文中没有任何内容。</p>
<h1 id="课后练习（PRACTICE-WITH-REST）"><a href="#课后练习（PRACTICE-WITH-REST）" class="headerlink" title="课后练习（PRACTICE WITH REST）"></a>课后练习（PRACTICE WITH REST）</h1><p>让我们想象一下，我们正在建立一个照片收集网站，要做一个API来跟踪不同用户、用户空间和用户空间的照片。此网站有index.html和style.css。每个用户都有用户名和密码。每张照片都有一个路径和一个所有者（即拍摄照片的用户）。每个空间都有名字和文件路径。您能否设计一个可以容纳以下内容的REST系统：</p>
<ul>
<li>存储用户、照片和路径。</li>
<li>访问空间和访问某个空间的某些照片。首先给出：<br>  1.我们想提出什么样的要求<br>  2.服务器应该返回什么响应<br>  3.每个响应的内容类型应该是什么</li>
</ul>
<h2 id="1-可能的解决方案-模型（POSSIBLE-SOLUTION-MODELS）"><a href="#1-可能的解决方案-模型（POSSIBLE-SOLUTION-MODELS）" class="headerlink" title="1.可能的解决方案-模型（POSSIBLE SOLUTION - MODELS）"></a>1.可能的解决方案-模型（POSSIBLE SOLUTION - MODELS）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  “user”: &#123;</span><br><span class="line">    &quot;id&quot;: &lt;Integer&gt;,</span><br><span class="line">    “username”: &lt;String&gt;,</span><br><span class="line">    “password”:  &lt;String&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  “photo”: &#123;</span><br><span class="line">    &quot;id&quot;: &lt;Integer&gt;,</span><br><span class="line">    “venue_id”: &lt;Integer&gt;,</span><br><span class="line">    “author_id”: &lt;Integer&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  “venue”: &#123;</span><br><span class="line">    &quot;id&quot;: &lt;Integer&gt;,</span><br><span class="line">    “name”: &lt;String&gt;,</span><br><span class="line">    “address”: &lt;String&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-可能的解决方案-请求-响应（POSSIBLE-SOLUTION-REQUESTS-RESPONSES）"><a href="#2-可能的解决方案-请求-响应（POSSIBLE-SOLUTION-REQUESTS-RESPONSES）" class="headerlink" title="2.可能的解决方案-请求/响应（POSSIBLE SOLUTION - REQUESTS/RESPONSES）"></a>2.可能的解决方案-请求/响应（POSSIBLE SOLUTION - REQUESTS/RESPONSES）</h2><h3 id="GET方式请求（GET-REQUESTS）"><a href="#GET方式请求（GET-REQUESTS）" class="headerlink" title="GET方式请求（GET REQUESTS）"></a>GET方式请求（GET REQUESTS）</h3><p>Request- GET /index.html Accept: text/html Response- 200 (OK) Content-type: text/html</p>
<p>Request- GET /style.css Accept: text/css Response- 200 (OK) Content-type: text/css</p>
<p>Request- GET /venues Accept:application/json Response- 200 (OK) Content-type: application/json</p>
<p>Request- GET /venues/:id Accept: application/json Response- 200 (OK) Content-type: application/json</p>
<p>Request- GET /venues/:id/photos/:id Accept: application/json Response- 200 (OK) Content-type: image/png</p>
<h3 id="POST方式请求（POST-REQUESTS）"><a href="#POST方式请求（POST-REQUESTS）" class="headerlink" title="POST方式请求（POST REQUESTS）"></a>POST方式请求（POST REQUESTS）</h3><p>Request- POST /users Response- 201 (CREATED) Content-type: application/json</p>
<p>Request- POST /venues Response- 201 (CREATED) Content-type: application/json</p>
<p>Request- POST /venues/:id/photos Response- 201 (CREATED) Content-type: application/json</p>
<h3 id="PUT方式请求（PUT-REQUESTS）"><a href="#PUT方式请求（PUT-REQUESTS）" class="headerlink" title="PUT方式请求（PUT REQUESTS）"></a>PUT方式请求（PUT REQUESTS）</h3><p>Request- PUT /users/:id Response- 200 (OK)</p>
<p>Request- PUT /venues/:id Response- 200 (OK)</p>
<p>Request- PUT /venues/:id/photos/:id Response- 200 (OK)</p>
<h3 id="DELETE方式请求-DELETE-REQUESTS"><a href="#DELETE方式请求-DELETE-REQUESTS" class="headerlink" title="DELETE方式请求(DELETE REQUESTS)"></a>DELETE方式请求(DELETE REQUESTS)</h3><p>Request- DELETE /venues/:id Response- 204 (NO CONTENT)</p>
<p>Request- DELETE /venues/:id/photos/:id Response- 204 (NO CONTENT)</p>
<h1 id="一起讨论学习"><a href="#一起讨论学习" class="headerlink" title="一起讨论学习"></a>一起讨论学习</h1><p>欢迎您一起学习和留言讨论RESTFUL，让我们一起写出真正的RESTFUL API。</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java单例模式的最佳实现-单元素枚举实现单例]]></title>
      <url>https://addonepiece.github.io/2018/12/16/java-pattern-singleton/</url>
      <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式（Singleton Pattern）是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>Singleton指仅仅被实例化一次的类，Singleton通常被用来代表那些本质上唯一的系统组件，比如窗口管理器或文件系统。使类成为Singleton会使得对它的测试变得十分困难，因为无法给Singleton替换模拟实现，除非它实现一个充当其类型的接口。</p>
<h1 id="单例模式作用及优缺点"><a href="#单例模式作用及优缺点" class="headerlink" title="单例模式作用及优缺点"></a>单例模式作用及优缺点</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>单例模式的意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点。这样能解决一个被全局使用的类频繁地创建与销毁的问题，从而节省系统资源。</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1.在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理平台首页页面缓存）。<br>2.避免对资源的多重占用（比如写文件操作）。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>1.没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br>2.一般单例类的模拟实现比较困难，会使得对它的测试变得十分困难。</p>
<h1 id="使用场景及注意事项"><a href="#使用场景及注意事项" class="headerlink" title="使用场景及注意事项"></a>使用场景及注意事项</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>1.要求生产唯一序列号。<br>2.WEB中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3.创建的一个对象需要消耗的资源过多，比如 I/O。<br>4.数据库的连接等。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.getInstance()方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成instance被多次实例化。而单元素枚举实现单例的方法，可以避免序列化，和反射攻击导致的多次实例化的可能。这也是单元素枚举实现单例方法被视为<i style="color:#f63;">单例实现的最佳方法</i>的重要原因。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="1-单元素枚举实现单例"><a href="#1-单元素枚举实现单例" class="headerlink" title="1.单元素枚举实现单例"></a>1.单元素枚举实现单例</h2><p>直接上代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonElvisDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">50</span>];</span><br><span class="line">        startThreads(threads);</span><br><span class="line">        joinThreads(threads);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThreads</span><span class="params">(<span class="keyword">final</span> Thread[] threads)</span> </span>&#123;</span><br><span class="line">        IntStream.range(<span class="number">0</span>, threads.length).forEach(i -&gt; &#123;</span><br><span class="line">            threads[i] = createThread();</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Thread <span class="title">createThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Got a singleton instance: "</span> + Elvis.INSTANCE);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">joinThreads</span><span class="params">(<span class="keyword">final</span> Thread[] threads)</span> </span>&#123;</span><br><span class="line">        Stream.of(threads).forEach(thread -&gt; &#123;</span><br><span class="line">            join(thread);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">final</span> Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton Elvis using enum: I am signing!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"@"</span> + hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述单元素枚举实现单例的例子中，在功能上与下面会介绍到的实现方式相同。但它更加简洁，无偿的提供了序列化机制，绝对防止多次实例化，即使是在复杂的序列化或者反射攻击的时候。反射攻击是指：单例的调用者借助AccessibleObejct.setAccessible方法，通过反射机制调用私有构造器。</p>
<h2 id="2-懒汉式，线程不安全"><a href="#2-懒汉式，线程不安全" class="headerlink" title="2.懒汉式，线程不安全"></a>2.懒汉式，线程不安全</h2><p>是否 Lazy 初始化：是<br>是否多线程安全：否<br>实现难度：易<br>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。<br>这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-懒汉式，线程安全"><a href="#3-懒汉式，线程安全" class="headerlink" title="3.懒汉式，线程安全"></a>3.懒汉式，线程安全</h2><p>是否 Lazy 初始化：是<br>是否多线程安全：是<br>实现难度：易<br>描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。<br>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。<br>getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-饿汉式"><a href="#4-饿汉式" class="headerlink" title="4.饿汉式"></a>4.饿汉式</h2><p>是否 Lazy 初始化：否<br>是否多线程安全：是<br>实现难度：易<br>描述：这种方式比较常用，但容易产生垃圾对象。<br>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。<br>它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-登记式-静态内部类"><a href="#5-登记式-静态内部类" class="headerlink" title="5.登记式/静态内部类"></a>5.登记式/静态内部类</h2><p>是否 Lazy 初始化：是<br>是否多线程安全：是<br>实现难度：一般<br>描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果），而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经验之谈：一般情况下，不建议使用第2种和第3种懒汉方式，建议使用第4种饿汉方式。只有在要明确实现lazy loading效果时，才会使用第5种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第1种枚举方式。</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（六）]]></title>
      <url>https://addonepiece.github.io/2018/10/15/hexo-next-six/</url>
      <content type="html"><![CDATA[<p>在 hexo 中，我们如何使用自己自定义的 html 页面呢？</p>
<p>我们知道，在 hexo 中，我们使用的是 markdown 格式的文件，渲染出来的页面是有主题样式的。如果我们不希望我们的页面使用主题样式。那么需要在文件头部加一个 <code>layout: false</code> 的配置。</p>
<p><strong>使用 md 文件写文章时增加配置不使用 layout </strong></p>
<a id="more"></a>
<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我来试一下如何禁止解析html</span><br><span class="line">date: 2018-10-04 13:25:24</span><br><span class="line">categories: 综合</span><br><span class="line">tags: [综合]</span><br><span class="line">comments: false</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这样，我们的文件就不会被主题渲染。</p>
<hr>
<p>其实在我们的 hexo 中，是可以直接写 html 文件的，不过也会被渲染，出来的页面还是有主题样式的。如果我们不想要这个主题样式，怎么做呢？</p>
<p><strong> 使用 <code>skip_render</code> </strong></p>
<p><code>skip_render</code> 跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a> 来匹配路径。   </p>
<p><code>skip_render</code> 的配置在 <span id="inline-blue">站点配置文件</span> 中。</p>
<p>只有 <code>source</code> 目录下的文件才会发布到 <code>public</code>（能够在网络上访问到），因此 Hexo 只渲染 <code>source</code> 目录下的文件。<code>skip_render</code> 参数设置的路径是相对于 <code>source</code> 目录的路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: test.html</span><br></pre></td></tr></table></figure></p>
<p>注意，千万不要写成<code>/test.html</code>，这里只能填相对于source文件夹的相对路径。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Yarn安装与使用详细介绍]]></title>
      <url>https://addonepiece.github.io/2018/07/20/yarn/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在 Node 生态系统中，依赖通常安装在项目的 <code>node_modules</code> 文件夹中。然而，这个文件的结构和实际依赖树可能有所区别，因为重复的依赖可以合并到一起。<code>npm</code> 客户端把依赖安装到 <code>node_modules</code> 目录的过程具有不确定性。这意味着当依赖的安装顺序不同时，<code>node_modules</code> 目录的结构可能会发生变化。这种差异可能会导致类似<font color="red">“我的电脑上可以运行，别的电脑上不行”</font>的情况，并且通常需要花费大量时间定为与解决。</p>
<blockquote>
<p>有时候就会遇到这种情况，完整可运行的项目上传到 git 上，别人 pull 下来以后，npm install 会报错。</p>
</blockquote>
<p><a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">Yarn</a> 一开始的主要目标是解决由于语义版本控制而导致的 npm 安装的不确定性问题。虽然可以用 <code>npm shrinkwrap</code> 来实现可预测的依赖关系树，但它并不是默认选项，而是取决于所有的开发人员指导并启用这个选项。</p>
<a id="more"></a>
<blockquote>
<p>npm 5+ 以后的版本加入了 package-lock.json 可以用来锁版本，package-lock.json 的名字，一看就懂，更清楚，但是不向后兼容。</p>
</blockquote>
<blockquote>
<p>npm-shrinkwrap.json 向后兼容 npm 2-4。</p>
</blockquote>
<p><font color="red">举个例子：</font><br>npm 对包引入顺序也十分的敏感，比如在一个空项目里执行以下命令：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install globule@<span class="number">0.1</span><span class="number">.0</span> -S</span><br><span class="line">npm install babel-generator@<span class="number">6.19</span><span class="number">.0</span> -S</span><br><span class="line">npm install babel-helper-define-map@<span class="number">6.18</span><span class="number">.0</span> -S</span><br></pre></td></tr></table></figure></p>
<p>我们这里安装了 3 个包都依赖于 lodash，不过 globule 依赖 <a href="mailto:lodash@1.0.3" target="_blank" rel="noopener">lodash@1.0.3</a>，另外另个依赖 <a href="mailto:lodash@4.x" target="_blank" rel="noopener">lodash@4.x</a>。<br>现在目录依赖结构如下：<br><img src="https://img-blog.csdn.net/20180824142908356?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="npm-package"></p>
<p>这是假设我们在项目里使用 lodash，但是忘记重新安装 lodash<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(lodash.VERSION)  <span class="comment">// v1.0.3</span></span><br></pre></td></tr></table></figure></p>
<p>另一个同事获取项目代码，执行 <code>npm install</code>，这时的目录依赖结构里面，第一层依赖的 lodash 变成了 4.x 版本，这样就造成了依赖版本不一致的问题。而 yarn 则会保证无论怎样引入的顺序，目录依赖结构都是一致的，确保不会发生这样的BUG。</p>
<h1 id="什么是-Yarn"><a href="#什么是-Yarn" class="headerlink" title="什么是 Yarn"></a>什么是 Yarn</h1><p>Yarn 就是一个类似于 npm 的包管理工具，它是由 facebook 推出并开源。</p>
<p>与 npm 相比，yarn 有着众多的优势，主要的优势在于：速度快、离线模式、版本控制。</p>
<h2 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h2><p>npm 会等一个包完全安装完才跳到下一个包，但 yarn 会并行执行包，因此速度会快很多。</p>
<p>Yarn 会缓存它下载的每个包，所以无需重复下载。它还能并行化操作以最大化资源利用率，安装速度之快前所未有。</p>
<h2 id="离线模式"><a href="#离线模式" class="headerlink" title="离线模式"></a>离线模式</h2><p>之前安装过的包会被保存进缓存目录，以后安装就直接从缓存中复制过来，这样做的本质还是会提高安装下载的速度，避免不必要的网络请求。</p>
<h2 id="可靠可确定性"><a href="#可靠可确定性" class="headerlink" title="可靠可确定性"></a>可靠可确定性</h2><p>保证各平台依赖的一致性</p>
<h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><p>力求网络资源最大利用化，让资源下载完美队列执行，避免大量的无用请求，下载失败会自动重新请求，避免整个安装过程失败</p>
<h2 id="扁平化模式"><a href="#扁平化模式" class="headerlink" title="扁平化模式"></a>扁平化模式</h2><p>对于不匹配的依赖版本的包创立一个独立的包，避免创建重复的。<br>对于多个包依赖同一个子包的情况，yarn 会尽量提取为同一个包，防止出现多处副本，浪费空间。</p>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>npm 用下来比较强的一个痛点就是：当包的依赖层次比较深时，版本控制不够精确。会出现相同 package.json，但不同人的电脑上安装出不同版本的依赖包，出现类似<font color="red">“我的电脑上可以运行，别的电脑上不行”</font>的 bug 很难查找。你可以使用 <a href="https://docs.npmjs.com/cli/shrinkwrap" target="_blank" rel="noopener">npm-shrinkwrap</a> 来实现版本固化，版本信息会写入 npm-shrinkwrap.json 文件中，但它毕竟不是 npm 的标准配置。</p>
<p>而 yarn 天生就能实现版本固化。会生成一个类似 npm-shrinkwrap.json 的 yarn.lock 文件，而文件内会描述包自身的版本号，还会锁定所有它依赖的包的版本号：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"@babel/code-frame@7.0.0-beta.47"</span>:</span><br><span class="line">  version <span class="string">"7.0.0-beta.47"</span></span><br><span class="line">  resolved <span class="string">"https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.0.0-beta.47.tgz#d18c2f4c4ba8d093a2bcfab5616593bfe2441a27"</span></span><br><span class="line">  dependencies:</span><br><span class="line">    <span class="string">"@babel/highlight"</span> <span class="string">"7.0.0-beta.47"</span></span><br></pre></td></tr></table></figure></p>
<p>yarn.lock 存储着你的每个包的确切依赖版本，能确保从本地开发到生产环境，所有机器上都有精确相同的依赖版本。</p>
<h2 id="其他关于-Yarn-的介绍"><a href="#其他关于-Yarn-的介绍" class="headerlink" title="其他关于 Yarn 的介绍"></a>其他关于 Yarn 的介绍</h2><p>我们在使用 Yarn 时，依然要访问 npm 仓库，但 Yarn 能够更快速地安装软件包和管理依赖关系，并且可以在跨机器或者无网络的安全环境中保持代码的一致性。</p>
<h1 id="Yarn-安装"><a href="#Yarn-安装" class="headerlink" title="Yarn 安装"></a>Yarn 安装</h1><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>在 Yarn 中文网可以找到 window 下的三种安装方法：</p>
<p><img src="https://img-blog.csdn.net/20180824120236673?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NzZG5feXVkb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="yarn-install"></p>
<p>不过我觉得这三种方法都不好用，快速好用的安装方法应该还是使用 npm 来安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure></p>
<p>关于为什么使用 <code>-g</code>，以及 <code>-g</code> 会带来哪来影响，这个可以看我的这篇文章：<a href="https://addonepiece.github.io/2017/04/10/npm/">npm详细介绍</a>，里面详细介绍了为什么要使用 <code>-g</code>，以及 <code>-g</code> 的作用。</p>
<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure>
<p>如果有报： <code>Please try running this command again as root/Administrator.</code>，可能就是权限不足，因此你需要切换到最高权限去执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">npm install yarn -g</span><br></pre></td></tr></table></figure></p>
<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用另一种初始化脚本的方法，可能就会比较简单一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure></p>
<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><p>如果你的电脑上面已经安装了 Homebrew 的话，你可以通过 Homebrew 包管理器安装 Yarn<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure></p>
<h1 id="Yarn-换源"><a href="#Yarn-换源" class="headerlink" title="Yarn 换源"></a>Yarn 换源</h1><p>Yarn 源仓库包下载不稳定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看 yarn 配置</span><br><span class="line">yarn config get registry</span><br><span class="line">或者</span><br><span class="line">yarn config list</span><br><span class="line"></span><br><span class="line">&gt; registry: &apos;https://registry.yarnpkg.com&apos;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装淘宝镜像</span><br><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h1 id="Yarn-常用命令"><a href="#Yarn-常用命令" class="headerlink" title="Yarn 常用命令"></a>Yarn 常用命令</h1><ul>
<li><code>npm install</code> === <code>yarn</code>  —— install安装是默认行为</li>
<li><code>npm install taco --save</code> === <code>yarn add taco</code>  —— taco包立即被保存到 <code>package.json</code> 中。</li>
<li><code>npm uninstall taco --save</code> === <code>yarn remove taco</code></li>
<li><code>npm install taco --save-dev</code> === <code>yarn add taco --dev</code></li>
<li><code>npm update --save</code> === <code>yarn upgrade</code></li>
</ul>
<p>-</p>
<ul>
<li><code>npm install taco@latest --save</code> === <code>yarn add taco</code></li>
<li><code>npm install taco --global</code> === <code>yarn global add taco</code>  —— 一如既往，请谨慎使用 global 标记。</li>
</ul>
<blockquote>
<p>注意：使用yarn或yarn install安装全部依赖时是根据package.json里的”dependencies”字段来决定的</p>
</blockquote>
<p>-</p>
<ul>
<li><code>npm init</code> === <code>yarn init</code></li>
<li><code>npm init --yes/-y</code> === <code>yarn init --yes/-y</code></li>
<li><code>npm link</code> === <code>yarn link</code></li>
<li><code>npm outdated</code> === <code>yarn outdated</code></li>
<li><code>npm publish</code> === <code>yarn publish</code></li>
<li><code>npm run</code> === <code>yarn run</code></li>
<li><code>npm cache clean</code> === <code>yarn cache clean</code></li>
<li><code>npm login</code> === <code>yarn login</code></li>
<li><code>npm test</code> === <code>yarn test</code></li>
</ul>
<h2 id="Yarn-独有的命令"><a href="#Yarn-独有的命令" class="headerlink" title="Yarn 独有的命令"></a>Yarn 独有的命令</h2><ul>
<li><code>yarn licenses ls</code>  —— 允许你检查依赖的许可信息</li>
<li><code>yarn licenses generate</code>  —— 自动创建依赖免责声明 license</li>
<li><code>yarn why taco</code>  —— 检查为什么会安装 taco，详细列出依赖它的其他包</li>
<li><code>yarn why vuepress</code>  —— 检查为什么会安装 vuepress，详细列出依赖它的其他包</li>
</ul>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>Yarn 除了让安装过程变得更快与更可靠，还添加了一些额外的特性，从而进一步简化依赖管理的工作流。</p>
<ul>
<li>同时兼容 <code>npm</code> 与 <code>bower</code> 工作流，并支持两种软件仓库混合使用</li>
<li>可以限制已安装模块的协议，并提供方法输出协议信息</li>
<li>提供一套稳定的共有 JS API，用于记录构建工具的输出信息</li>
<li>可读、最小化、美观的 CLI 输出信息</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Yarn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 服务端渲染 or 预渲染]]></title>
      <url>https://addonepiece.github.io/2018/06/18/vue-prerender/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>关于 Vue 的 SPA 说的已经太多太多了，它为我们带来了极速的开发体验，极强的开发效率。可能唯一有些许不足的就是，当我们对 SEO 很在乎的时候，我们如何去处理 SEO 的需求。</p>
<p>关于 SEO ，Vue 也有现成的解决方案： <a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue 服务端渲染</a></p>
<a id="more"></a>
<h2 id="那么"><a href="#那么" class="headerlink" title="那么"></a>那么</h2><h3 id="什么是服务端渲染"><a href="#什么是服务端渲染" class="headerlink" title="什么是服务端渲染"></a>什么是服务端渲染</h3><p>服务端将完整的页面 html 输出到客户端显示，与 SPA （Single-Page-Application）使用 js 渲染页面不同。</p>
<h3 id="为什么使用服务端渲染"><a href="#为什么使用服务端渲染" class="headerlink" title="为什么使用服务端渲染"></a>为什么使用服务端渲染</h3><ul>
<li>更好的 SEO</li>
<li>更快的内容到达时间</li>
</ul>
<h3 id="服务端渲染-or-预渲染"><a href="#服务端渲染-or-预渲染" class="headerlink" title="服务端渲染 or 预渲染"></a>服务端渲染 or 预渲染</h3><p>就像官网所说的，如果你调研服务器端渲染(SSR)只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO，那么你可能需要<a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">预渲染</a>，一个典型的预渲染使用场景可能类似<a href="https://addonepiece.github.io/vue-tour/">这个网站</a>。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><strong>服务端渲染</strong>和<strong>预渲染</strong>的使用场景还是有较明显的区别的。预渲染的使用场景更多是我们所说的静态页面的形式，比如说<a href="https://addonepiece.github.io/vue-tour/">这个网站</a>。服务端渲染适用于大型的、页面数据处理较多且较为复杂的、与服务端有数据交互的功能型网站，一个明显的使用场景就是电商网站。</p>
<h2 id="如何使用预渲染"><a href="#如何使用预渲染" class="headerlink" title="如何使用预渲染"></a>如何使用预渲染</h2><p><strong>预渲染</strong>的核心是使用 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a>，如何使用它呢？我们还是以<a href="https://addonepiece.github.io/vue-tour/">这个网站</a>的<a href="https://github.com/addonepiece/prerender-website" target="_blank" rel="noopener">源代码</a>中的 webpack 配置为例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">  staticDir: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">  routes: [ <span class="string">'/'</span>, <span class="string">'/home'</span>, <span class="string">'/infomation'</span>, <span class="string">'/ticket'</span>, <span class="string">'/scenery'</span>, <span class="string">'/about'</span> ],</span><br><span class="line">  renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">    headless: <span class="literal">false</span>,</span><br><span class="line">    renderAfterDocumentEvent: <span class="string">'render-event'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></p>
<p>我们需要简单的配置一下，项目所有的路由，最终生成后有几个页面，都是以这个配置为依据，而不是你在 vue-router 中配置的路由。</p>
<p>最基础也最核心的配置项也就这几行代码，当然，如果你有更多的需求配置项，你可以去 github 上查看文档，文档中也有很详细的介绍。 </p>
<h2 id="如何搭建一个预渲染开发环境"><a href="#如何搭建一个预渲染开发环境" class="headerlink" title="如何搭建一个预渲染开发环境"></a>如何搭建一个预渲染开发环境</h2><p>如果你也想要使用<strong>预渲染</strong>来开发你的网站的话，最简单的方法就是克隆<a href="https://github.com/addonepiece/prerender-website" target="_blank" rel="noopener">这个项目</a>，然后简单删减以后进行二次开发，整个的开发流程和 Vue 是一模一样的。</p>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><p>1、相较于 Vue 的模板中大而全的 webpack 配置项，<strong>预渲染</strong>中的 webpack 配置简单小巧，如果你有一些 webpack 的配置需求的话，你可能需要自己动手。</p>
<p>2、我的<a href="https://github.com/addonepiece/prerender-website" target="_blank" rel="noopener">这个项目</a>使用的是 stylus 来作为 css 预编译语言，如果你想使用其他的 css 预编译语言的话，需要额外安装一些插件以及做一些简单配置。当然了，默认的 css 肯定是支持的。</p>
<p>3、在写这个项目的过程中，也有做一些简单的知识点记录。<a href="https://github.com/addonepiece/prerender-website/blob/master/project-note.md" target="_blank" rel="noopener">vue-prerender 笔记</a></p>
<p>4、最后项目打包发布到生产环境，使用 <code>npm run build</code> 一键操作即可。如果你想要部署到子目录下的话，那么，你可能需要做一些简单的修改，具体在 <a href="https://github.com/addonepiece/prerender-website/blob/master/project-note.md" target="_blank" rel="noopener">vue-prerender 笔记</a> 有提到。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><a href="https://addonepiece.github.io/vue-tour/">项目预览</a><br><a href="https://github.com/addonepiece/prerender-website" target="_blank" rel="noopener">项目github地址</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于 JavaScript 中 this 的详细总结]]></title>
      <url>https://addonepiece.github.io/2018/06/01/js-this/</url>
      <content type="html"><![CDATA[<p id="div-border-top-blue">在 JavaScript 中，函数中的 this 指向，很多同学总是理不清楚【这必然会带来一些问题】。确实，JavaScript 中，函数的 this 指向比较复杂多变。它和你调用的方式有关系，和 <strong>严格模式</strong> 或者 <strong>非严格模式</strong> 有关系，和你是否使用了箭头函数有关系，和你在使用函数时是否传入了 this 有关系，和你是否主动修改了调用对象有关系。</p>

<ul>
<li>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值。<code>this</code> 不能再执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同。<code>ES5</code> 引入了 <code>bind</code> 方法来设置函数的 <code>this</code> 值，而不用考虑函数如何被调用的，<code>ES2015</code> 引入了支持 <code>this</code> 词法解析的箭头函数（它在闭合的执行上下文内设置 <code>this</code> 的值）。</li>
</ul>
<ul>
<li>与其他语言相比，<strong>函数的 <code>this</code> 关键字</strong>在 <code>JavaScript</code> 中的表现略有不同，此外，在 严格模式 和 非严格模式之间也会有一些差别。</li>
</ul>
<a id="more"></a>
<h2 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h2><p>无论是否在严格模式下，在全局执行上下文中（在任何函数体外部）<code>this</code> 都指代全局对象。【在全局执行上下文中 <code>this</code> 都是全局对象 <code>window</code>】（浏览器环境）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.b);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p>
<h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>在函数内部，<code>this</code> 的值取决于函数被调用的方式。【取决于被调用的方式】</p>
<h3 id="简单调用"><a href="#简单调用" class="headerlink" title="简单调用"></a>简单调用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在浏览器中</span></span><br><span class="line">f1() === <span class="built_in">window</span>;  <span class="comment">// 在浏览器中，全局对象是widnow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Node 中</span></span><br><span class="line">f1() === global;</span><br></pre></td></tr></table></figure>
<p>【在严格模式下，<code>this</code> 将保持他进入执行上下文时的值】</p>
<p>在严格模式下，<code>this</code> 将保持他进入执行上下文时的值，所以下面的 <code>this</code> 将会默认为 <code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>; <span class="comment">// 这里是严格模式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">f2() === <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>所以，在严格模式下，如果 <code>this</code> 没有被执行上下文（execution context）定义，那它将保持为 <code>undefined</code>。</p>
<p>因为 <code>f2()</code> 是被直接调用的，而不是作为对象的属性或方法调用的（如<code>window.f2()</code>）。有一些浏览器最初在支持严格模式时没有正确实现这个功能，于是它们错误的返回了 <code>window</code> 对象。</p>
<p>但是，如果用 <code>window</code> 来调用的话，<code>this</code> 就是 <code>window</code> 了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>; <span class="comment">// 这里是严格模式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.f2())  <span class="comment">// window</span></span><br></pre></td></tr></table></figure></p>
<p>如果要想把 <code>this</code> 的值从一个上下文传到另一个，就要用 <code>call</code> 或者 <code>apply</code> 方法。</p>
<p>当一个函数在其主体中使用 <code>this</code> 关键字时，可以通过使用函数继承自 <code>Function.prototype</code> 的 <code>call</code> 或 <code>apply</code> 方法将 <code>this</code> 值绑定到调用中的特定对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是作为‘this’使用的对象</span></span><br><span class="line"><span class="comment">// 后续参数作为参数传递给函数调用</span></span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>); <span class="comment">// 1 + 3 + 5 + 7 = 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数也是作为‘this’使用的对象</span></span><br><span class="line"><span class="comment">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span></span><br><span class="line">add.apply(o, [<span class="number">10</span>, <span class="number">20</span>]); <span class="comment">// 1 + 3 + 10 + 20 = 34</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 <code>call</code> 和 <code>apply</code> 函数的时候要注意，如果传递给 <code>this</code> 的值不是一个对象，<code>JavaScript</code> 会尝试使用内部 <code>ToObject</code> 操作将其转换为对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因此，如果传递的值是一个原始值比如 <span class="number">7</span> 或 <span class="string">'foo'</span>，那么就会使用相关构造函数将它转换为对象，所以原始值 <span class="number">7</span> 会被转为对象，像 </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">7</span>) 这样，而字符串 <span class="string">'foo'</span> 转化成 <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'foo'</span>) 这样。</span><br></pre></td></tr></table></figure>
<h2 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h2><p><code>ECMAScript 5</code> 引入了 <code>Function.prototype.bind</code>。调用 <code>f.bind(someObject)</code> 会 <strong>创建</strong>一个与 <code>f</code> 具有相同函数体和作用域的函数，但是在这个新函数中，<code>this</code> 将永久地被绑定到了 <code>bind</code> 的第一个参数，无论这个函数是如何被调用的。</p>
<p>【<code>this</code> 将永久的被绑定到了 <code>bind</code> 的第一个参数，无论这个函数是如何被调用的】</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">a</span>:<span class="string">"azerty"</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// azerty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = g.bind(&#123;<span class="attr">a</span>:<span class="string">'yoo'</span>&#125;); <span class="comment">// bind只生效一次！</span></span><br><span class="line"><span class="built_in">console</span>.log(h()); <span class="comment">// azerty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>:<span class="number">37</span>, <span class="attr">f</span>:f, <span class="attr">g</span>:g, <span class="attr">h</span>:h&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.f(), o.g(), o.h()); <span class="comment">// 37, azerty, azerty</span></span><br></pre></td></tr></table></figure>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>在箭头函数中，<code>this</code> 与封闭词法上下文的 <code>this</code> 保持一致。在全局代码中，它将被设置为全局对象。【封闭词法上下文 是什么意思，你知道吗？】<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function">(<span class="params">(</span>) =&gt;</span> <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接着上面的代码</span></span><br><span class="line"><span class="comment">// 作为对象的一个方法调用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">foo</span>: foo&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.foo() === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试使用call来设定this</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.call(obj) === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试使用bind来设定this</span></span><br><span class="line">foo = foo.bind(obj);</span><br><span class="line"><span class="built_in">console</span>.log(foo() === <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<p>【无论如何，<code>foo</code> 的 <code>this</code> 被设置为<strong>他被创建时的上下文</strong>（在上面的例子中，就是全局对象）】<br>这同样适用于在其他函数内创建的箭头函数：这些箭头函数的 <code>this</code> 被设置为封闭的词法上下文的。</p>
<h2 id="作为对象的方法"><a href="#作为对象的方法" class="headerlink" title="作为对象的方法"></a>作为对象的方法</h2><blockquote>
<p>当函数作为对象里的方法被调用时，它们的 <code>this</code> 是调用该函数的对象</p>
</blockquote>
<p><code>this</code> 的绑定只受最靠近的成员引用的影响。在下面的例子中，我们把一个方法 <code>g</code> 当做对象 <code>o.b</code> 的函数调用。在这次执行期间，函数中的 <code>this</code> 将指向 <code>o.b</code> 。事实证明，这与他是对象 <code>o</code> 的成员没有多大关系，最靠近的引用才是最重要的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o.b = &#123; <span class="attr">g</span>: independent, <span class="attr">prop</span>: <span class="number">42</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(o.b.g())</span><br></pre></td></tr></table></figure></p>
<h2 id="原型链中的-this"><a href="#原型链中的-this" class="headerlink" title="原型链中的 this"></a>原型链中的 <code>this</code></h2><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么 <code>this</code> 指向的是调用这个方法的对象，就像该方法在对象上一样。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o);</span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.f()); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，对象 <code>p</code> 没有属于它自己的 <code>f</code> 属性，它的 <code>f</code> 属性继承自它的原型。虽然在对 <code>f</code> 的查找过程中，最终是在 <code>o</code> 中找到 <code>f</code> 属性的，这并没有关系；查找过程首先从 <code>p.f</code> 的引用开始，所以函数中的 <code>this</code> 指向 <code>p</code>。也就是说，因为 <code>f</code> 是作为 <code>p</code> 的方法调用的，所以它的 <code>this</code> 指向了 <code>p</code> 。这是 <code>JavaScript</code> 的原型继承中的一个有趣的特性。</p>
<h2 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h2><p>当一个函数用作构造函数时（适用 <code>new</code> 关键字），它的 <code>this</code> 被绑定到正在构造的新对象。</p>
<p>虽然构造器返回的默认值是 <code>this</code> 所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回 <code>this</code> 对象）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 构造函数这样工作:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * function MyConstructor()&#123;</span></span><br><span class="line"><span class="comment"> *   // 函数实体写在这里</span></span><br><span class="line"><span class="comment"> *   // 根据需要在this上创建属性，然后赋值给它们，比如：</span></span><br><span class="line"><span class="comment"> *   this.fum = "nom";</span></span><br><span class="line"><span class="comment"> *   // 等等...</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   // 如果函数具有返回对象的return语句，</span></span><br><span class="line"><span class="comment"> *   // 则该对象将是 new 表达式的结果。 </span></span><br><span class="line"><span class="comment"> *   // 否则，表达式的结果是当前绑定到 this 的对象。</span></span><br><span class="line"><span class="comment"> *   //（即通常看到的常见情况）。</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = <span class="number">37</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> C();</span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 37</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = <span class="number">37</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">38</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">o = <span class="keyword">new</span> C2();</span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 38</span></span><br></pre></td></tr></table></figure>
<p>在刚刚的例子中（C2），因为在调用构造函数的过程中，手动的设置了返回对象，与 <code>this</code> 绑定的默认对象被丢弃了。（这基本上使得语句 <code>this.a = 37;</code> 成了“僵尸”代码，实际上并不是真正的“僵尸”，这条语句执行了，但是对于外部没有任何影响，因此完全可以忽略它）。</p>
<h2 id="作为一个-DOM-事件处理函数"><a href="#作为一个-DOM-事件处理函数" class="headerlink" title="作为一个 DOM 事件处理函数"></a>作为一个 DOM 事件处理函数</h2><blockquote>
<p>当函数被用作事件处理函数时，它的 <code>this</code> 指向触发事件的元素（一些浏览器在使用非 <code>addEventListener</code> 的函数动态添加监听函数时不遵守这个约定）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被调用时，将关联的元素变成蓝色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bluify</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === e.currentTarget); <span class="comment">// 总是 true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当 currentTarget 和 target 是同一个对象时为 true</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === e.target);        </span><br><span class="line">  <span class="keyword">this</span>.style.backgroundColor = <span class="string">'#A5D9F3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文档中的所有元素的列表</span></span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;elements.length ; i++)&#123;</span><br><span class="line">  elements[i].addEventListener(<span class="string">'click'</span>, bluify, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h2 id="作为一个内联事件处理函数"><a href="#作为一个内联事件处理函数" class="headerlink" title="作为一个内联事件处理函数"></a>作为一个内联事件处理函数</h2><blockquote>
<p>当代码被内联 <code>on-event</code> 处理函数 调用时，它的 <code>this</code> 指向监听器所在的 <code>DOM</code> 元素</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert(this.tagName.toLowerCase());"</span>&gt;</span></span><br><span class="line">  Show this</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面的 <code>alert</code> 会显示 <code>button</code> 。注意只有外层代码中的 <code>this</code> 是这样设置的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert((function()&#123;return this&#125;)());"</span>&gt;</span></span><br><span class="line">  Show inner this</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这种情况下，没有设置内部函数的 <code>this</code>，所以它指向 <code>global/window</code> 对象（即非严格模式下调用的函数未设置 <code>this</code> 时指向的默认对象）。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue2.x 做一个音乐app]]></title>
      <url>https://addonepiece.github.io/2018/05/01/vue-music/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p id="div-border-top-green">本项目是基于 vue2.4.1 最新的实战项目，vue-cli2.9.3 + vue2.4.1 + axios + vue-router3.0.1 + es6 + vux3.0.1 + webpack + better-scroll + 线上真实接口的一个移动端音乐 app。</p>

<a id="more"></a>
<p><img src="/images/vue-music-2.png" alt></p>
<h2 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h2><p>1、音乐列表、歌单、歌手、排行、榜单、推荐<br>2、音乐播放、暂停、上一曲、下一曲、喜欢<br>3、播放列表、添加到播放列表、历史列表<br>4、搜索单曲、歌手、专辑、MV<br>5、查看歌手页面、专辑页面、MV<br>6、热门搜索<br>7、搜索历史记录<br>8、排行榜<br>9、切换播放模式<br>10、歌词<br>11、个人中心<br>12、项目介绍</p>
<p id="div-border-left-red">现在最流行的开发方式就是前后分离了；<br><a href="/tags/vue">vue</a> 也是现在最流行的前端框架之一。</p>




<h2 id="截屏演示"><a href="#截屏演示" class="headerlink" title="截屏演示"></a>截屏演示</h2><video src="/images/vue-music.mp4" controls="controls" preload="preload" height="400px"></video>

<h2 id="移动端演示"><a href="#移动端演示" class="headerlink" title="移动端演示"></a>移动端演示</h2><p>扫二维码在手机上查看效果更好<br><img src="/images/vue-music-1.png" alt></p>
<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><p><a href="https://github.com/addonepiece/vue-music" target="_blank" rel="noopener">https://github.com/addonepiece/vue-music</a></p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># serve with hot reload at localhost:8080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production with minification</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production and view the bundle analyzer report</span></span><br><span class="line">npm run build --report</span><br><span class="line"></span><br><span class="line"><span class="comment"># run local server</span></span><br><span class="line">npm run prod.server.js</span><br></pre></td></tr></table></figure>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 npm install 长时间没有反应或者安装失败，请尝试</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><p>vue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：</p>
<ul>
<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>
<li>Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码</li>
<li>ESlint，统一代码风格</li>
<li>bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法</li>
<li>Stylus，类似于 sass/scss ，但是可以不写 <code>{ }</code> 和 <code>:</code>，使用起来还是很方便的</li>
<li>better-scroll，很好用的移动端各种滚动场景需求的插件（已支持PC）</li>
<li>vuex，Vuex是一个专为 Vue.js 应用程序开发的状态管理模式</li>
<li>vue-router，专为 Vue.js 应用程序开发的路由工具</li>
</ul>
<p>除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。</p>
<h2 id="为什么写这个项目"><a href="#为什么写这个项目" class="headerlink" title="为什么写这个项目"></a>为什么写这个项目</h2><p>之前的 <a href="https://addonepiece.github.io/2017/11/11/vue-sell/">vue-sell</a>，是一个非常好的 vue 的项目教程了，学了 vue 以后，跟着做一遍 vue-sell，应该对 vue 的基本操作都能非常熟练的掌握了。<br>但是如何结合 vuex 和 vue-router，以及其他技术，做一个大型的项目，很多同学还是苦于没有经验和项目实例，所以就有了这个 vue-music。</p>
<p><a href="https://addonepiece.github.io/vue-music/">vue-music</a> 里面用到了 vue 全家桶，还有 better-scroll，jsonp 等其他工具，用的也是线上真实的音乐接口数据，而且项目里封装了很多完美的组件，对个人技术的学习和提升有很大的帮助，项目级别上也达到了中大型级别。<br>非常适合 vue 的进阶学习。</p>
<h2 id="获取教程"><a href="#获取教程" class="headerlink" title="获取教程"></a>获取教程</h2><p>这个项目我从头到尾写了一遍，解决了项目中遇到的所有问题，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。想获取教程或者有疑问的，可以加这个群。</p>
<font color="#f69" size="5">建了一个qq群，可以点击这个logo<a target="_blank" href="//shang.qq.com/wpa/qunwpa?idkey=32da7a18744756b0d8ffdd05b84999afecb5265dbad0fb119033e122abe803f3"><img border="0" width="150" src="https://addonepiece.github.io/vue-tour/logo1.png" alt="Vue学习交流" title="Vue学习交流" style="vertical-align: middle"></a>，或者手动search群号：<a target="_blank" href="//shang.qq.com/wpa/qunwpa?idkey=32da7a18744756b0d8ffdd05b84999afecb5265dbad0fb119033e122abe803f3">685486827</a></font>]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的几条基本原则]]></title>
      <url>https://addonepiece.github.io/2017/12/12/Java-basicPrinciple/</url>
      <content type="html"><![CDATA[<p>Java中的几条基本原则，清晰,正确,可用,健壮,灵活和可维护。摘自Effective Java。<br>Effective Java是这么定义Module，是指任何可从用的软件组件，从单个方法，到包含多个包的复杂系统，都可以是一个模块。代码应该被重用，而不是被拷贝。模块之间的依赖性应该最可能的降到最小。错误应该尽早被检测出来，最好是在编译时刻。你不应该盲目地遵循这些规则，但是，你应该只在偶尔的情况下，有充分的理由之后才去打破这些规则。同大多数学科一样，学习编程艺术首先要学会基本的规则，然后才能知道什么时候可以打破这些规则，即守,破,离。</p>
<h1 id="码出优品。设计接口，类，方法时你需要考虑的条目。"><a href="#码出优品。设计接口，类，方法时你需要考虑的条目。" class="headerlink" title="码出优品。设计接口，类，方法时你需要考虑的条目。"></a>码出优品。设计接口，类，方法时你需要考虑的条目。</h1><ol>
<li>考虑用静态工厂方法代替构造器</li>
<li>用私有构造器或者枚举类型强化Singleton属性</li>
<li>通过私有构造器强化不可实例化的能力</li>
<li>避免创建不必要的的对象</li>
<li>消除过期的对象引用</li>
<li>避免使用终结方法</li>
<li>覆盖equals时请遵守通用约定</li>
<li>覆盖equals时总要覆盖hashCode</li>
<li>始终要覆盖toString</li>
<li>谨慎的覆盖clone</li>
<li>考虑实现Comparable接口</li>
<li>使类和成员的可访问性最小化</li>
<li>使可变性最小化</li>
<li>复合优先于继承</li>
<li>要么为继承而设计，并提供文档说明，要么就禁止继承</li>
<li>接口优于抽象类</li>
<li>接口只用一定义类型</li>
<li>优先考虑静态成员</li>
<li>在公有类中使用访问方法而非公有域</li>
<li>类层次优于标签类</li>
<li>用enum代替int常量</li>
<li>用函数对象表示策略</li>
<li>检查参数的有效性</li>
<li>必要时进行保护性拷贝</li>
<li>谨慎设计方法签名</li>
<li>慎用重载</li>
<li>返回零长度的数组或集合而不是null</li>
<li>为所有导出的API元素编写文档注释</li>
<li>将局部变量的作用域最小化</li>
<li>了解和使用类库</li>
<li>如果需要精确的答案，请避免使用float和double</li>
<li>如果其它类型更合适则尽量避免使用字符串</li>
<li>当心字符串链接的性能</li>
<li>通过接口引用对象</li>
<li>接口优先于反射机制</li>
<li>谨慎的使用本地方法</li>
<li>谨慎的进行优化</li>
<li>遵守普遍接受的命名惯例</li>
<li>只针对异常的情况下蔡使用异常</li>
<li>对可恢复的情况使用受检异常，对编程错误使用运行时异常</li>
<li>避免不必要的使用受检的异常</li>
<li>优先使用标准的异常</li>
<li>抛出于抽象相对应的异常</li>
<li>每个方法抛出的异常都要有文档</li>
<li>在细节消息中包含能捕获失败的信息</li>
<li>努力使失败保持原子性</li>
<li>不要忽略异常</li>
<li>同步访问共享的可变数据</li>
<li>避免过度同步</li>
<li>开发工具优先于wait和notify</li>
<li>不要依赖于线程调度器</li>
<li>线程安全性的文档化</li>
<li>避免使用线程组</li>
<li>谨慎的实现Serializable接口</li>
<li>考虑使用自定的序列化形式</li>
<li>保护性的编写readObject方法</li>
<li>对于实例控制，枚举类型优先于readResolve</li>
<li>考虑用序列化代理代替序列化实例</li>
</ol>
<p>现在各种框架的盛行，使得我们无暇顾及这些基本的规则。站在巨人的肩膀上的我们需要有意识的不断夯实基础和基本规则。只要我们夯实基础并能很好的使用这些规则我们就能以不变应万变，快速上手各种新技术新框架，立于不被淘汰之地。</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue2.x 做一个外卖app]]></title>
      <url>https://addonepiece.github.io/2017/11/11/vue-sell/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p id="div-border-top-green">本项目是基于 vue2.4 最新的实战项目，vue-cli2.8 + vue2.4 + vue-resource + vue-router2.7 + es6 + mock + webpack 的一个移动端外卖 app。</p>

<p><img src="/images/vue-sell-1.png" alt></p>
<p id="div-border-left-red">现在最流行的开发方式就是前后分离了；<br><a href="/tags/vue">vue</a> 也是现在最流行的前端框架之一。</p>

<a id="more"></a>
<h2 id="截屏演示"><a href="#截屏演示" class="headerlink" title="截屏演示"></a>截屏演示</h2><p><img src="/images/vue-sell-3.gif" alt></p>
<h2 id="移动端演示"><a href="#移动端演示" class="headerlink" title="移动端演示"></a>移动端演示</h2><p>扫二维码在手机上查看效果更好<br><img src="/images/vue-sell-2.png" alt></p>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>vue 有自己的脚手架构建工具 vue-cli 。使用起来非常方便，使用 webpack 来集成各种开发便捷工具，比如：</p>
<ul>
<li>代码热更新，修改代码之后网页无刷新改变，对前端开发来说非常的方便</li>
<li>Postcss，再也不用去管兼容性的问题了，只针对 chrome 写 css 代码，会自动编译生成支持多款浏览器的 css 代码</li>
<li>ESlint，统一代码风格</li>
<li>bable，ES2015 出来已经有一段事件了，但是不少浏览器还没有兼容 ES6。有了 bable，放心使用 ES6 语法，它会自动转义成 ES5 语法</li>
<li>Stylus，类似于 sass/scss ，但是可以不写 <code>{ }</code> 和 <code>:</code>，使用起来还是很方便的</li>
</ul>
<p>除此之外，vue-cli 已经使用 node 配置了一套本地服务器和安装命令等，本地运行和打包只需要一个命令就可以搞定，非常的方便。</p>
<h2 id="为什么写这个项目"><a href="#为什么写这个项目" class="headerlink" title="为什么写这个项目"></a>为什么写这个项目</h2><p>vue 的官网文档写的很好，很多同学在学习完文档以后，很难实际上手做项目，只能做一些 todo-list 的小 demo ,距离上手做项目还有一些差距。<br>这一套 vue 的实战视频可以说是非常适合新手入门进阶，让你可以动手用 vue 来做项目，解决 vue 在实战中的问题才是大家最想学习的，而不是小打小闹的 demo。<br><img src="/images/vue-sell-5.png" alt></p>
<p>而且这套视频教程包含现在最新的前端必备技术点详细教学：webpack、eslint、vue-cli构建、模块打包、mock、vue-resource、axios、以及真实项目中会遇到的各种问题以及解决方案。</p>
<h2 id="获取教程"><a href="#获取教程" class="headerlink" title="获取教程"></a>获取教程</h2><p>这个项目我从头到尾写了一遍，由于有一些包或者模块升级的原因，会有一些小的问题，我都已经解决过了。想获取教程或者有疑问的，可以加这个群。</p>
<font color="#f69" size="5">建了一个qq群，可以点击这个logo<a target="_blank" href="//shang.qq.com/wpa/qunwpa?idkey=32da7a18744756b0d8ffdd05b84999afecb5265dbad0fb119033e122abe803f3"><img border="0" width="150" src="https://addonepiece.github.io/vue-tour/logo1.png" alt="Vue学习交流" title="Vue学习交流" style="vertical-align: middle"></a>，或者手动search群号：<a target="_blank" href="//shang.qq.com/wpa/qunwpa?idkey=32da7a18744756b0d8ffdd05b84999afecb5265dbad0fb119033e122abe803f3">685486827</a></font>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven仓库配置使用和依赖传递]]></title>
      <url>https://addonepiece.github.io/2017/10/20/java-maven/</url>
      <content type="html"><![CDATA[<p>在如今的互联网项目开发当中，特别是Java领域，可以说Maven随处可见。Maven的仓库管理、依赖管理、继承和聚合等特性为项目的构建提供了一整套完善的解决方案，可以说如果你搞不懂Maven，那么一个多模块的项目足以让你头疼，依赖冲突就会让你不知所措，甚至搞不清楚项目是如何运行起来的…..OK。工欲善其事，必先利其器，搞定maven让我们从这篇文章开始。</p>
<h1 id="想当初"><a href="#想当初" class="headerlink" title="想当初"></a>想当初</h1><p>回想一下，当你新到一家公司，安装完JDK后就会安装配置Maven（MAVEN_HOME、path），很大可能性你需要修改settings.xml文件，比如你会修改本地仓库地址路径，比如你很可能会copy一段配置到你的settings.xml中（很可能就是私服的一些配置）。接下来，你会到IDEA或者Eclipse中进行Maven插件配置，然后你就可以在工程中的pom.xml里面开始添加<dependency>标签来管理jar包，在Maven规范的目录结构下进行编写代码，最后你会通过插件的方式来进行测试、打包（jar or war）、部署、运行。</dependency></p>
<p>上面描述了我们对Maven的一些使用方式，下面我们进行一些思考：</p>
<h2 id="1-Maven规范化Java工程目录结构"><a href="#1-Maven规范化Java工程目录结构" class="headerlink" title="1.Maven规范化Java工程目录结构"></a>1.Maven规范化Java工程目录结构</h2><p><img src="/images/java-maven-directorystructure.jpeg" alt></p>
<h3 id="这里需要注意2点："><a href="#这里需要注意2点：" class="headerlink" title="这里需要注意2点："></a>这里需要注意2点：</h3><p>第一：src/main下内容最终会打包到Jar/War中，而src/test下是测试内容，并不会打包进去。</p>
<p>第二：src/main/resources中的资源文件会COPY至目标目录，这是Maven的默认生命周期中的一个规定动作。（想一想，hibernate/mybatis的映射XML需要放入resources下，而不能在放在其他地方了）</p>
<h2 id="2-Maven的生命周期"><a href="#2-Maven的生命周期" class="headerlink" title="2.Maven的生命周期"></a>2.Maven的生命周期</h2><p><img src="/images/java-maven-lifecyle.jpeg" alt><br>我们只需要注意一点：<i style="color:#f63;">执行后面的命令时，前面的命令自动得到执行。</i></p>
<p>实际上，我们最常用的就是这么几个：</p>
<ul>
<li>clean：有问题，多清理！</li>
<li>package：打成Jar or War包，会自动进行clean+compile</li>
<li>install：将本地工程Jar上传到本地仓库</li>
<li>deploy：上传到私服</li>
</ul>
<h2 id="3-关于dependency的使用"><a href="#3-关于dependency的使用" class="headerlink" title="3.关于dependency的使用"></a>3.关于dependency的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/images/java-maven-m2.jpeg" alt></p>
<p>其实这个标签揭示了jar的查找坐标：groupId、artifactId、version。</p>
<p>一般而言，我们可以到私服上输入artifactId进行搜索，或者到<a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a> 上进行查找确定坐标。</p>
<p><i style="color:#f63;">version分为开发版本（Snapshot）和发布版本（Release），那么为什么要分呢？</i></p>
<p>在实际开发中，我们经常遇到这样的场景，比如A服务依赖于B服务，A和B同时开发，B在开发中发现了BUG，修改后，将版本由1.0升级为2.0，那么A必须也跟着在POM.XML中进行版本升级。过了几天后，B又发现了问题，进行修改后升级版本发布，然后通知A进行升级…可以说这是开发过程中的版本不稳定导致了这样的问题。</p>
<p>Maven，已经替我们想好了解决方案，就是使用Snapshot版本，在开发过程中B发布的版本标志为Snapshot版本，A进行依赖的时候选择Snapshot版本，那么每次B发布的话，会在私服仓库中，形成带有时间戳的Snapshot版本，而A构建的时候会自动下载B最新时间戳的Snapshot版本！</p>
<h2 id="4-既然Maven进行了依赖管理，为什么还会出现依赖冲突？处理依赖冲突的手段是？"><a href="#4-既然Maven进行了依赖管理，为什么还会出现依赖冲突？处理依赖冲突的手段是？" class="headerlink" title="4.既然Maven进行了依赖管理，为什么还会出现依赖冲突？处理依赖冲突的手段是？"></a>4.既然Maven进行了依赖管理，为什么还会出现依赖冲突？处理依赖冲突的手段是？</h2><p><img src="/images/java-maven-conflict.jpeg" alt><br>首先来说，对于Maven而言，同一个groupId同一个artifactId下，只能使用一个version！</p>
<p>根据上图的依赖顺序，将使用1.2版本的jar。</p>
<p>现在，我们可以思考下了，比如工程中需要引入A、B，而A依赖1.0版本的C，B依赖2.0版本的C，那么问题来了，C使用的版本将由引入A、B的顺序而定？这显然不靠谱！如果A的依赖写在B的依赖后面，将意味着最后引入的是1.0版本的C，很可能在运行阶段出现类（ClassNotFoundException）、方法（NoSuchMethodError）找不到的错误（因为B使用的是高版本的C）！</p>
<p>这里其实涉及到了2个概念：依赖传递（transitive）、Maven的最近依赖策略。</p>
<p>依赖传递：如果A依赖B，B依赖C，那么引入A，意味着B和C都会被引入。</p>
<p>Maven的最近依赖策略：如果一个项目依赖相同的groupId、artifactId的多个版本，那么在依赖树（mvn dependency:tree）中离项目最近的那个版本将会被使用。（从这里可以看出Maven是不是有点小问题呢？能不能选择高版本的进行依赖么？据了解，Gradle就是version+策略）</p>
<p>现在，我们可以想想如何处理依赖冲突呢？</p>
<p>想法1：要使用哪个版本，我们是清楚的，那么能不能不管如何依赖传递，都可以进行版本锁定呢？</p>
<p>使用<dependencymanagement>  这种主要用于子模块的版本一致性中</dependencymanagement></p>
<p>想法2：在依赖传递中，能不能去掉我们不想依赖的？<br>使用<exclusions> 在实际中我们可以在IDEA中直接利用插件帮助我们生成</exclusions></p>
<p>想法3：既然是最近依赖策略，那么我们就直接使用显式依赖指定版本，那不就是最靠近项目的么？</p>
<p>使用<dependency></dependency></p>
<h2 id="5-引入依赖的最佳实践，提前发现问题！"><a href="#5-引入依赖的最佳实践，提前发现问题！" class="headerlink" title="5.引入依赖的最佳实践，提前发现问题！"></a>5.引入依赖的最佳实践，提前发现问题！</h2><p>在工程中，我们避免不了需要加一些依赖，也许加了依赖后运行时才发现存在依赖冲突在去解决，似乎有点晚！那么能不能提前发现问题呢？</p>
<p>如果我们新加入一个依赖的话，那么先通过mvn dependency:tree命令形成依赖树，看看我们新加入的依赖，是否存在传递依赖，传递依赖中是否和依赖树中的版本存在冲突，如果存在多个版本冲突，利用上文的方式进行解决！</p>
<h2 id="6-关于scope依赖范围"><a href="#6-关于scope依赖范围" class="headerlink" title="6.关于scope依赖范围"></a>6.关于scope依赖范围</h2><p>既然，Maven的生命周期存在编译、测试、运行这些过程，那么显然有些依赖只用于测试，比如junit；有些依赖编译用不到，只有运行的时候才能用到，比如mysql的驱动包在编译期就用不到（编译期用的是JDBC接口），而是在运行时用到的；还有些依赖，编译期要用到，而运行期不需要提供，因为有些容器已经提供了，比如servlet-api在tomcat中已经提供了，我们只需要的是编译期提供而已。</p>
<h3 id="总结来说："><a href="#总结来说：" class="headerlink" title="总结来说："></a>总结来说：</h3><p>compile：默认的scope，运行期有效，需要打入包中。</p>
<p>provided：编译期有效，运行期不需要提供，不会打入包中。</p>
<p>runtime：编译不需要，在运行期有效，需要导入包中。（接口与实现分离）</p>
<p>test：测试需要，不会打入包中。</p>
<p>system：非本地仓库引入、存在系统的某个路径下的jar。（一般不使用）</p>
<h2 id="8-本地仓库？Maven到底有哪些仓库？它们什么关系？"><a href="#8-本地仓库？Maven到底有哪些仓库？它们什么关系？" class="headerlink" title="8.本地仓库？Maven到底有哪些仓库？它们什么关系？"></a>8.本地仓库？Maven到底有哪些仓库？它们什么关系？</h2><p><img src="/images/Java-maven-relationship.jpeg" alt><br>你要jar包，不可能每次都要联网去下载吧，多费劲，所以本地仓库就是相当于加了一层jar包缓存，先到这里来查。如果这里查不到，那么就去私服上找，如果私服也找不到，那么去中央仓库去找，找到jar后，会把jar的信息同步到私服和本地仓库中。</p>
<p>私服，就是公司内部局域网的一台服务器而已，你想一下，当你的工程Project-A依赖别人的Project-B的接口，怎么做呢？没有Maven的时候，当然是copy Project-B jar到你的本地lib中引入，那么Maven的方式，很显然需要其他人把Project-B deploy到私服仓库中供你使用。因此私服中存储了本公司的内部专用的jar！不仅如此，私服还充当了中央仓库的镜像，说白了就是一个代理！</p>
<p>中央仓库：该仓库存储了互联网上的jar，由Maven团队来维护，地址是：<a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/</a> </p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（五）]]></title>
      <url>https://addonepiece.github.io/2017/07/15/hexo-next-five/</url>
      <content type="html"><![CDATA[<p>在这之前，我写过四篇关于 Hexo + NexT 构建博客的文章。=》【<a href="/categories/Hexo/">传送门</a>】</p>
<p>本文将会介绍一些自定义的功能。相较于之前主要是修改配置文件中的内容，现在更多的是动手改源码来实现功能，而且还能帮你搞懂一些 Hexo NexT 的源码。如果你能弄懂源码的一些流程和逻辑，那么，你将能更好的来实现自己的一些想法。</p>
<h1 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h1><p>文章封面的意思就是：在博客首页的时候会显示文章的封面图片，进入这篇文章的详细页面后，将不显示这张图片。</p>
<p>如果想添加文章封面的话，需要添加一个字段属性：<code>summary_img</code>，<code>summary_img</code> 的值是图片的路径。</p>
<a id="more"></a>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: CSS 各种Hack手段</span><br><span class="line">date: 2017-06-25 03:25:24</span><br><span class="line">categories: 前端</span><br><span class="line">tags: [CSS]</span><br><span class="line">comments: false</span><br><span class="line">summary_img: /images/css-hack-1.png</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>具体实现细节如下：<br>修改 <code>\themes\next\layout\_macro\post.swing</code> 文件。<br>将代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.summary_img  %&#125;</span><br><span class="line">  &lt;div class=&quot;out-img-topic&quot;&gt;</span><br><span class="line">    &lt;img src=&#123;&#123; post.summary_img &#125;&#125; class=&quot;img-topic&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加到下图所示的位置</p>
<p><img src="/images/hexo-next-five-1.png" alt></p>
<p>这样的话，就可以使用 <code>summary_img: imageurl</code> 来设置文章封面了。</p>
<p>开启了文章封面的文章，我建议将 <code>&lt;!-- more --&gt;</code> 放在文章内容的开头，像这样：</p>
<p><img src="/images/hexo-next-five-2.png" alt></p>
<h1 id="网页加载进度条"><a href="#网页加载进度条" class="headerlink" title="网页加载进度条"></a>网页加载进度条</h1><p>打开 <code>/themes/next/layout/_partials/head.swing</code> 文件，在文件末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 网页加载条 --&gt;</span><br><span class="line">&lt;script src=&quot;https://addonepiece.github.io/js/src/pace.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后，打开 <code>/themes/source/css/_custom/custom.styl</code> 文件，在文件末尾添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">/*网页加载条*/</span><br><span class="line">/* This is a compiled file, you should be editing the file in the templates directory */</span><br><span class="line">.pace &#123;</span><br><span class="line">  -webkit-pointer-events: none;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace-inactive &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress &#123;</span><br><span class="line">  background: #1e92fb;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-progress-inner &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: absolute;</span><br><span class="line">  right: 0px;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100%;</span><br><span class="line">  box-shadow: 0 0 10px #e90f92, 0 0 5px #e90f92;</span><br><span class="line">  opacity: 1.0;</span><br><span class="line">  -webkit-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -moz-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -ms-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  -o-transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">  transform: rotate(3deg) translate(0px, -4px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.pace .pace-activity &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  top: 15px;</span><br><span class="line">  right: 15px;</span><br><span class="line">  width: 14px;</span><br><span class="line">  height: 14px;</span><br><span class="line">  border: solid 2px transparent;</span><br><span class="line">  border-top-color: #e90f92;</span><br><span class="line">  border-left-color: #e90f92;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  -webkit-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -moz-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -ms-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  -o-animation: pace-spinner 400ms linear infinite;</span><br><span class="line">  animation: pace-spinner 400ms linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -moz-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -moz-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -o-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -o-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-ms-keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; -ms-transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; -ms-transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes pace-spinner &#123;</span><br><span class="line">  0% &#123; transform: rotate(0deg); transform: rotate(0deg); &#125;</span><br><span class="line">  100% &#123; transform: rotate(360deg); transform: rotate(360deg); &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*网页加载条 END*/</span><br></pre></td></tr></table></figure></p>
<h1 id="开发环境自动刷新"><a href="#开发环境自动刷新" class="headerlink" title="开发环境自动刷新"></a>开发环境自动刷新</h1><p>在 <a href="/2016/09/03/hexo-next-one/">Hexo-NexT搭建个人博客（一）</a> 已经提到了本地调试三部曲：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server --debug</span><br></pre></td></tr></table></figure></p>
<p>然后我在项目的 <code>package.json</code> 中配成了这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server --debug&quot;,</span><br></pre></td></tr></table></figure></p>
<p>这样的话，我执行 <code>npm run dev</code> 就可以启动本地环境了，省去了前面需要分别敲三次命令的步骤。<br>为什么可以这样写，详情看这里：<br><a href="/2017/04/10/npm/">npm 全面介绍</a><br><a href="/2017/05/20/npm-two/">npm 的一个小细节</a></p>
<p>这样还不爽，我希望在写博客的时候，按下 <code>Ctrl + S</code> 后能自动刷新浏览器，看到实时的效果，省去了自己手动刷新浏览器的过程，在双屏下，真的很好用，一边写一边看。<br>具体的做法是:<br>在项目的根目录下添加一个 <code>gulpfile.js</code> 文件，文件内容参看 <a href="https://github.com/addonepiece/addonepiece.github.io/blob/resource/gulpfile.js" target="_blank" rel="noopener">源码</a>，这里我就不贴了。<br>然后安装 <code>gulpfile.js</code> 里面的依赖包。</p>
<p><code>gulpfile.js</code> 里面有一个 dev-proxy 方法，会代理本地的 4000 端口，并且监听文件变化，如有变化就会自动刷新浏览器。</p>
<p>最后，我们的开发步骤就变成这样了：<br>先打开一个 Terminal ，使用 <code>npm run dev</code> 开启本地的博客服务。<br>然后再开一个 Terminal，使用 <code>gulp</code> 命令来开启监听和代理服务。</p>
<h1 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h1><p>在项目的根目录下，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp -g</span><br><span class="line">cnpm install gulp-minify-css gulp-uglify gulp-htmlmin gulp --save-dev</span><br></pre></td></tr></table></figure></p>
<p>然后在 <code>gulpfile.js</code> 里面写上相关代码，详情查看 <a href="https://github.com/addonepiece/addonepiece.github.io/blob/resource/gulpfile.js" target="_blank" rel="noopener">源码</a> 。</p>
<p>然后执行 <code>gulp min</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>
<p>鼠标右键 -&gt; 查看网页源代码，可以看到已经是压缩过的。</p>
<h1 id="自定义页面与目录"><a href="#自定义页面与目录" class="headerlink" title="自定义页面与目录"></a>自定义页面与目录</h1><p>下面介绍两种方法：</p>
<p>第一种方法是使用 Hexo 提供的跳过渲染配置，适用于整个目录的设置。</p>
<p><img src="/images/hexo-next-five-3.png" alt></p>
<p>具体步骤，打开博客根目录_config.yml，找到其中 skip_render 配置项，这个用来配置 /source/ 中需要跳过渲染的文件或目录，例如希望跳过 /source/projects/ 里的所有文件渲染，可以配置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: projects/**</span><br></pre></td></tr></table></figure></p>
<p>匹配规则是一种类似正则的规则，官方给出的参考是<a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">这个</a>。另外在测试这个功能的时候发现，Hexo 的内部缓存不是特别好用，有时候你修改了配置但生成出来的内容不一定及时应用了新配置，最好在生成之前执行一下 hexo clean 命令，清除掉旧的生成文件和缓存。</p>
<p>第二种方法是给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个 html 格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>　　<br>这样，这个文件就不会经过模板渲染，最终发布到 /public/ 里的文件就是去掉标记后的文件的样子。</p>
<h1 id="关于-categories-和-tags-页面-Cannot-GET-的解决方案"><a href="#关于-categories-和-tags-页面-Cannot-GET-的解决方案" class="headerlink" title="关于 categories 和 tags 页面 Cannot GET  的解决方案"></a>关于 categories 和 tags 页面 Cannot GET  的解决方案</h1><p>有同学反馈在配置文件中配置了 categories 和 tags 后依然没有 categories 和 tags 页面，提示 Cannot GET。<br><img src="/images/hexo-next-five-4.png" alt></p>
<p>其实在配置了 categories 和 tags  后，还需要在 /source/ 目录下新建 categories 目录和 tags 目录，里面的要有 index.md 文件，并且文件开头不能少，也不能写错。<br><img src="/images/hexo-next-five-5.png" alt></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS 各种Hack手段]]></title>
      <url>https://addonepiece.github.io/2017/06/25/css-hack/</url>
      <content type="html"><![CDATA[<!-- <img src="/images/css-hack-1.png" alt="css-hack"> -->
<a id="more"></a>
<p>随着浏览器的发展，css hack 技术的使用应该越来越少了，但是在某些关键时刻以及综合的WEB应用或者老项目中，可能还需要使用 css hack 技术来解决一些问题。</p>
<h1 id="css-hack-分类"><a href="#css-hack-分类" class="headerlink" title="css hack 分类"></a>css hack 分类</h1><p>css hack 分类大致有 3 种表现形式：<strong>IE条件注释法</strong>、<strong>CSS属性前缀法</strong>以及<strong>选择器前缀法</strong>。</p>
<p>IE 条件注释法（即 HTML 条件注释 Hack）：<br>针对所有IE(注：IE10+ 已经不再支持条件注释)：<br><code>&lt;!--[if IE]&gt;IE浏览器显示的内容 &lt;![endif]--&gt;</code>；</p>
<p>针对 IE6 及以下版本：<br><code>&lt;!--[if lt IE 6]&gt;只在IE6-显示的内容 &lt;![endif]--&gt;</code>。<br>这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。</p>
<p>属性前缀法（即类内部 Hack）：例如 IE6 能识别下划线 <code>_</code> 和星号 <code>*</code>，IE7 能识别星号 <code>*</code>，但不能识别下划线 <code>_</code>，IE6~IE10 都认识 <code>\9</code>，但 firefox 前述三个都不能认识。</p>
<p>选择器前缀法（即选择器 Hack）：例如 IE6 能识别 <code>*html .class{}</code>，IE7 能识别 <code>*+html .class{}</code> 或者 <code>*:first-child+html .class{}</code>。</p>
<p>css hack 书写顺序，一般是将适用范围广、被识别能力强的 CSS 定义在前面。</p>
<h1 id="条件注释法"><a href="#条件注释法" class="headerlink" title="条件注释法"></a>条件注释法</h1><p><strong>语法：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- [if &lt;keywords&gt;? IE &lt;version&gt; ?]&gt;</span></span><br><span class="line"><span class="comment">HTML 代码块</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>取值：</strong><br><code>&lt;keywords&gt;</code><br>if 条件共包含 6 种选择方式：是否、大于、大于或等于、小于、小于或等于、非指定版本<br><strong>是否</strong>：指定是否 IE 或 IE 某个版本。关键字：空<br><strong>大于</strong>：选择大鱼指定版本的 IE 版本。关键字：gt<br><strong>大于或等于</strong>：选择大于或等于指定版本的 IE 版本。关键字：gte<br><strong>小于</strong>：选择小于指定版本的IE版本。关键字：lt<br><strong>小于或等于</strong>：选择小于或等于指定版本的IE版本。关键字：lte<br><strong>非指定版本</strong>：选择除指定版本外的所有IE版本。关键字：!</p>
<p><strong>说明：</strong><br>用于选择 IE 浏览器及IE的不同版本</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">只在IE下生效</span><br><span class="line">&lt;!--[if IE]&gt;</span><br><span class="line">这段文字只在IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE6下生效</span><br><span class="line">&lt;!--[if IE 6]&gt;</span><br><span class="line">这段文字只在IE6浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE6以上版本生效</span><br><span class="line">&lt;!--[if gte IE 6]&gt;</span><br><span class="line">这段文字只在IE6以上(包括)版本IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">只在IE8上不生效</span><br><span class="line">&lt;!--[if ! IE 8]&gt;</span><br><span class="line">这段文字在非IE8浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line"></span><br><span class="line">非IE浏览器生效</span><br><span class="line">&lt;!--[if !IE]&gt;</span><br><span class="line">这段文字只在非IE浏览器显示</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure>
<p>需要说明的是，IE10和11已经不支持这种条件注释法了。<a href="/yu/css-hack.html" target="_blank">运行上面示例</a></p>
<h1 id="CSS-属性前缀法"><a href="#CSS-属性前缀法" class="headerlink" title="CSS 属性前缀法"></a>CSS 属性前缀法</h1><p><strong>语法：</strong><br>selector {<hack>?property:value<hack>?;}</hack></hack></p>
<p><strong>取值：</strong><br><code>_</code>：选择 IE6 及以下。连接线（中划线）（-）亦可使用，为了避免与某些带中划线的属性混淆，所以使用下划线（_）更为合适。<br><code>*</code>：选择 IE7 及以下。诸如：（+）与（#）之类的均可使用，不过业界对（*）的认知度更高。<br><code>\9</code>：选择 IE6+。<br><code>\0</code>：选择 IE8+ 和 Opera。<br><code>[;property:value;];</code>：选择 webkit 核心浏览器（Chrome,Safari）。IE7 及以下也能识别。中括号内外的 3 个分号必须保留，第一个分号前可以是任意规则或任意多个规则。<br><code>[;color:#f00;];</code> 与 <code>[color:#f00;color:#f00;];</code> 与 <code>[margin:0;padding:0;color:#f00;];</code> 是等价的。生效的始终是中括号内的最后一条规则，所以通常选用第一种写法最为简洁。</p>
<p><strong>说明：</strong><br><strong>选择不同的浏览器及版本</strong>尽可能减少对 CSS Hack 的使用。Hack 有风险，谨慎使用。<br>一些 CSS Hack 由于浏览器存在交叉认识，所以需要通过层层覆盖的方式来实现对不同浏览器进行 Hack 的。如下面这个例子：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#090</span>\<span class="number">9</span>; <span class="comment">/* For IE8+ */</span></span><br><span class="line">  *color:#f00;  /* For IE7 and earlier */</span><br><span class="line">  _<span class="selector-tag">color</span>:<span class="selector-id">#ff0</span>;  <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-yellow">上述 Hack 均需运行在标准模式下，若在怪异模式下运行，这些 Hack 将会被不同版本的 IE 相互识别，导致失效。</p>


<h1 id="选择器前缀法"><a href="#选择器前缀法" class="headerlink" title="选择器前缀法"></a>选择器前缀法</h1><p><strong>语法：</strong><br><code>&lt;hack&gt;selector{sRules}</code></p>
<p><strong>说明：</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#090</span>;&#125;       <span class="comment">/* For IE6 and earlier */</span></span><br><span class="line">* + <span class="selector-tag">html</span> <span class="selector-class">.test</span>&#123;<span class="attribute">color</span>:<span class="number">#ff0</span>;&#125;     <span class="comment">/* For IE7 */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:lang(zh-cn)</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125;  <span class="comment">/* For IE8+ and not IE */</span></span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:nth-child(1)</span>&#123;<span class="attribute">color</span>:<span class="number">#0ff</span>;&#125; <span class="comment">/* For IE9+ and not IE */</span></span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-yellow">上述代码中的3,4两行就是典型的利用能力来进行选择的 CSS Hack。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Service worker 实现加速/离线访问博客]]></title>
      <url>https://addonepiece.github.io/2017/06/08/service-worker/</url>
      <content type="html"><![CDATA[<p>有一个困扰 web 用户多年的难题——丢失网络连接。即使是世界上最好的 web app，如果下载不了它，也是非常糟糕的体验。如今虽然已经有很多种技术去尝试着解决这一问题。而随着<strong>离线页面</strong>的出现，一些问题已经得到了解决。有一个叫做 APP Cache 的 API 可以提供离线体验，但它的问题比较多。最重要的问题是，仍然没有一个好的统筹机制对资源缓存和自定义的网络请求进行控制。</p>
<h1 id="Service-worker"><a href="#Service-worker" class="headerlink" title="Service worker"></a>Service worker</h1><p>于是 HTML5 提出了 Service Worker，Service worker 提供了很多新的能力，使得 web app 拥有与 nativeapp 相同的离线体验、消息推送体验。</p>
<a id="more"></a>
<p>Service worker 是一段脚本，它有能力往我们的浏览器中写入缓存，过滤网络请求，将缓存内容作为网络响应结果输出。<br><strong>带来的效果是显而易见的：</strong></p>
<p id="div-border-top-green">1、当我们缓存了某些资源的时候，当我们再次请求该资源的时候，我们便可以使用缓存的内容，这样的话，就可以减少网络请求了，网站的打开速度明显提升。<br>2、如果我们将网站所需的资源缓存下来了以后，这个时候即使计算机没有网络，依然可以打开这个网站，即离线访问。<br></p>

<h1 id="Service-worker-使用场景"><a href="#Service-worker-使用场景" class="headerlink" title="Service worker 使用场景"></a>Service worker 使用场景</h1><p>现在很流行基于 GitHub page 和 markdown 的静态 blog ，非常适合技术的思维和习惯，针对不同的语言都有一些优秀的静态 blog 系统出现，如 Jekyll/Ruby，Pelican/Python，Hexo/NodeJs ，由于静态内容的特性非常适合做缓存来加速页面的访问，就利用 Service worker 来实现加速，结果是除了 PageSpeed，CDN 这些常见的服务器和网络加速之外，通过客户端实现了更好的访问体验。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>你现在可以断开你的网络，或者用浏览器中模拟无网络的情景，继续访问本站。<br><i style="color:red;">如何在浏览器中模拟无网络环境？(在 Network 中选择 offline)</i><br><img src="/images/service-worker-1.png" alt></p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="注册-Service-worker"><a href="#注册-Service-worker" class="headerlink" title="注册 Service worker"></a>注册 Service worker</h2><p>要安装 Service worker，你需要在你的页面上注册它。下面的代码会告诉浏览器你的 Service worker 脚本放在哪里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">    <span class="comment">// 注册Service Worker scope表示作用的页面的path</span></span><br><span class="line">    <span class="comment">// register函数返回Promise</span></span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>,&#123;<span class="attr">scope</span>: <span class="string">'/'</span>&#125;) </span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">registration</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(registration);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Service Worker is not supported in this browser.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>以上代码会先检测 Service worker 在浏览器中是否可用，可用的话一个 Service worker（/service-worker.js）将被注册，如果这个 Service worker 已经注册过了，浏览器这会忽略以上代码。<br><code>{scope: &#39;/&#39;}</code> 表示 Service worker 作用的范围。<br>需要说明的是 service-worker.js 文件被放在这个域的根目录下，这意味着 service worker 是跟网站同源的。换句话说，这个 service worker 将会获取到这个域下的所有 fetch 事件。<br>如果 service worker 文件注册到 /example/service-worker.js ，那么 service worker 只能收到 /example/ 路径下的 fetch 事件（比如： /example/page1/, /example/page2/）。<br>如果 service worker 文件注册到根目录下 /service-worker.js ，同时 <code>{scope: &#39;/example&#39;}</code> ，那么 service worker 也只能收到 /example/ 路径下的 fetch 事件。</p>
<p>service-worker.js 文件，我建议是放在网站的跟目录下，scope 不作修改，这样 service worker 拥有最大的使用范围。</p>
<h2 id="安装-Service-worker"><a href="#安装-Service-worker" class="headerlink" title="安装 Service worker"></a>安装 Service worker</h2><p><img src="/images/service-worker-2.png" alt></p>
<p><a href="https://addonepiece.github.io/service-worker.js">我的 service-worker.js</a><br>关于这个 service-worker.js 怎么写，具体可以查看 API ，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">MDN Service Worker API</a>。</p>
<p id="div-border-left-red">注意：将 service-worker.js 放到域的根目录下哦，这样 Service worker 才能拥有最大的使用范围。</p>

<p>现在你可以到 chrome://inspect/#service-workers 这里，检查 service worker 是否对你的网站启用了。<br>或者在 chrome://serviceworker-internals/ 中管理你的 Service worker 。<br>或者在浏览器的开发者工具中也可以详细的查看 service worker 的缓存。<br><img src="/images/service-worker-3.png" alt></p>
<h1 id="Service-worker-核心-API"><a href="#Service-worker-核心-API" class="headerlink" title="Service worker 核心 API"></a>Service worker 核心 API</h1><p><img src="/images/service-worker-4.png" alt></p>
<h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p><img src="/images/service-worker-5.png" alt><br>install 是安装一个 service worker 缓存，使用方法可以是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set the callback for the install step</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform install steps</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在 install 的 callback 中，我们需要执行一下步骤：<br>1、开启一个缓存<br>2、缓存我们的文件<br>3、确定所有的资源是否要被缓存</p>
<h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>fetch 用来监听用户的网络请求，并给出回应。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.respondWith(</span><br><span class="line">    caches.match(event.request)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Cache hit - return response</span></span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fetch(event.request);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="activate"><a href="#activate" class="headerlink" title="activate"></a>activate</h2><p>你的 Service worker 总会有要更新的时候。在那时，你需要按照一下步骤来更新：<br>1、更新你 service worker 的 JavaScript 文件。<br>2、更新后的 service worker 启动并触发 install 事件。<br>3、此时，当前页面生效的依然是老版本的 service worker ，新的 service worker 会进入“waitting”状态。<br>4、当页面关闭后，来的 service worker 会被干掉，新的 service worker 接管页面。<br>5、一旦新的 service worker 生效后会触发 active 事件。</p>
<p>一个典型的 activete 事件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123; </span><br><span class="line"><span class="comment">// 监听worker的activate事件</span></span><br><span class="line">  event.waitUntil( <span class="comment">// 延迟activate事件直到</span></span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">keys</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(keys.map(<span class="function"><span class="keyword">function</span>(<span class="params">key, i</span>)</span>&#123; <span class="comment">// 清除旧版本缓存</span></span><br><span class="line">        <span class="keyword">if</span>(key !== CACHE_VERSION)&#123;</span><br><span class="line">          <span class="keyword">return</span> caches.delete(keys[i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h1><p>在网站 A 中，隐藏一个 iframe ，在这个 iframe 中注册一个 service worker ，这个 service worker 会缓存网站 B 所需的资源。<br>从未访问过网站 B，但网站已经在你的设备上预加载过了，一切仅仅因为你访问过网站 A。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://B.com/iframe.html"</span> <span class="attr">style</span>=<span class="string">"width: 0; height: 0; border: 0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;HTML5 For Web Designers&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">if ('serviceWorker' in navigator) &#123;</span></span><br><span class="line"><span class="regexp">  navigator.serviceWorker.register('/</span>serviceworker.js<span class="string">');</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Service-worker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm 的一个小细节]]></title>
      <url>https://addonepiece.github.io/2017/05/20/npm-two/</url>
      <content type="html"><![CDATA[<p>在使用 electron 构建桌面应用的时候，在 package.json 里面的 scripts 字段是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;electron .&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>我们可以执行 npm start ，那么它就会执行 <code>electron .</code> 这个命令。<br>那么如果我们直接执行 <code>electron .</code><br>由于我们没有将 electron 加入到全局，所以不行。<br>那么为什么 npm start 可以执行呢？</p>
<a id="more"></a>
<p>这就涉及到 npm run 命令的一个小细节了。<br>npm run xxx 可以执行 package.json 里面 scripts 里面对应的命令，并且是 shell 脚本。但是在执行的时候有一个小处理：</p>
<p><strong>npm run 新建的这个 shell ，会将当前目录的 node_modules/.bin 子目录加入 PATH 变量，执行结束后，再将 PATH 变量恢复原样。</strong></p>
<p>这就解释了，没有安装全局的 electron ，直接运行 <code>electron .</code> 是不行的，但是使用 <code>npm start</code> 来运行 <code>electron .</code> 可以。</p>
<p><strong>下面介绍一个使用 npm 的实践：</strong><br>很多朋友使用 hexo 来构建博客；hexo 是基于 Node.js 产物，用它发表博文，很是方便；你只需 hexo clean, hexo g, hexo d三个命令即可；而且每一个命令必须等待前一个命令运行完成。文章数据一多，一套命令打下来，也得 20s+；如果略懂 npm，在 package.js 中加入点命名，例如像这样；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"sudo hexo clean &amp;&amp; sudo hexo g &amp;&amp; sudo gulp &amp;&amp; sudo hexo d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么 只需运行 npm start 就好，可将时间消耗缩短至 2s节省时间虽说不多，却也是数量级的提升，而且代价只是那么小，并一劳永逸。所以有必要对此。</p>
<p>关于 npm 的详细学习，可以查看：<a href="https://addonepiece.github.io/2017/04/10/npm/">npm 全面介绍</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gulp 详解与使用]]></title>
      <url>https://addonepiece.github.io/2017/05/01/gulp/</url>
      <content type="html"><![CDATA[<h1 id="什么是-gulp"><a href="#什么是-gulp" class="headerlink" title="什么是 gulp"></a>什么是 gulp</h1><p><a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a> 是一个前端构建工具，它能通过自动执行常见任务，比如编译预处理 CSS ，压缩 JavaScript 和刷新浏览器，来改进网站开发的过程，从而使开发更加快速高效。</p>
<h1 id="为什么要用-gulp"><a href="#为什么要用-gulp" class="headerlink" title="为什么要用 gulp"></a>为什么要用 gulp</h1><p>与 grunt 相比，gulp 无需写一大堆繁杂的配置参数，<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="noopener">API</a>（<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">中文 API</a>） 也非常简单，学习起来很容易，而且 gulp 使用的是 nodejs 中 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener">stream</a> 来读取和操作数据，其速度更快。<br>gulp 有庞大的生态圈，且每天都在发展。依靠成千上万可供选择的插件，你可以利用 gulp 自动完成几乎任何事。</p>
<h1 id="如何使用-gulp"><a href="#如何使用-gulp" class="headerlink" title="如何使用 gulp"></a>如何使用 gulp</h1><h2 id="Installing-Gulp"><a href="#Installing-Gulp" class="headerlink" title="Installing Gulp"></a>Installing Gulp</h2><p>新版的 gulp 命令行工具已经改名为 gulp-cli 。<br>如果你之前安装了全局的 gulp 。在使用新的 gulp-cli 之前，执行命令<br> <code>npm rm --global gulp</code> ，将之前的全局 gulp 卸掉。</p>
<a id="more"></a>
<h3 id="Install-the-gulp-command"><a href="#Install-the-gulp-command" class="headerlink" title="Install the gulp command"></a>Install the gulp command</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br></pre></td></tr></table></figure>
<h3 id="Install-gulp-in-your-devDependencies"><a href="#Install-gulp-in-your-devDependencies" class="headerlink" title="Install gulp in your devDependencies"></a>Install gulp in your devDependencies</h3><p>Run this command in your project directory<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure></p>
<h2 id="Create-a-gulpfile"><a href="#Create-a-gulpfile" class="headerlink" title="Create a gulpfile"></a>Create a gulpfile</h2><p>Create a file called gulpfile.js in your project root with these contents:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// place code for your default tash here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="Test-it-out"><a href="#Test-it-out" class="headerlink" title="Test it out"></a>Test it out</h2><p>Run the gulp command in your projct directory:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure></p>
<h1 id="gulp-API"><a href="#gulp-API" class="headerlink" title="gulp API"></a>gulp API</h1><p>gulp 的核心 API 有四个：gulp.task() 、 gulp.src() 、 gulp.dest() 、 gulp.watch() 。<br><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="noopener">gulp API</a><br><a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="noopener">gulp API 中文</a></p>
<p>下面详细介绍一下：</p>
<h2 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h2><p>gulp.src() 可以读取你需要操作的文件，相比于 Grunt 主要以文件为媒介来运行它的工作流，gulp 使用的是 Nodejs 中的 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener">stream</a> 流，首先获取到需要的 stream ，然后可以通过 stream 的 pipe() 方法把流导入到你想要的地方，比如 gulp 的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以 gulp 是以 stream 为媒介的，它不需要频繁的生成临时文件，这也是 gulp 的速度比 Grunt 快的一个原因。再回到正题上来，gulp.src() 方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流（Vinyl files），这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(globs [, options])</span><br></pre></td></tr></table></figure></p>
<p>gulp 用到的 glob 的匹配规则以及一些文件匹配技巧。<br>gulp 内部使用了 node-glob 模块来实现其文件匹配功能。我们可以使用下面这些特殊的字符来匹配我们想要的文件：</p>
<ul>
<li><code>*</code> 匹配文件路径中的 0 个或多个字符，但不会匹配路径分配符，除非路径分隔符出现在末尾</li>
<li>** 匹配路径中的 0 个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。</li>
<li>? 匹配文件路径中的一个字符（不会匹配路径分隔符）</li>
<li>[…] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为 ^ 或 ! 时，则表示不匹配方括号中出现的其他字符中的任意一个，类似 js 正则表达式中的用法。</li>
<li>!(pattern|pattern|pattern) 匹配任何与括号中给定的任一模式都不匹配的</li>
<li>?(pattern|pattern|pattern) 匹配括号中给定的任一模式 0 次或 1 次，类似于 js 正则中的(pattern|pattern|pattern)?</li>
<li>+(pattern|pattern|pattern) 匹配括号中给定的任一模式至少 1 次，类似于正则中的(pattern|pattern|pattern)+</li>
<li><code>*(pattern|pattern|pattern)</code> 匹配括号中的给定的任一模式 0 次或多次，类似于 js 正则中的 <code>(pattern|pattern|pattern)*</code></li>
<li>@(pattern|pattern|pattern) 匹配括号中给定的任一模式 1 次，类似于 js 正则中的(pattern|pattern|pattern)</li>
</ul>
<p>下面以一系列例子来加深理解</p>
<ul>
<li><code>*</code> 能匹配 a.js 、 x.y 、 abc 、 abc/ ，但不能匹配 a/b.js</li>
<li><code>*.*</code> 能匹配 a.js 、 style.css 、 a.b 、 x.y</li>
<li><code>*/*/*.js</code> 能匹配 a/b/c.js 、 x/y/z.js ，不能匹配 a/b.js 、a/b/c/d.js</li>
<li>** 能匹配 abc 、 a/b.js 、 a/b/c.js 、 x/y/z 、x/y/z/a.b ，能用来匹配所有的目录和文件</li>
<li>*<em>/</em>.js 能匹配 foo.js 、 a/foo.js 、 a/b/foo.js 、 a/b/c/foo.js</li>
<li>a/**/z 能匹配 a/z 、 a/b/z 、 a/b/c/z 、 a/d/g/h/r/z</li>
<li><code>a/**b/z</code> 能匹配 a/b/z 、 a/fb/z ，但不能匹配 a/x/gb/z ，因为只有单 ** 单独出现才能匹配多级目录</li>
<li>?.js 能匹配 a.js 、 b.js 、 c.js</li>
<li>a?? 能匹配 a.b 、 abc ，但不能匹配 ab/ ，因为它不会匹配路径分隔符</li>
<li>[xyz].js 只能匹配 x.js 、 y.js 、 z.js ，不会匹配 xy.js 、 xyz.js 等，整个中括号只代表一个字符</li>
<li>[^xyz].js 能匹配 a.js 、 b.js 、 c.js 等，不能匹配 x.js 、 y.js 、 z.js</li>
</ul>
<p>当有多种匹配模式时可以使用数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组的方式来匹配多种文件</span></span><br><span class="line">gulp.src([<span class="string">'js/*.js'</span>,<span class="string">'css/*.css'</span>,<span class="string">'*.html'</span>])</span><br></pre></td></tr></table></figure></p>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上 ! 即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.src([*.js,<span class="string">'!b*.js'</span>])  <span class="comment">//匹配所有 js 文件，但排除掉以 b 开头的 js 文件</span></span><br><span class="line">gulp.src([<span class="string">'!b*.js'</span>,*.js])  <span class="comment">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</span></span><br></pre></td></tr></table></figure></p>
<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式想加起来得到的结果。展开的例子如下：</p>
<ul>
<li>a{b,c}d 会展开为 abd 、 acd</li>
<li>a{b,}c 会展开为 abc 、 ac</li>
<li>a{0..3}d 会展开为 a0d 、 a1d 、 a2d 、 a3d </li>
<li>a{b,c{d,e}f}g 会展开为 abg 、 acdfg 、 acefg</li>
<li>a{b,c}d{e,f}g 会展开为 abdeg 、 acdeg 、 abdfg 、 abdeg</li>
</ul>
<h2 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest()"></a>gulp.dest()</h2><p>gulp.dest() 方法是用来写文件的，其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.dest(path[, options])</span><br></pre></td></tr></table></figure></p>
<p><strong>path</strong> 为写入文件的路径<br>我们给 gulp.dest() 传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当作是目录名，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line">gulp.src(<span class="string">"script/jquery.js"</span>).pipe(gulp.dest(<span class="string">"dist/foo.js"</span>));</span><br><span class="line"><span class="comment">// 最终生成的文件路径为 dist/foo.js/jquery.js ，而不是 dist/foo.js</span></span><br></pre></td></tr></table></figure></p>
<p>要想改变文件名，可以使用插件 gulp-rename<br>下面说说生成的文件路径与我们给 gulp.dest() 方法传入的路径参数之间的关系。<br>gulp.dest(path) 生成的文件路径是我们传入的 path 参数后面再加上 gulp.src() 中有通配符开始出现的那部分路径。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/*.js</span></span><br><span class="line">gulp.src(<span class="string">"script/**/*.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//最后生成的文件路径为 dist/**/*.js</span></span><br><span class="line"><span class="comment">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ，则生成的文件路径为 dist/jquery/jquery.js</span></span><br></pre></td></tr></table></figure></p>
<p>再举更多一点的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"script/avalon/avalon.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//没有通配符出现的情况，最后生成的文件路径为 dist/avalon.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/**/underscore.js"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/underscore.js</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/util/underscore.js</span></span><br><span class="line"><span class="comment">//则最后生成的文件路径为dist/util/underscore.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/*"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//有通配符出现的那部分路径为*</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/zepto.js</span></span><br><span class="line"><span class="comment">//则最后生成的文件路径为dist/zepto.js</span></span><br></pre></td></tr></table></figure></p>
<p>通过指定 gulp.src() 方法配置参数中的 base 属性，我们可以灵活的来改变 gulp.dest() 生成的文件路径。<br>当我们没有在 gulp.src() 方法配置参数中的 base 属性，base 的默认值为通配符开始出现之前那部分路径，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"app/src/**/*.css"</span>) <span class="comment">//此时base的值为 app/src</span></span><br></pre></td></tr></table></figure></p>
<p>上面我们说的 gulp.dest() 所生成的文件路径的规则，其实也可以理解成，用我们给 gulp.dest() 传入的路径替换掉 gulp.src() 中的 base 路径，最终得到生成文件的路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"app/src/**/*.css"</span>).pipe(gulp.dest(<span class="string">"dist"</span>));</span><br><span class="line"><span class="comment">//此时base的值为app/src，也就是说它的base路径为app/src</span></span><br><span class="line"><span class="comment">//设该模式匹配到了文件app/src/css/normal.css</span></span><br><span class="line"><span class="comment">//用dist替换掉base路径，最终得到dist/css/normal.css</span></span><br></pre></td></tr></table></figure></p>
<p>所以改变 base 路径后，gulp.dest() 生成的文件路径也会改变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gulp.src(<span class="string">"script/lib/*.js"</span>).pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line"><span class="comment">//没有配置base参数，此时默认的base路径为script/lib</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class="line"><span class="comment">//生成的文件路径为build/jquery.js</span></span><br><span class="line"></span><br><span class="line">gulp.src(<span class="string">"script/lib/*.js"</span>, &#123;<span class="attr">base</span>: <span class="string">"script"</span>&#125;).pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line"><span class="comment">//配置了base参数，此时base路径为script</span></span><br><span class="line"><span class="comment">//假设匹配到的文件为script/lib/jquery.js</span></span><br><span class="line"><span class="comment">//此时生成的文件路径为build/lib/jquery.js</span></span><br></pre></td></tr></table></figure></p>
<p>用 gulp.dest() 把文件流写入文件后，文件流仍然可以继续使用。</p>
<h2 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task()"></a>gulp.task()</h2><p>gulp.task 方法用来定义任务，内部使用的是 Orchestrator ，其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(name[, deps], fn)</span><br></pre></td></tr></table></figure></p>
<p><strong>name</strong> 为任务名，如果你需要在命令行中运行你的某些任务，那么，请不要在名字中使用空格。<br><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数。<br><strong>fn</strong> 为任务函数，我们把任务要执行的代码都要写在里面。该参数也是可选的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"mytask"</span>, [<span class="string">"array"</span>, <span class="string">"of"</span>, <span class="string">"task"</span>, <span class="string">"names"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//定义一个有依赖的任务</span></span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>关于 gulp.task() ，我们需要知道执行多个任务时怎么来控制任务执行的顺序。<br>gulp 中执行多个任务，可以通过任务依赖来实现。例如我想要执行 one ，two ，three 这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]);</span><br></pre></td></tr></table></figure></p>
<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp 并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'one'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// one是一个异步执行的任务</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"one is done"</span>);</span><br><span class="line">  &#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//two任务虽然依赖于one任务，但并不会等到one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/gulp-1.png" alt><br>上面的例子中我们执行 two 任务时，会先执行 one 任务，但不会去等待 one 任务中的异步操作完成后再执行 two 任务，而是紧接着执行 two 任务。因为 one 任务耗时 3 秒，所以 two 任务会在 one 任务中的异步操作完成之前就执行了。</p>
<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？<br>有三种方法可以实现：</p>
<p>第一：在异步操作完成后执行一个回调函数来通知 gulp 这个异步任务已经完成，这个回调函数就是任务函数的第一个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//cb为任务函数提供的回调，用来通知任务已经完成</span></span><br><span class="line">  <span class="comment">//one是一个异步执行的任务</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"one is done"</span>);</span><br><span class="line">    cb(); <span class="comment">//执行回调，表示这个异步任务已经完成</span></span><br><span class="line">  &#125;,<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这时two任务会在one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>第二：定义任务时返回一个流对象。适用于任务就是操作 gulp.src 获取到的流的情况。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stream = gulp.src(<span class="string">"client/**/*.js"</span>)</span><br><span class="line">      .pipe(dosomething()) <span class="comment">//dosomething()中有某些异步操作</span></span><br><span class="line">      .pipe(gulp.dest(<span class="string">"build"</span>));</span><br><span class="line">  <span class="keyword">return</span> stream;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是two任务会在one任务中的异步操作完成后再执行</span></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>第三：返回一个 promise 对象，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>); <span class="comment">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></span><br><span class="line">gulp.task(<span class="string">"one"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> deferred = Q.defer();</span><br><span class="line">  <span class="comment">//做一些异步操作</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    deferred.resolve();</span><br><span class="line">  &#125;,<span class="number">5000</span>);</span><br><span class="line">  <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"two"</span>, [<span class="string">"one"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"two is done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>关于 gulp.task() ，主要的就是要清除当依赖异步任务时要如何处理。</p>
<h2 id="gulp-watch"><a href="#gulp-watch" class="headerlink" title="gulp.watch()"></a>gulp.watch()</h2><p>gulp.watch() 用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(glob[, opts], tasks);</span><br></pre></td></tr></table></figure></p>
<p><strong>glob</strong> 为要监视的文件匹配模式，规则和用法与 gulp.src() 方法中的 glob 相同。<br><strong>opts</strong> 为一个可选的配置对象，通常不需要用到。<br><strong>tasks</strong> 为文件变化后要执行的任务，为一个数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"uglify"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">"reload"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//do something</span></span><br><span class="line">&#125;);</span><br><span class="line">gulp.watch(<span class="string">"js/**/*.js"</span>, [<span class="string">"uglify"</span>,<span class="string">"reload"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>gulp.watch(glob [,opts, cb])<br><strong>glob</strong> 和 <strong>opts</strong> 参数与第一种用法相同<br><strong>cb</strong> 参数为一个函数。每当监视的文件发生变化时，就会调用这个函数，并且会给它传入一个对象，该对象包含了文件变化的一些信息，type 属性为变化的类型，可以是 added 、changed 、deleted ，path 属性为发生变化的文件的路径<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.watch(<span class="string">"js/**/*.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.type); <span class="comment">//变化类型added为新增，deleted为删除，changed为改变</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.path); <span class="comment">//变化的文件的路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="gulp-的插件"><a href="#gulp-的插件" class="headerlink" title="gulp 的插件"></a>gulp 的插件</h1><p>gulp 本身虽然不能完成很多任务，但它有大量插件可用，我们可以在 <a href="http://gulpjs.com/plugins/" target="_blank" rel="noopener">插件页面</a> 或者在 npm 搜索 gulpplugin 。<br>列一些很棒的 plugin ：</p>
<ul>
<li><a href="https://www.npmjs.com/package/gulp-jshint/" target="_blank" rel="noopener">JSHint</a> ： js代码检查分析工具</li>
<li><a href="https://www.npmjs.com/package/gulp-coffee/" target="_blank" rel="noopener">gulp-coffee</a> ： 编译CoffeeScript</li>
<li><a href="https://www.npmjs.com/package/gulp-mocha" target="_blank" rel="noopener">gulp-mocha</a> ： 执行Mocha测试</li>
<li><a href="https://www.npmjs.com/package/gulp-bump" target="_blank" rel="noopener">gulp-bump</a> ： 更新版本号</li>
<li><a href="https://www.npmjs.com/package/gulp-sass" target="_blank" rel="noopener">gulp-sass</a> ： sass 编译</li>
<li><a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="noopener">browser-sync</a> ： 浏览器自动刷新</li>
<li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a> ： 代码压缩</li>
<li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="noopener">gulp-concat</a> ： 合并</li>
<li><a href="https://www.npmjs.com/package/gulp-eslint" target="_blank" rel="noopener">gulp-eslint</a> ： 支持 ES6 JSX</li>
</ul>
<h1 id="gulp-命令行参数"><a href="#gulp-命令行参数" class="headerlink" title="gulp 命令行参数"></a>gulp 命令行参数</h1><ul>
<li><code>-v</code> 或 <code>--version</code> 会显示全局和项目本地所安装的 gulp 版本号</li>
<li><code>--require &lt;module path&gt;</code> 将会在执行之前 require 一个模块。这对于一些语言编译器或者需要其他应用的情况来说很有用。你可以使用多个 <code>--require</code></li>
<li><code>--gulpfile &lt;gulpfile path&gt;</code> 手动指定一个 gulpfile 的路径，这在你有很多个 gulpfile 的时候很有用。这也会将 CWD 设置到该 gulpfile 所在目录</li>
<li><code>--cwd &lt;dir path&gt;</code> 手动指定 CWD 。定义 gulpfile 查找的位置，此外，所有的相应的依赖（require）会从这里开始计算相对路径</li>
<li><code>-T</code> 或 <code>--tasks</code> 会显示所指定 gulpfile 的 task 依赖树</li>
<li><code>--tasks-simple</code> 会以纯文本的方式显示所载入的 gulpfile 中的 task 列表</li>
<li><code>--color</code> 强制 gulp 和 gulp 插件显示颜色，即便没有颜色支持</li>
<li><code>--no-color</code> 强制不显示颜色，即便检测到有颜色支持</li>
<li><code>--silent</code> 禁止所有的 gulp 日志</li>
</ul>
<p>命令行会在 process.env.INIT_CW 中记录它是从哪里被运行的。</p>
<h1 id="tip"><a href="#tip" class="headerlink" title="tip"></a>tip</h1><p>1、gulp 写进项目 package.json 文件的依赖有什么作用<br>方便别人查看你项目中有些什么依赖，而且在项目目录下执行 npm install 命令会安装项目 package.json 中的所有依赖模块，这样就能简化项目的安装程序了，不用一个一个模块去安装啊。</p>
<p>2、gulp 中着重了解 gulp.task() 如何处理依赖任务是耗时操作或者异步操作的情况。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[npm 全面介绍]]></title>
      <url>https://addonepiece.github.io/2017/04/10/npm/</url>
      <content type="html"><![CDATA[<!-- <img src="http://i1.piimg.com/588926/30e7b49044d5cfc4.png" alt="summary-img-src-npm"> -->
<a id="more"></a>
<h1 id="什么是-NPM"><a href="#什么是-NPM" class="headerlink" title="什么是 NPM"></a>什么是 NPM</h1><p>npm 之于 Node.js ，就像 pip 之于 Python， gem 之于 Ruby， pear 之于 PHP 。</p>
<p>npm 是 Node.js 官方提供的包管理工具，他已经成了 Node.js 包的标准发布平台，用于 Node.js 包的发布、传播、依赖控制。npm 提供了命令行工具，使你可以方便地下载、安装、升级、删除包，也可以让你作为开发者发布并维护包。</p>
<h1 id="为什么要使用-NPM"><a href="#为什么要使用-NPM" class="headerlink" title="为什么要使用 NPM"></a>为什么要使用 NPM</h1><p>npm 是随同 Node.js 一起安装的包管理工具，能解决 Node.js 代码部署上的很多问题，常见的场景有以下几种：</p>
<ul>
<li>允许用户从 npm 服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从 npm 服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到 npm 服务器供别人使用。</li>
</ul>
<p>npm 的背后，是基于 couchdb 的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>
<h1 id="如何使用-NPM"><a href="#如何使用-NPM" class="headerlink" title="如何使用 NPM"></a>如何使用 NPM</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>npm 不需要单独安装。在安装 Node 的时候，会连带一起安装 npm 。但是，Node 附带的 npm 可能不是最新版本，最后用下面的命令，更新到最新版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install npm@latest -g</span><br></pre></td></tr></table></figure></p>
<p>如果是 Window 系统使用以下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure></p>
<p>也就是使用 npm 安装自己。之所以可以这样，是因为 npm 本身与 Node 的其他模块没有区别。</p>
<p>然后，运行下面的命令，查看各种信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 命令列表</span></span><br><span class="line">$ npm <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各个命令的简单用法</span></span><br><span class="line">$ npm -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 的版本</span></span><br><span class="line">$ npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 的配置</span></span><br><span class="line">$ npm config list -l</span><br></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="npm-init"><a href="#npm-init" class="headerlink" title="npm init"></a>npm init</h3><p>npm init 用来初始化生成一个新的 package.json 文件。它会向用户提问一系列问题，如果你觉得不用修改默认配置，一路回车就可以了。<br>如果使用了 -f（代表force）、-y（代表yes），则跳过提问阶段，直接生成一个新的 package.json 文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-set"><a href="#npm-set" class="headerlink" title="npm set"></a>npm set</h3><p>npm set 用来设置环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">set</span> init-author-name <span class="string">'Your name'</span></span><br><span class="line">$ npm <span class="built_in">set</span> init-author-email <span class="string">'Your email'</span></span><br><span class="line">$ npm <span class="built_in">set</span> init-author-url <span class="string">'http://yourdomain.com'</span></span><br><span class="line">$ npm <span class="built_in">set</span> init-license <span class="string">'MIT'</span></span><br></pre></td></tr></table></figure></p>
<p>上面命令等于为 npm init 设置了默认值，以后执行 npm init 的时候，package.json 的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的 ~/.npmrc文件，使得用户不用每个项目都输入。如果某个项目有不同的设置，可以针对该项目运行 npm config。</p>
<h3 id="npm-info"><a href="#npm-info" class="headerlink" title="npm info"></a>npm info</h3><p>npm info 命令可以查看每个模块的具体信息。比如，查看 underscore 模块的信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm info underscore</span><br></pre></td></tr></table></figure></p>
<p>上面命令返回一个 JavaScript 对象，包含了 underscore 模块的详细信息。这个对象的每个成员，都可以直接从 info 命令查询。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm info underscore description</span><br><span class="line"></span><br><span class="line">$ npm info underscore homepage</span><br><span class="line"></span><br><span class="line">$ npm info underscore version</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-search"><a href="#npm-search" class="headerlink" title="npm search"></a>npm search</h3><p>npm search 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm search &lt;搜索词&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-list"><a href="#npm-list" class="headerlink" title="npm list"></a>npm list</h3><p>npm list 命令以树形结构列出当前项目安装的所有模块，以及它们依赖的模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上 global 参数，会列出全局安装的模块</span></span><br><span class="line">$ npm list -global</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm list 命令也可以列出单个模块</span></span><br><span class="line">$ npm list underscore</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h3><p>使用 npm 安装包的命令格式为：<br><code>npm [install/i] [package_name]</code></p>
<h4 id="本地模式和全局模式"><a href="#本地模式和全局模式" class="headerlink" title="本地模式和全局模式"></a>本地模式和全局模式</h4><p>npm 在默认情况下会从 <a href="http://npmjs.org" target="_blank" rel="noopener">http://npmjs.org</a> 搜索或下载包，将包安装到当前目录的 node_modules 子目录下。<br>如果你熟悉 Ruby 的 gem 或者 Python 的 pip，你会发现 npm 与它们的行为不同，gem 或 pip 总是以全局模式安装，使包可以供所有的程序使用，而 npm 默认会把包安装到当前目录下。这反映了 npm 不同的设计哲学。如果把包安装到全局，可以提供程序的重复利用程度，避免同样的内容的多分副本，但坏处是难以处理不同的版本依赖。如果把包安装到当前目录，或者说本地，则不会有不同程序依赖不同版本的包的冲突问题，同时还减轻了包作者的 API 兼容性压力，但缺陷则是同一个包可能会被安装许多次。</p>
<p>我们在使用 supervisor 的时候使用了 <code>npm install -g supervisor</code> 命令，就是以全局模式安装 supervisor 。</p>
<p>这里注意一点的就是，supervisor 必须安装到全局，如果你不安装到全局，错误命令会提示你安装到全局。如果不想安装到默认的全局，也可以自己修改全局路径到当前路径 <code>npm config set prefix &quot;路径&quot;</code> 安装完以后就可以用 supervisor 来启动服务了。<br>supervisor 可以帮助你实现这个功能，它会监视你对代码的驱动，并自动重启 Node.js 。</p>
<p>一般来说，全局安装只适用于工具模块，比如 eslint 和 gulp 。关于使用全局模式，多数时候并不是因为许多程序都有可能用到了它，为了减少多重副本而使用全局模式，而是因为<strong>本地模式不会注册 PATH 环境变量</strong>。<br>“本地安装”指的是将一个模块下载到当前项目的 node_modules 子目录，然后只有在项目目录之中，才能调用这个模块。</p>
<p>本地模式和全局模式的特点如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">可通过 require 使用</th>
<th style="text-align:center">注册 PATH</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">本地模式</td>
<td style="text-align:center">是</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center">全局模式</td>
<td style="text-align:center">否</td>
<td style="text-align:center">是</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">$ npm install &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">$ sudo npm install -global &lt;package name&gt;</span><br><span class="line">$ sudo npm install -g &lt;package name&gt;</span><br></pre></td></tr></table></figure>
<p>npm install 也支持直接输入 Github 代码库地址。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install git://github.com/package/path.git</span><br><span class="line">$ npm install git://github.com/package/path.git<span class="comment">#0.1.0</span></span><br></pre></td></tr></table></figure></p>
<p>安装之前，npm install 会先检查，node_modules 目录之中是否已经存在指定模块。如果存在，就不再重新安装了，即使远程仓库已经有了一个新版本，也是如此。</p>
<p>如果你希望，一个模块不管是否安装过， npm 都要强制重新安装，可以使用 -f 或 –force 参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install &lt;packageName&gt; --force</span><br></pre></td></tr></table></figure></p>
<h4 id="安装不同版本"><a href="#安装不同版本" class="headerlink" title="安装不同版本"></a>安装不同版本</h4><p>install 命令总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上 @ 和版本号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install sax@latest</span><br><span class="line">$ npm install sax@0.1.1</span><br><span class="line">$ npm install sax@<span class="string">"&gt;=0.1.0 &lt;0.2.0"</span></span><br></pre></td></tr></table></figure></p>
<p>install 命令可以使用不同参数，指定所安装的模块属于哪一种性质的依赖关系，即出现在 packages.json 文件的哪一项中。</p>
<blockquote>
<p>–save：模块名将被添加到 dependencies，可以简化为参数-S。<br>–save-dev：模块名将被添加到 devDependencies，可以简化为参数-D。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install sax --save</span><br><span class="line">$ npm install node-tap --save-dev</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ npm install sax -S</span><br><span class="line">$ npm install node-tap -D</span><br></pre></td></tr></table></figure>
<h5 id="dependencies-依赖"><a href="#dependencies-依赖" class="headerlink" title="dependencies 依赖"></a>dependencies 依赖</h5><p>这个可以说是我们 npm 核心一项内容，依赖管理，这个对象里面的内容就是我们这个项目所依赖的 js 模块包。下面这段代码表示我们依赖了 <code>markdown-it</code> 这个包，版本是 <code>^8.1.0</code> ，代表最小依赖版本是 <code>8.1.0</code> ，如果这个包有更新，那么当我们使用 npm install 命令的时候，npm 会帮我们下载最新的包。当别人引用我们这个包的时候，包内的依赖包也会被下载下来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"markdown-it"</span>: <span class="string">"^8.1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="devDependencies-开发依赖"><a href="#devDependencies-开发依赖" class="headerlink" title="devDependencies 开发依赖"></a>devDependencies 开发依赖</h5><p>在我们开发的时候会用到的一些包，只是在开发环境中需要用到，但是在别人引用我们包的时候，不会用到这些内容，放在 devDependencies 的包，在别人引用的时候不会被 npm 下载。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"autoprefixer"</span>: <span class="string">"^6.4.0"</span>,<span class="number">0</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>babel-preset-es2015<span class="string">": "</span>^<span class="number">6.0</span><span class="number">.0</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>babel-preset-stage<span class="number">-2</span><span class="string">": "</span>^<span class="number">6.0</span><span class="number">.0</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>babel-register<span class="string">": "</span>^<span class="number">6.0</span><span class="number">.0</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>webpack<span class="string">": "</span>^<span class="number">1.13</span><span class="number">.2</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>webpack-dev-middleware<span class="string">": "</span>^<span class="number">1.8</span><span class="number">.3</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>webpack-hot-middleware<span class="string">": "</span>^<span class="number">2.12</span><span class="number">.2</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>webpack-merge<span class="string">": "</span>^<span class="number">0.14</span><span class="number">.1</span><span class="string">",</span></span><br><span class="line"><span class="string">    "</span>highlightjs<span class="string">": "</span>^<span class="number">9.8</span><span class="number">.0</span><span class="string">"</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>当你有了一个完整的 package.json 文件的时候，就可以让人一眼看出来，这个模块的基本信息，和这个模块所需要依赖的包。我们可以通过 npm install 就可以很方便的下载好这个模块所需要的包。</p>
<p>npm install 默认会安装 dependencies 字段和 devDependencies 字段中的所有模块，如果使用 –production 参数，可以只安装 dependencies 字段的模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --production</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ NODE_ENV=production npm install</span><br></pre></td></tr></table></figure></p>
<p>一旦安装了某个模块，就可以在代码中用 require 命令加载这个模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> backbone = <span class="built_in">require</span>(<span class="string">'backbone'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(backbone.VERSION)</span><br></pre></td></tr></table></figure></p>
<h3 id="npm-run"><a href="#npm-run" class="headerlink" title="npm run"></a>npm run</h3><p>npm 不仅可以用于模块管理，还可以用于执行脚本。package.json 文件有一个 scripts 字段，可以用于指定脚本命令，供 npm 直接调用。<br>package.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"myproject"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"jshint"</span>: <span class="string">"latest"</span>,</span><br><span class="line">    <span class="string">"browserify"</span>: <span class="string">"latest"</span>,</span><br><span class="line">    <span class="string">"mocha"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"jshint **.js"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"mocha test/"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="scripts-脚本"><a href="#scripts-脚本" class="headerlink" title="scripts 脚本"></a>scripts 脚本</h4><p>顾名思义，就是一些脚本代码，可以通过 <code>npm run script-key</code> 来调用，例如在这个 package.json 的文件夹下使用 <code>npm run dev</code> 就相当于运行了 <code>node build/dev-server.js</code> 这一段代码。使用 scripts 的目的就是为了把一些要执行的代码合并到一起，使用 npm run 来快速的运行，方便省事。<br>npm run 是 npm run-script 的缩写，一般都使用前者，但是后者可以更好的反应这个命令的本质。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 脚本</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">    <span class="string">"docs"</span>: <span class="string">"node build/docs.js"</span>,</span><br><span class="line">    <span class="string">"build-docs"</span>: <span class="string">"npm run docs &amp; git checkout gh-pages &amp; xcopy /sy dist\\* . &amp; git add . &amp; git commit -m 'auto-pages' &amp; git push &amp; git checkout master"</span>,</span><br><span class="line">    <span class="string">"build-publish"</span>: <span class="string">"rmdir /S /Q lib &amp; npm run build &amp;git add . &amp; git commit -m auto-build &amp; npm version patch &amp; npm publish &amp; git push"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint --ext .js,.vue src"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>npm run 如果不加任何参数，直接运行，会列出 package.json 里面所有可以执行的脚本命令。<br>npm 内置了两个命令简写， npm test 等同于执行 npm run test，npm start 等同于执行 npm run start。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build"</span>: <span class="string">"npm run build-js &amp;&amp; npm run build-css"</span></span><br></pre></td></tr></table></figure>
<p>上面的写法是先运行 npm run build-js ，然后再运行 npm run build-css ，两个命令中间用 &amp;&amp; 连接。如果希望两个命令同时平行执行，它们中间可以用 &amp; 连接。</p>
<p>写在 scripts 属性中的命令，也可以在 node_modules/.bin 目录中直接写成 bash 脚本。下面是一个 bash 脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> site/main</span><br><span class="line">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure></p>
<p>假定上面的脚本文件名为 build.sh ，并且权限为可执行，就可以在 scripts 属性中引用该文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"build-js"</span>: <span class="string">"bin/build.sh"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="pre-和-post-脚本"><a href="#pre-和-post-脚本" class="headerlink" title="pre- 和 post- 脚本"></a>pre- 和 post- 脚本</h3><p>npm run 为每条命令提供了 pre- 和 post- 两个钩子（hook）。以 npm run lint 为例，执行这条命令之前，npm 会先查看有没有定义 prelint 和 postlint 两个钩子，如果有的话，就会先执行 npm run prelint，然后执行 npm run lint，最后执行 npm run postlint。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"myproject"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"eslint"</span>: <span class="string">"latest"</span></span><br><span class="line">    <span class="string">"karma"</span>: <span class="string">"latest"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint --cache --ext .js --ext .jsx src"</span>,</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"karma start --log-leve=error karma.config.js --single-run=true"</span>,</span><br><span class="line">    <span class="string">"pretest"</span>: <span class="string">"npm run lint"</span>,</span><br><span class="line">    <span class="string">"posttest"</span>: <span class="string">"echo 'Finished running tests'"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面代码是一个 package.json 文件的例子。如果执行 npm test，会按下面的顺序执行相应的命令。</p>
<ol>
<li>pretest</li>
<li>test</li>
<li>posttest</li>
</ol>
<p>如果执行过程出错，就不会执行排在后面的脚本，即如果 prelint 脚本执行出错，就不会接着执行 lint 和 postlint 脚本。</p>
<h3 id="npm-bin"><a href="#npm-bin" class="headerlink" title="npm bin"></a>npm bin</h3><p>npm bin 命令显示相对于当前目录的，Node 模块的可执行脚本所在的目录（即 .bin 目录）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录下执行</span></span><br><span class="line">$ npm bin</span><br><span class="line">./node_modules/.bin</span><br></pre></td></tr></table></figure></p>
<h1 id="创建全局链接"><a href="#创建全局链接" class="headerlink" title="创建全局链接"></a>创建全局链接</h1><p>npm 提供了一个有趣的命令 npm link，它的功能是在本地包和全局包之间创建符号链接。我们说过使用全局模式安装的包不能直接通过 require 使用。但通过 npm link 命令可以打破这一限制。举个例子，我们已经通过 <code>npm install -g express</code> 安装了 express，这时在工程的目录下运行命令：<br><code>npm link express ./node_modules/express -&gt; /user/local/lib/node_modules/express</code><br>我们可以在 node_modules 子目录中发现一个指向安装到全局的包的符号链接。通过这种方法，我们就可以把全局包当做本地包来使用了。<br>除了将全局的包链接到本地以外，使用 npm link 命令还可以将本地的包链接到全局。使用方法是在包目录（package.json 所在目录）中运行 npm link 命令。如果我们要开发一个包，利用这种方法可以非常方便地在不同的工程间进行测试。</p>
<h1 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h1><p>包是在模块基础上更深一步的抽象，Node.js 的包类似于 C/C++ 的函数库或者 Java、.Net 的类库。它将某个独立的功能封装起来，用于发布、更新、依赖管理和版本控制。Node.js 根据 CommonJS 规范实现了包机制，开发了 npm 来解决包的发布和获取需求。<br>Node.js 的包是一个目录，其中包含了一个 JSON 格式的包说明文件 package.json。严格符合 CommonJS 规范的包应该具备以下特征：<br>。package.json 必须在包的顶层目录下；<br>。二进制文件应该在 bin 目录下；<br>。JavaScript 代码应该在 lib 目录下；<br>。文档应该在 doc 目录下；<br>。单元测试应该在 test 目录下。</p>
<p>Node.js 对包的要求并没有这么严格，只要顶层目录下有 package.json，并符合一些规范即可。当然为了提高兼容性，我们还是建议你在制作包的时候，严格遵守 CommonJS 规范。</p>
<p>我们也可以把文件夹封装为一个模块，即所谓的包。包通常是一些模块的集合，在模块的基础上提供了更高层的抽象，相当于提供了一些固定接口的函数库。通过定制 package.json，我们可以创建更复杂，更完善，更符合规范的包用于发布。</p>
<p>Node.js 在调用某个包时，会首先检查包中 packgage.json 文件的 main 字段，将其作为包的接口模块，如果 package.json 或 main 字段不存在，会尝试寻找 index.js 或 index.node 作为包的接口。</p>
<p>package.json 是 CommonJS 规定的用来描述包的文件，完全符合规范的 package.json 文件应该含有以下字段：<br><span id="inline-yellow">name</span>: 包的名字，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格。<br><span id="inline-blue">description</span>: 包的简要说明。<br><span id="inline-green">version</span>: 符合语义化版本识别规范的版本字符串。<br><span id="inline-red">keywords</span>: 关键字数组，通常用于搜索。<br><span id="inline-purple">maintainers</span>: 维护者数组，每个元素要包含 name 、email(可选)、web(可选)字段。<br><span id="inline-yellow">contributors</span>: 贡献者数组，格式与 maintainers 相同。包的作者应该是贡献者数组的第一个元素。<br><span id="inline-blue">bugs</span>: 提交 bug 的地址，可以是网址或者电子邮件地址。<br><span id="inline-green">licenses</span>: 许可证数组，每个元素要包含 type（许可证的名称）和 url（链接到许可证文本的地址）字段。<br><span id="inline-red">repositories</span>: 仓库托管地址数组，每个元素要包含 type（仓库的类型，如 git）、URL（仓库的地址）和 path（相对于仓库的路径，可选）字段。<br><span id="inline-purple">dependencies</span>: 包的依赖，一个关联数组，由包名称和版本号组成。</p>
<h1 id="包的发布"><a href="#包的发布" class="headerlink" title="包的发布"></a>包的发布</h1><p>通过使用 npm init 可以根据交互式回答产生一个符合标准的 package.json。创建一个 index.js 作为包的接口,一个简单的包就制作完成了。<br>在发布前,我们还需要获得一个账号用于今后维护自己的包,使用 npm adduser 根据提示完成账号的创建<br>完成后可以使用 npm whoami 检测是否已经取得了账号。<br>接下来,在 package.json 所在目录下运行 npm publish，稍等片刻就可以完成发布了，打开浏览器，访问 <a href="http://search.npmjs.org/" target="_blank" rel="noopener">http://search.npmjs.org/</a> 就可以找到自己刚刚发布的包了。现在我们可以在世界的任意一台计算机上使用 npm install neveryumodule 命令来安装它。<br>如果你的包将来有更新,只需要在 package.json 文件中修改 version 字段,然后重新使用 npm publish 命令就行了。<br>如果你对已发布的包不满意，可以使用 npm unpublish 命令来取消发布。</p>
<p id="div-border-top-yellow"><em>需要说明的是：json 文件不能有注释</em><br></p>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="noopener">http://javascript.ruanyifeng.com/nodejs/npm.html</a></p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>npm version  查看npm和node的版本<br>npm list –depth=0 [-g]  查看[全局]安装的包<br>npm root [-g]  查看[全局的]包的安装路径</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AMD，CMD 规范详解]]></title>
      <url>https://addonepiece.github.io/2017/03/20/amd-cmd/</url>
      <content type="html"><![CDATA[<p>当我们了解了 <a href="https://addonepiece.github.io/2017/03/07/commonjs/">CommonJS</a> 以后，<code>CommonJS</code> 规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<br>由于 <code>Node.js</code> 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 <code>CommonJS</code> 规范比较适用。<br>但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式。为什么呢？</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">'math'</span>);</span><br><span class="line">math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<p>第二行 <code>math.add(2, 3)</code>，在第一行 <code>require(&#39;math&#39;)</code> 之后运行，因此必须等 <code>math.js</code> 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>对于浏览器，这是一个大问题，因为模块都放在服务器端。等待时间取决于网速的快慢，可能要等很长时间，浏览器处理“假死”状态。</p>
<p>因此，浏览器端的模块，不能采用“同步加载”，只能采用“异步加载”。</p>
<h1 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h1><p><a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener">AMD 规范</a> 则是异步加载模块，允许指定回调函数。因此浏览器端一般采用 <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener">AMD 规范</a>。<br><code>AMD(Asynchronous module definition)</code>： <span id="inline-green">异步模块定义。</span></p>
<p>类似的还有 <code>CommonJS Modules/2.0</code> 规范，是 <code>BravoJS</code> 在推广过程中对模块定义的规范化产出。<br><code>CMD(Common module definition)</code>：<span id="inline-blue">通用模块定义。</span></p>
<p>目前这些规范的实现都能达成<strong>浏览器端模块化开发的目的</strong>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">服务端JS</th>
<th style="text-align:center">浏览器端JS</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">相同的代码需要多次执行</td>
<td style="text-align:center">代码需要从一个服务器端分发到多个客户端执行</td>
</tr>
<tr>
<td style="text-align:center">CPU 和内存资源是瓶颈</td>
<td style="text-align:center">宽带是瓶颈</td>
</tr>
<tr>
<td style="text-align:center">加载时从磁盘中加载</td>
<td style="text-align:center">加载时需要通过网络加载</td>
</tr>
</tbody>
</table>
<p>AMD 的诞生，就是为了解决这两个问题：<br>1.实现 js 文件的异步加载，避免网页失去响应<br>2.管理模块之间的依赖性，便于代码的编写和维护</p>
<p>AMD(异步模块定义)主要为前端 JS 的表现指定规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>AMD 也采用 <a href="https://github.com/amdjs/amdjs-api/wiki/require" target="_blank" rel="noopener">require()</a> 语句加载模块，但是不同于 CommonJS，它要求两个参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure></p>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数 callback，则是加载成功之后的回调函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>) </span>&#123;</span><br><span class="line">  math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>实现 AMD 规范的加载器其实是挺多的，目前，主要有两个 Javascript 库实现了 AMD 规范：<a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener">require.js</a> 和 <a href="https://github.com/cujojs/curl" target="_blank" rel="noopener">curl.js</a>。不过多数人还是用 require.js 。<br>另外如果对 ES6 的模块感兴趣，可以考虑 <a href="http://github.com/hax/my.js" target="_blank" rel="noopener">my.js</a> ，是按照 ES6 草案的 module/loader 规范实现的。</p>
<p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a> 是 <a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener">require.js</a> 在推广过程中对模块定义的规范化产出。</p>
<p>推荐学习 <a href="http://requirejs.org/" target="_blank" rel="noopener">require.js</a>。</p>
<h2 id="AMD-模块的写法"><a href="#AMD-模块的写法" class="headerlink" title="AMD 模块的写法"></a>AMD 模块的写法</h2><p><a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener">require.js</a> 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。<br>具体来说，就是模块必须采用特定的 define() 函数来定义。如果一个模块不依赖其他模块。那么可以直接定义在 define() 函数之中。<br>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">　<span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">return</span> x+y;</span><br><span class="line">　&#125;;</span><br><span class="line">　<span class="keyword">return</span> &#123;</span><br><span class="line">　　add: add</span><br><span class="line">　&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>加载方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">math</span>)</span>&#123;</span><br><span class="line">　alert(math.add(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如果这个模块还依赖其他模块，那么 define() 函数的第一个参数，必须是一个数组，指明该模块的依赖性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'myLib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">myLib</span>)</span>&#123;</span><br><span class="line">　<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　myLib.doSomething();</span><br><span class="line">　&#125;</span><br><span class="line">　<span class="keyword">return</span> &#123;</span><br><span class="line">　　foo : foo</span><br><span class="line">　&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>当 require() 函数加载上面这个模块的时候，就会先加载 myLib.js 文件。</p>
<h2 id="加载非规范的模块"><a href="#加载非规范的模块" class="headerlink" title="加载非规范的模块"></a>加载非规范的模块</h2><p>理论上，<a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener">require.js</a> 加载的模块，必须是按照 <a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener">AMD 规范</a>、用 define() 函数定义的模块。但是实际上，虽然已经有一部分流行的函数库（比如 jQuery ）符合 AMD 规范，更多的库并不符合。那么，require.js 是否能够加载非规范的模块呢？<br>回答是可以的。<br>这样的模块在用 require() 加载之前，要先用 require.config() 方法，定义它们的一些特征。<br>举例来说，underscore 和 backbone 这两个库，都没有采用 AMD 规范编写。如果要加载它们的话，必须先定义它们的特征。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.config(&#123;</span><br><span class="line">　shim: &#123;</span><br><span class="line">　　<span class="string">'underscore'</span>: &#123;</span><br><span class="line">　　　exports: <span class="string">'_'</span></span><br><span class="line">　　&#125;,</span><br><span class="line">　　<span class="string">'backbone'</span>: &#123;</span><br><span class="line">　　　deps: [<span class="string">'underscore'</span>, <span class="string">'jquery'</span>],</span><br><span class="line">　　　exports: <span class="string">'Backbone'</span></span><br><span class="line">　　&#125;</span><br><span class="line">　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>require.config() 接受一个配置对象，这个对象除了有前面说过的 paths 属性之外，还有一个 shim 属性，专门用来配置不兼容的模块。具体来说，每个模块要定义：<br>（1）exports 值（输出的变量名），表明这个模块外部调用时的名称；<br>（2）deps 数组，表明该模块的依赖性。<br>比如，jQuery 的插件可以这样定义：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shim: &#123;</span><br><span class="line">　<span class="string">'jquery.scroll'</span>: &#123;</span><br><span class="line">　　deps: [<span class="string">'jquery'</span>],</span><br><span class="line">　　exports: <span class="string">'jQuery.fn.scroll'</span></span><br><span class="line">　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h1><p><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="noopener">CMD</a> 是 <a href="https://github.com/seajs/seajs" target="_blank" rel="noopener">sea.js</a> 在推广过程中对模块定义的规范化产出。</p>
<h3 id="CMD-模块定义"><a href="#CMD-模块定义" class="headerlink" title="CMD 模块定义"></a>CMD 模块定义</h3><p>在 CMD 规范中，一个模块就是一个文件。define 是一个全局函数，用来定义模块。<br>define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。<br>factory 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以定义一个 JSON 数据模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(&#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>也可以通过字符串定义模板模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'I am a template.My name is &#123;&#123;name&#125;&#125;.'</span>);</span><br></pre></td></tr></table></figure></p>
<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。<br>factory 是一个函数，有三个参数，function(require, exports, module)<br>1、require 是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口：require(id)<br>2、exports 是一个对象，用来向外提供模块接口<br>3、module 是一个对象，上面存储了与当前模块相关联的一些属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">  a.doSomething();</span><br><span class="line">  <span class="comment">// 依赖就近书写，什么时候用到什么时候引入</span></span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>建议写一写 SeaJS 的 CMD 规范，与 AMD 非常类似，在国内的影响力非常大，但是个人觉得 SeaJS 比 RequireJS 好很多，另外由于是国人开发的，交流也非常方便，可以看到 github 上的更新、互动非常频繁。</p>
<h1 id="AMD-与-CMD-的区别"><a href="#AMD-与-CMD-的区别" class="headerlink" title="AMD 与 CMD 的区别"></a>AMD 与 CMD 的区别</h1><p>区别：</p>
<ol>
<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>延迟执行</strong>。不过 RequireJS 从2.0开始，也改成了可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</li>
<li>CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CommonJS 详细介绍]]></title>
      <url>https://addonepiece.github.io/2017/03/07/commonjs/</url>
      <content type="html"><![CDATA[<h2 id="CommonJS-规范与实现"><a href="#CommonJS-规范与实现" class="headerlink" title="CommonJS 规范与实现"></a>CommonJS 规范与实现</h2><p>正如当年为了统一 JavaScript 语言标准，人们制定了 ECMAScript 规范一样，如今为了统一 JavaScript 在浏览器之外的实现，CommonJS 诞生了。CommonJS 试图定义一套普通应用程序使用的 API，从而填补 JavaScript 标准库过于简单的不足。CommonJS 的终极目标是制定一个像 C++ 标准库一样的规范，使得基于 CommonJS API 的应用程序可以在不同的环境下运行，就像用 C++ 编写的应用程序可以使用不同的编译器和运行时函数库一样。为了保持中立，CommonJS 不参与标准库实现，其实现交给像 Node.js 之类的项目来完成。下图是 CommonJS 的各种实现。</p>
<a id="more"></a>
<p><img src="http://i2.muimg.com/567571/abd3d52d96d4db7c.png" alt="ConmonJS 的实现"></p>
<p>CommonJS 规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。</p>
<p>Node.js 是目前 CommonJS 规范最热门的一个实现，它基于 CommonJS 的 Modules/1.0 规范实现了 Node.js 的模块，同时随着 CommonJS 规范的更新，Node.js 也在不断跟进。</p>
<p>模块（Module）和包（Package）是 Node.js 最重要的支柱。开发一个具有一定规模的程序不可能只用一个文件，通常需要把各个功能拆分、封装，然后组合起来，模块正式为了实现这种方式而诞生的。在浏览器 JavaScript 中，脚本模块的拆分和组合通常使用 HTML 的 script 标签来实现。Node.js 提供了 require 函数来调用其他模块，而且模块都是基于文件的，机制十分简单。</p>
<h2 id="CommonJS-规范的实现"><a href="#CommonJS-规范的实现" class="headerlink" title="CommonJS 规范的实现"></a>CommonJS 规范的实现</h2><p>Node.js 的模块和包机制的实现参照了 CommonJS 的标准，但并未完全遵循。不过两者的区别不大，一般来说你大可不必担心，只有当你试图制作一个除了支持 Node.js 之外还要支持其他平台的模块或包的时候才需要仔细研究。通常，两者没有直接冲突的地方。</p>
<p>我们经常把 Node.js 的模块和包相提并论，因为模块和包是没有本质区别的，两个概念也时常混用。如果要辨析，那么可以<strong>把包理解成是实现了某个功能模块的集合</strong>，用于发布和维护。对使用者来说，模块和包的区别是透明的，因此经常不作区分。</p>
<p>CommonJS 规范规定，每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。加载某个模块，其实是加载该模块的 module.exports 属性。</p>
<p>为了方便，Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exports = <span class="built_in">module</span>.exports;</span><br></pre></td></tr></table></figure></p>
<p>注意，不能直接将 exports 变量指向一个值，因为这样等于切断了 exports 与 module.exports 的联系。</p>
<p><strong>如果你觉得，exports 与 module.exports 之间的区别很难分清，一个简单的处理办法，就是放弃使用 exports，只使用 module.exports。</strong></p>
<h2 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h2><p>模块是 Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是 JavaScript 代码、JSON 或者编译过的 C/C++ 扩展。</p>
<h2 id="创建及加载模块"><a href="#创建及加载模块" class="headerlink" title="创建及加载模块"></a>创建及加载模块</h2><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，因为一个文件就是一个模块，我们要关注的问题仅仅在于如何在其他文件中获取这个模块。Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。<br>让我以一个例子来了解模块。创建一个 module.js 文件，内容是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line">exports.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">    name = thyName;</span><br><span class="line">&#125;;</span><br><span class="line">exports.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>在同一目录下创建 getmodule.js，内容是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getmodule.js</span></span><br><span class="line"><span class="keyword">var</span> myModule = <span class="built_in">require</span>(<span class="string">'./module'</span>);</span><br><span class="line">myModule.setName(<span class="string">'Yan'</span>);</span><br><span class="line">myModule.sayHello();</span><br></pre></td></tr></table></figure>
<p>运行 <code>node getmodule.js</code> ，结果是：</p>
<blockquote>
<p>Hello Yan</p>
</blockquote>
<p>module.js 通过 exports 对象把 setName 和 sayHello 作为模块的访问接口，在 getmodule.js 中通过 <code>require(&#39;./module&#39;)</code> 加载这个模块，然后就可以直接访问 module.js 中 exports 对象的成员函数了。</p>
<h3 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h3><blockquote>
<p>在 Node.js 中，我们可以直接通过 require 获取核心模块，例如 <code>require(&#39;fs&#39;)</code> 。核心模块拥有最高的加载优先级，换言之如果有模块与其命名冲突，Node.js 总是会加载核心模块。</p>
</blockquote>
<p>如果有模块与核心模块命名冲突，Node.js 为什么可以选择加载核心模块呢？require 的实现机制是怎样的呢？</p>
<h4 id="1、按路径加载模块"><a href="#1、按路径加载模块" class="headerlink" title="1、按路径加载模块"></a>1、按路径加载模块</h4><p>如果 require 参数以 “/“ 开头，那么就以绝对路径的方式查找模块名称，例如 <code>require(&#39;/home/addonepiece/module&#39;)</code> 将会按照 优先级依次尝试加载 <code>/home/addonepiece/module.js</code>、<code>/home/addonepiece/module.json</code> 和 <code>/home/addonepiece/module.node</code>。</p>
<p>如果 require 参数 “./“ 或 “../“ 开头，那么则以相对路径的方式查找模块，这种方式在应用中是最常见的。例如前面的例子中我们用了 <code>require(&#39;./hello&#39;)</code>来加载同一文件夹下的 hello.js。</p>
<h4 id="2、通过查找-node-modules-目录加载模块"><a href="#2、通过查找-node-modules-目录加载模块" class="headerlink" title="2、通过查找 node_modules 目录加载模块"></a>2、通过查找 node_modules 目录加载模块</h4><p>如果 require 参数不以 “/“ ， “./“ 或 “../“ 开头，而该模块又不是核心模块，那么就要通过查找 node_modules 加载模块了。我们使用 npm 获取的包通常就是以这种方式加载的。<br>在 node_modules 目录的外面一层，外面可以直接使用 <code>require(&#39;express&#39;)</code> 来代替 <code>require(&#39;./node_modules/express&#39;)</code>。这是 Node.js 模块加载的一个重要特征：通过查找 node_modules 目录来加载模块。<br>我们不仅要在 project 目录下的 app.js 中使用 <code>require(&#39;express&#39;)</code>，而且可能要在 controllers 子目录下的 index_controller.js 中也使用 <code>require(&#39;express&#39;)</code>，这时就需要向父目录上溯一层才能找到 node_modules 中的 express 了。</p>
<h4 id="3、加载缓存"><a href="#3、加载缓存" class="headerlink" title="3、加载缓存"></a>3、加载缓存</h4><p>Node.js 通过文件名缓存所有加载过的文件模块，所以以后再访问到时就不会重新加载了。注意，Node.js 是根据实际文件名缓存的，而不是 require() 提供的参数缓存的，也就是说即使你分别通过 <code>require(&#39;express&#39;)</code> 和 <code>require(&#39;./node_modules/express&#39;)</code>加载两次，也不会重复加载，因为尽管两次参数不同，解析到的文件却是同一个。</p>
<h3 id="单次加载"><a href="#单次加载" class="headerlink" title="单次加载"></a>单次加载</h3><p>上面这个例子有点类似于创建一个对象，但实际上和对象又有本质的区别，因为 require 不会重复加载模块，也就是说无论调用多少次 require，获得的模块都是同一个。我们在 getmodule.js 的基础上稍作修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loadmodule.js</span></span><br><span class="line"><span class="keyword">var</span> hello1 = <span class="built_in">require</span>(<span class="string">'./module'</span>);</span><br><span class="line">hello1.setName(<span class="string">'Yan'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello2 = <span class="built_in">require</span>(<span class="string">'./module'</span>);</span><br><span class="line">hello2.setName(<span class="string">'Yan 2'</span>);</span><br><span class="line"></span><br><span class="line">hello1.sayHello();</span><br></pre></td></tr></table></figure></p>
<p>运行后发现输出结果是 Hello Yan 2，这是因为变量 hello1 和 hello2 指向的是同一个实例，因此 hello1.setName 的结果被 hello2.setName 覆盖，最终输出结果是由后者决定的。</p>
<h3 id="覆盖-exports"><a href="#覆盖-exports" class="headerlink" title="覆盖 exports"></a>覆盖 exports</h3><p>有时候我们只是想把一个对象封装到模块中，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// singleobjct.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span> (<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">        name = thyName;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.Hello = Hello;</span><br></pre></td></tr></table></figure></p>
<p>此时我们在其他文件中需要通过 <code>require(&#39;./singleobject&#39;).Hello</code> 来获取 Hello 对象，这略显冗余，可以用下面方法稍微简化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>&#123;</span><br><span class="line">    name = thyName;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br></pre></td></tr></table></figure></p>
<p>这样就可以直接获得这个对象了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gethello.js</span></span><br><span class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line">hello = <span class="keyword">new</span> Hello();</span><br><span class="line">hello.setName(<span class="string">'Yan'</span>);</span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></table></figure></p>
<h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><h3 id="CommonJS-模块的特点如下："><a href="#CommonJS-模块的特点如下：" class="headerlink" title="CommonJS 模块的特点如下："></a>CommonJS 模块的特点如下：</h3><ol>
<li>所有代码都运行在模块作用域，不会污染全局作用域。</li>
<li>独立性是模块的重要特点就，模块内部最好不与程序的其他部分直接交互。</li>
<li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。</li>
<li>模块加载的顺序，按照其在代码中出现的顺序。</li>
</ol>
<h3 id="CommonJS-中的-Require"><a href="#CommonJS-中的-Require" class="headerlink" title="CommonJS 中的 Require"></a>CommonJS 中的 Require</h3><p>建议阅览：<a href="http://wiki.commonjs.org/wiki/Modules/1.1.1#Require" target="_blank" rel="noopener">CommonJS require 规范</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何解决内存泄漏引发的血案]]></title>
      <url>https://addonepiece.github.io/2017/02/28/memory-leak/</url>
      <content type="html"><![CDATA[<p>之前做了一个谷歌浏览器的插件开发，它会打开一个链接，然后收集数据并上传。依次循环，但是跑的时间久了，内存就变得很高，然后浏览器就会变卡，慢慢的影响这个插件的运行，最后浏览器也会崩溃。</p>
<h1 id="什么是内存泄漏"><a href="#什么是内存泄漏" class="headerlink" title="什么是内存泄漏"></a>什么是内存泄漏</h1><p>内存泄露是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。在 C++ 中，因为是手动管理内存，内存泄露是经常出现的事情。而现在流行的 C# 和 Java 等语言采用了自动垃圾回收方法管理内存，正常使用的情况下几乎不会发生内存泄露。浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。</p>
<a id="more"></a>
<p>自动垃圾收集是不能代替有效的内存管理的，特别是在大型，长时间运行的Web应用程序中。</p>
<h1 id="内存泄漏的几种情况"><a href="#内存泄漏的几种情况" class="headerlink" title="内存泄漏的几种情况"></a>内存泄漏的几种情况</h1><p>1、Delete 一个 Object 的属性会让此对象变慢<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="string">'y'</span>&#125;;</span><br><span class="line"><span class="keyword">delete</span> obj;  <span class="comment">// 此时 obj 会成一个慢对象</span></span><br><span class="line">obj.x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="string">'y'</span>&#125;;</span><br><span class="line">obj = <span class="literal">null</span>;  <span class="comment">// 应该这样</span></span><br></pre></td></tr></table></figure></p>
<p>2、闭包<br>1）在闭包中引入闭包外部的变量时，当闭包结束时此对象无法被垃圾回收（GC）。<br>2）闭包可以维持函数内局部变量，使其得不到释放。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> largeStr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'x'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> largeStr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>
<p>3、DOM 泄漏<br>当原有的 DOM 被移除时，子节点引用没有被移除则无法回收<br>当页面中元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会作出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBth"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">'test memory'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>应改成下面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"myBth"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  btn.onclick = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML = <span class="string">'test memory'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、Timers 计(定)时器泄漏<br>定时器也是常见产生内存泄露的地方<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">90000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    callAgain: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ref = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">var</span> val = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          ref.callAgain();</span><br><span class="line">        &#125;,<span class="number">90000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  obj.callAgain();</span><br><span class="line">  <span class="comment">// 虽然你想回收但是 timer 还在</span></span><br><span class="line">  obj = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>5、jquery 的 html() 函数<br>页面中还需要注意的一点是使用 jquery 的 html() 函数，该函数不是基于 innerHTML 实现的，大量使用同样也会导致系统性能下降。</p>
<p>6、使用事件委托代替事件注册<br>页面中如果元素过多，且需要为每个元素注册相同的 click 事件，这个时候我们优先考虑到使用委托机制，将需要注册的 click 事件注册到元素的上层或者顶层元素，这样我们就节省了大量的 click 注册事件。</p>
<p>7、自动类型装箱转换<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"test test"</span>;</span><br><span class="line">alert(s.length);</span><br></pre></td></tr></table></figure></p>
<p>s 本身是一个 string 而非 object，它没有 length 属性，所以当访问 length 时，JS 引擎会自动创建一个临时 String 对象封装 s，而这个对象一定会泄漏。这个 bug 匪夷所思，所幸解决起来相当容易，记得所有值类型做.运算之前先显示转换一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"test test"</span>;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">String</span>(s).length);</span><br></pre></td></tr></table></figure></p>
<h1 id="调试内存"><a href="#调试内存" class="headerlink" title="调试内存"></a>调试内存</h1><p>1、Timeline<br>Chrome 自带的内存调试工具可以很方便的查看内存使用情况和内存泄漏：<br>F12 -&gt; Timeline -&gt; Memory<br>点击 record 即可开始收集，点击弹出框的 Finish 即停止，然后会统计出 record 到 Finish 这一段时间内的内存使用情况。</p>
<p>2、Profiles<br>Chrome 自带的 Profiles 可以记录当前的内存使用情况<br>F12 -&gt; Profiles -&gt; Take Heap Snapshot<br>点击 Take Snapshot 就可以拍下当前 JS 的 heap 快照。<br><em>注意：每次拍快照前，都会先自动执行一个 GC，所以在视图里的对象都是可及的。</em></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 内存管理 & 垃圾回收机制]]></title>
      <url>https://addonepiece.github.io/2017/02/18/js-memory-management-and-gc/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>低级语言，比如C，有低级的内存管理基元，像 malloc()，free()。另一方面，JavaScript 的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动释放”。后者被称为垃圾回收。这个“自动”是混淆并给 JavaScript （和其他高级语言）开发者一个错觉：他们可以不用考虑内存管理。</p>
<a id="more"></a>
<h1 id="JavaScript-的内存分配"><a href="#JavaScript-的内存分配" class="headerlink" title="JavaScript 的内存分配"></a>JavaScript 的内存分配</h1><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><p>为了不让程序员为分配费心，JavaScript 在定义变量时完成内存分配。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;  <span class="comment">// 给数值变量分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为对象及其包含变量分配内存</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式也能分配一个对象</span></span><br><span class="line">obj.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  obj.style.backgroundColor = <span class="string">'blue'</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="通过函数调用的内存分配"><a href="#通过函数调用的内存分配" class="headerlink" title="通过函数调用的内存分配"></a>通过函数调用的内存分配</h2><p>有些函数调用结果是分配对象内存：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="值的使用"><a href="#值的使用" class="headerlink" title="值的使用"></a>值的使用</h2><p>使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p>
<h2 id="当内存不再需要使用时释放"><a href="#当内存不再需要使用时释放" class="headerlink" title="当内存不再需要使用时释放"></a>当内存不再需要使用时释放</h2><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。</p>
<p>高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这个过程是一个近似的，因为要知道某块内存是否需要是 <a href="http://en.wikipedia.org/wiki/Decidability_%28logic%29" target="_blank" rel="noopener">无法判定的</a> （无法被某种算法所解决）。</p>
<h1 id="垃圾回收机制——GC"><a href="#垃圾回收机制——GC" class="headerlink" title="垃圾回收机制——GC"></a>垃圾回收机制——GC</h1><p>JavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。</p>
<p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>
<p>JavaScript 垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p>
<p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p>
<p>还是上代码说明吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'yan'</span>, <span class="attr">age</span>: <span class="number">10</span>&#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'yan'</span>, <span class="attr">age</span>: <span class="number">11</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = fn1();</span><br><span class="line"><span class="keyword">var</span> b = fn2();</span><br></pre></td></tr></table></figure></p>
<p>我们来看代码是如何执行的。首先定义了两个 function,分别叫做 fn1 和 fn2，当 fn1 被调用时，进入 fn1 的环境，会开辟一块内存存放对象，而当调用结束后，出了 fn1 的环境，那么该块内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象被全局变量 b 所指向，所以该块内存并不会被释放。</p>
<p>这里问题就出现了：到底哪个变量是没有用的？所以垃圾收集器必须跟踪到底哪个变量没用，对于不再有用的变量打上标记，以备将来收回其内存。用于标记的无用变量的策略可能因实现而有所区别，通常情况下有两种实现方式：标记清除和引用计数。引用计数不太常用，标记清除较为常用。</p>
<h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>js 中最常用的垃圾回收方式就是标记清除。当变量进入环境时，例如，在函数中声明一个变量，就将这个而变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p>
<h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>Netscape Navigator3 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。循环引用指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">    a.pro = b;</span><br><span class="line">    b.pro = a;</span><br><span class="line">&#125; </span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p>
<p>以上代码a和b的引用次数都是2，fn()执行完毕后，两个对象都已经离开环境，在标记清除方式下是没有问题的，但是在引用计数策略下，因为a和b的引用次数不为0，所以不会被垃圾回收器回收内存，如果fn函数被大量调用，就会造成内存泄漏。在IE7与IE8上，内存直线上升。<br>最简单的方式就是自己手工解除循环引用，比如刚才的函数可以这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myObject.element = <span class="literal">null</span>;</span><br><span class="line">element.o = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></p>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>1、什么时候触发垃圾回收？<br>垃圾回收周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。IE6 的垃圾回收是根据内存分配量运行的，当环境中存在 256 个变量、4096 个对象、64K 的字符串任意一种情况的时候就会触发垃圾回收器工作，看起来很科学，不用按一段时间就调用一次，有时候会没必要，这样按需调用不是很好嘛？但是如果环境中就是有这么多变量一直存在，现在脚本如此复杂，很正常，那么结果就是垃圾回收器一直在工作，这样浏览器就没法玩了。</p>
<p>微软在 IE7 中做了调整，触发条件不再是固定的，而是动态修改的，初始值和IE6相同，如果垃圾回收器回收的内存分配量低于程序占用内存的 15%，说明大部分内存不可被回收，设的垃圾回收触发条件过于敏感，这时候把临界条件翻倍，如果回收的内存高于 85%，说明大部分内存早就该清理了，这时候把触发条件置回。这样就使垃圾回收工作智能了很多。</p>
<p>2、合理的 GC 方案<br>1）、JavaScript 引擎基础 GC 方案是（simple GC）：mark and sweep（标记清除），即：</p>
<ul>
<li>遍历所有可访问的对象。</li>
<li>回收已不可访问的对象。</li>
</ul>
<p>2）、GC 的缺陷<br>和其他语言一样，JavaScript 的 GC 策略也无法避免一个问题：GC 时，停止响应其他操作，这是为了安全考虑。而 JavaScript 的 GC 在 100ms 甚至以上，对一般的应用还好，但对于 JS 游戏，动画连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免 GC 造成的长时间停止响应。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般不用 setInterval，而用 setTimeout 的延时递归来代替 interval。<br>setInterval 会产生回调堆积，特别是时间很短的时候。</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>setInterval 有个很烦的地方就是当 js 主程序空闲的时候，执行代码队列里面的代码的时候，如果此时候我们有一个问题，定时器是等到回调执行完，才开始计时进行下次循环呢？还是只要一次计时完毕，插入回调之后不管回调执不执行就开始计时呢？答案显示是后者，这也就是我说 setInterval 坑的原因啊，因为这会出现一种情况，当我们插入回调的时候前队列有别的代码在执行，这时候回调肯定是不会执行的，因此如果这个时候无限定时时间到了会再次插入回调，这个时候如果发现队列中的第一次回调没有执行，那么再次插入的回调浏览器就默认取消，（这是以防出现回调连续执行多次的情况）但是这又引发了新的情况就是有些回调是不能取消掉的？</p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】为什么我们放弃了 Zepto]]></title>
      <url>https://addonepiece.github.io/2017/02/14/why-we-dropped-zepto/</url>
      <content type="html"><![CDATA[<!-- <img src="http://i2.muimg.com/567571/fae45a374015a1c2.png" alt="summary-img-src-zepto"> -->
<a id="more"></a>
<blockquote>
<p><a href="http://foundation.zurb.com/" target="_blank" rel="noopener">Foundation</a> 是 <a href="http://zurb.com/" target="_blank" rel="noopener">Zurb</a> 公司开源的一套前端框架，和 <a href="http://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap</a> 类似。</p>
</blockquote>
<p>在漆深的洞中，聪明、强壮的雪人（雪人 – Yeti – 是 Foundation 框架的吉祥物，这里其实是暗指 Foundation 框架）听到人们的询问“Zepto 去哪儿了？”。</p>
<p>回顾 Foundation 版本 4 开发时，我们考虑采用 Zepto 库（jQuery 可选），主要是由于 Zepto 体积小、加载速度快。</p>
<p>随着时间的推移，我们发现文件体积的大小根本和执行效率没有任何比例关系。当然，必须承认，Zepto 下载的确很快。但是，一旦下载到浏览器之后，它并不像 jQuery 一样执行速度快。并且，很多第三方插件都依赖 jQuery，不支持 Zepto – 实际上，我们发现某些第三方插件和 Zepto 有冲突。</p>
<p>对于我们来讲，维护多套代码很不容易。例如，Zepto 缺少合适的高度计算函数，这让某些栅格（grid）的计算变得很困难。</p>
<p>为了解决这些问题，我们发现解决办法其实极其简单：基于 jQuery 2 构建 Foundation 版本 5。除了获得更好的执行速度和广泛的业界支持外，jQuery 2 的文档更优秀、支持也同样更好。jQuery 的 API 在各个版本是兼容的。</p>
<p>等一等，为了把问题讲清楚，我们还是先假定 Zepto 的执行速度可能比 jQeury 快。我们不希望犯同样的错误，因此，我们将 Zepto 和 jQuery 2 进行对比测试，测试结果是：<a href="http://jsperf.com/zepto-vs-jquery-2013/25" target="_blank" rel="noopener">jQuery 2 每秒执行的操作次数比 Zepto 多</a>。这让 Foundation 版本 5 的执行效率更高，同时让所有用户感受到更好的体验。</p>
<p>最后，我们希望帮助大家更快速地设计优秀的产品 – 这次，我们的一点儿改变，让 Foundation 这个前端框架的速度得到大幅提升！</p>
<h2 id="译者总结："><a href="#译者总结：" class="headerlink" title="译者总结："></a>译者总结：</h2><p>在开源的世界中，充斥着大量的开源项目，但是，只有少部分的开源项目为广大开发者所熟知并积极使用。一个好的开源项目必须有一个强大的社区和一批积极的贡献者，jQuery 就是其中一个幸运儿。</p>
<p>原文地址：<a href="http://zurb.com/article/1293/why-we-dropped-zepto" target="_blank" rel="noopener">http://zurb.com/article/1293/why-we-dropped-zepto</a></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zepto </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[polyfill — Respond.js]]></title>
      <url>https://addonepiece.github.io/2017/02/11/respond-js/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Respond.js 让不支持 css3 Media Query 的浏览器包括 IE6-IE8 等其他浏览器支持媒体查询。</p>
</blockquote>
<p>Respond.js 是一个快速、轻量的 polyfill，用于为 IE6-8 以及其它不支持 CSS3 Media Queries 的浏览器提供媒体查询的 <code>min-width</code> 和 <code>max-width</code>特性，实现响应式网页设计（Responsive Web Design）。</p>
<a id="more"></a>
<p>响应式布局，理想状态是，对 <code>PC/移动</code> 各种终端进行响应。媒体查询的支持程度是 IE9+ 以及其他现代的浏览器，但是 IE8 在市场当中仍然占据了比较大量的市场份额，使我们不得不进行 IE 低端浏览器的考虑。那么如何在 IE6~8 浏览器中兼容响应式布局呢？<br>这里我们需要借助这样一个文件：<code>respond.js</code>.</p>
<p>文件下载地址：<a href="respond.js">respond.js</a>.</p>
<p>自己在阅读了官方文档之后，进行了一系列测试。友情提示各位朋友，关于 <strong>respond.js</strong> 的使用，有一些需要注意的地方，一旦不注意，在 IE6-8 中就无法显示出来。</p>
<h1 id="插件原理"><a href="#插件原理" class="headerlink" title="插件原理"></a>插件原理</h1><p>既然要实现响应式网页，那么就需要用到媒体查询，媒体查询的核心是 <code>min-width</code> 和 <code>max-width</code>,而 IE8 以下以及一些其它的浏览器不支持这两个属性，<strong>respond.js</strong> 是怎么做的呢？</p>
<ul>
<li>将 <code>&lt;head&gt;</code> 中所有外部引入的CSS文件路径取出来存储到一个数组当中；</li>
<li>遍历数组，并一个个发送 AJAX 请求；</li>
<li>AJAX 回调后，分析 response 中的 media query 的 <code>min-width</code> 和 <code>max-width</code> 语法（注意，仅仅支持 <code>min-width</code> 和 <code>max-width</code> ），分析出 viewport 变化区间对应相应的 css 块；</li>
<li>页面初始化时和 <code>window.resize</code> 时，根据当前 viewport 使用相应的 css 块。</li>
</ul>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>考虑到 IE9 是支持 CSS3 的，所以直接在 HTML 页面的 <code>&lt;head&gt;</code> 标签中添加脚本引入即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src="js/respond.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>讲道理，我们是应该将 js 文件放在 html 文件的最后，但是 repond.js 文件，我还是建议你将它放在 <code>&lt;head&gt;</code> 中，并且放在 css 文件的后面。越早引入越好，在 IE 下面看到页面闪屏的概率就越低，因为最初 css 会先渲染出来，如果 respond.js 加载得很后面，这时重新根据 media query 解析出来的 css 会再改变一次页面的布局等，所以看起来有闪屏的现象.</p>
<h1 id="核心结论"><a href="#核心结论" class="headerlink" title="核心结论"></a>核心结论</h1><p>那么此时，就可以根据基本的实现思路，得到一些书写代码时要注意的地方：</p>
<ul>
<li>需要启动本地服务器（localhost），不能使用普通本地的url地址（file://开头）；</li>
<li>需要外部引入 CSS 文件，将 CSS 样式书写在 style 中是无效的；</li>
<li>由于 respond 插件是查找 CSS 文件，再进行处理，所以 respond.js 文件一定要放置在 CSS 文件的后面；</li>
<li>另外，虽然把 respond.js 放置在 <code>&lt;head&gt;</code> 里还是在 <code>&lt;body&gt;</code> 后面都能够实现，但是建议放置在 <code>&lt;head&gt;</code> 中（具体原因在下面的文档提示中有提到）；</li>
<li>最好不要为 CSS 设置 utf-8 的编码，使用默认（原因详见下面的文档提示部分）</li>
</ul>
<h1 id="文档提示"><a href="#文档提示" class="headerlink" title="文档提示"></a>文档提示</h1><p>在官方文档当中的一些提示：</p>
<ul>
<li>越早的引入 respond.js 文件，也就越可能避免 IE 下出现的闪屏。</li>
<li>不支持嵌套的媒体查询。</li>
<li>utf-8 的字符编码对 respond.js 文件的运行有影响。<br>官方API原文：<br><code>if CSS files are encoded in UTF-8 with Byte-Order-Mark, they will not work with Respond.js in IE7 or IE8.</code><br>基本含义就是：<strong>utf-8 格式的 CSS 文件字符编码会对插件造成影响</strong><br>但是在我使用 IE6-8 进行测试的时候，都能够正常显示（无论是在 css 文件中增加 charset 设置还是在 link 标签中增加 charset 设置）。因此，并不是太清楚这个位置 bug 的含义。</li>
<li>跨域可能会出现闪屏（还没有测试，具体情况不详）</li>
</ul>
<h1 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h1><ol>
<li><p>Respond.js 和 跨域（cross-domain） CSS 的问题<br>如果Respond.js和CSS文件被放在不同的域名或子域名下面（例如，使用CDN）时需要一些额外的设置。请参考Respond.js文档获取详细信息。</p>
</li>
<li><p>Internet Explorer 8 与 box-sizing<br>IE8 不能完全支持 <code>box-sizing: border-box;</code> 与 <code>min-width</code>、<code>max-width</code>、<code>min-height</code> 或 <code>max-height</code> 一同使用。由于此原因，从 Bootstrap v3.0.1 版本开始，我们不再为 <code>.container</code> 使用 <code>max-width</code>。</p>
</li>
<li><p>IE兼容模式<br>Bootstrap 不支持 IE 的兼容模式。为了让 IE 浏览器运行最新的渲染模式，建议将此 标签加入到你的页面中：<br><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;</code><br>此标签被加入到所有文档页面和案例页面中，以确保在每个被支持的 IE 浏览器中保持最好的页面展现效果。</p>
</li>
<li><p>Respond.js 和 @import<br>Respond.js 不支持通过 @import 引入的 CSS 文件。例如，Drupal 一般被配置为通过 @import 引入 CSS 文件，Respond.js 对其将无法起到作用。</p>
</li>
</ol>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>从 respond.js 的工作原理可以知道，它将 <code>&lt;head&gt;</code> 中所有外部引入的 CSS 文件路径取出来存储到一个数组当中；然后遍历数组，并一个个发送 AJAX 请求；可以看出这里必须依赖 ajax 请求 css 路径才能得到 css 文件中的 media query 的内容，那 ajax 的跨域问题就要解决了；</p>
<p>由于我们的静态资源都是要放在 cdn 的，responds.js 也给出了跨域方法，即引入代理页面：</p>
<p>//把 cross-domain/respond-proxy.html 放到cdn上<br>//把 cross-domain/respond.proxy.gif 放到当前域服务器上</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Respond.js proxy on external server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://externalcdn.com/respond-proxy.html"</span> <span class="attr">id</span>=<span class="string">"respond-proxy"</span> <span class="attr">rel</span>=<span class="string">"respond-proxy"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Respond.js redirect location on local server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/path/to/respond.proxy.gif"</span> <span class="attr">id</span>=<span class="string">"respond-redirect"</span> <span class="attr">rel</span>=<span class="string">"respond-redirect"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Respond.js proxy script on local server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/path/to/respond.proxy.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="其他的支持响应式布局的插件-css3-dediaqueries-js"><a href="#其他的支持响应式布局的插件-css3-dediaqueries-js" class="headerlink" title="其他的支持响应式布局的插件  css3-dediaqueries.js"></a>其他的支持响应式布局的插件  css3-dediaqueries.js</h1><p>css3-mediaqueries.js 支持几乎所有的 media query 的语法。会出现闪屏。并不是很推荐使用，虽然能够支持全部的 media queries,但 <code>min-width</code> 和 <code>max-width</code> 其实就可以满足我们对响应式布局的需要。</p>
<h1 id="补充一点"><a href="#补充一点" class="headerlink" title="补充一点"></a>补充一点</h1><p>if CSS files are encoded in UTF-8 with Byte-Order-Mark,they will not work with Repond.js in IE7 or IE8.</p>
<p>也就是说保存格式应该是 utf-8 无 BOM 格式，BOM 会影响程序对文档的处理，正常的 utf-8 文档应该没事。</p>
<h1 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h1><p><strong>always link stylesheets or write inline CSS before js scripts.</strong></p>
<p>Respond.js on Github： <a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">https://github.com/scottjehl/Respond</a>.</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[腻子脚本 — HTML5Shiv]]></title>
      <url>https://addonepiece.github.io/2017/01/18/html5shiv/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://github.com/aFarkas/html5shiv" target="_blank" rel="noopener">HTML5shiv</a> is a javascript workaround to provide support for the new HTML 5 elements in IE Browsers older than IE 9.</p>
<ul>
<li>越来越多的站点开始使用 HTML5 标签。但是目前的情况是还有很多人在使用IE6，IE7，IE8。</li>
<li>而IE6，IE7，IE8是不能识别 HTML5 标签的。</li>
<li>这里提供一种让 IE 浏览器支持 HTML5 的方法，那就是使用 HTML5Shiv。</li>
<li>HTML5Shiv 主要解决 HTML5 提出的新的元素不被IE6-8识别。</li>
</ul>
<a id="more"></a>
<h1 id="为什么要使用-HTML5-的新标签"><a href="#为什么要使用-HTML5-的新标签" class="headerlink" title="为什么要使用 HTML5 的新标签"></a>为什么要使用 HTML5 的新标签</h1><ul>
<li><code>&lt;header&gt;</code> 定义页面或区段的头部</li>
<li><code>&lt;footer&gt;</code> 定义页面或区段的尾部</li>
<li><code>&lt;nav&gt;</code> 定义页面或区段的导航区域</li>
<li><code>&lt;section&gt;</code> 页面的逻辑区域或内容组合</li>
<li><code>&lt;article&gt;</code> 定义正文或一段完整的内容</li>
<li><code>&lt;aside&gt;</code> 定义补充或相关内容</li>
</ul>
<p>使用他们能让代码语义化更直观，而且更方便 SEO 优化，但是此 HTML5 新标签在 IE6/IE7/IE8 上并不能识别，需要 javascript 处理，所以我们就需要使用目前使用最广泛的 html5shiv.js 了，包括 Bootstrap 框架也是使用的这个来兼容低版本 IE 的。</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>　　这些 HTML5 新元素不能被 IE6-8 识别，不能作为父节点包裹子元素，并且不能应用 CSS 样式。让 CSS 样式应用在未知元素上只需执行 <code>document.createElement(elementName)</code> 即可实现。HTML5Shiv 就是根据这个原理创建的。</p>
<p id="div-border-top-purple">关于 HTML5 不得不提 IE，在苹果、Google、Opera 和 Mozilla 等主流浏览器厂商积极参与新版本 HTML 标准的制定和推广时，微软却对 HTML5 规范不屑一顾。然而微软近期才表态要在 IE 中支持 HTML5,以致到今天为止的 IE8 及以下是无法支持 HTML5 标签的.</p>


<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>HTML5Shiv 的使用非常的简单，考虑到 IE9 是支持 HTML5 的，所以只需要在页面 head 中添加如下代码即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[if lt IE 9]&gt;</span><br><span class="line">  &lt;script src=&quot;.js/html5shiv.js &quot;&gt;&lt;/script &gt;</span><br><span class="line">&lt;![endif]–-&gt;</span><br></pre></td></tr></table></figure></p>
<p>The syntax for the HTML5shiv is :<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src="./js/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">  &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="注意事项一"><a href="#注意事项一" class="headerlink" title="注意事项一"></a>注意事项一</h2><p>在引入了 html5shiv.js 以后，还需要在你自己的 css 文件中添加:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">dialog</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">header</span>,<span class="selector-tag">section</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">menu</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>主要是让这些 HTML5 标签成块状,像 div 那样。</p>
<p>No matter how ways what did you using, you should be initialize the new lable css.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span>,<span class="selector-tag">aside</span>,<span class="selector-tag">dialog</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">header</span>,<span class="selector-tag">section</span>,<span class="selector-tag">footer</span>,<span class="selector-tag">nav</span>,<span class="selector-tag">figure</span>,<span class="selector-tag">menu</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="注意事项二"><a href="#注意事项二" class="headerlink" title="注意事项二"></a>注意事项二</h2><p>　　因为 html5shiv.js 是 JavaScript 文件，如果 IE6/7/8 禁用脚本的用户,那么就变成了无样式的”白板”网页,我们该怎么解决呢?<br>　　我们可以参照 Facebook 的做法，即引导用户进入带有 noscript 标识的页面，用 xhtml 标签替换 html5 标签，这要比为了保持兼容而写大量 hack 的作法更轻便一些。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt; </span></span><br><span class="line"><span class="comment">&lt;noscript&gt;</span></span><br><span class="line"><span class="comment">&lt;style&gt;</span></span><br><span class="line"><span class="comment">  .html5-wrappers&#123;display:none!important;&#125;</span></span><br><span class="line"><span class="comment">&lt;/style&gt;</span></span><br><span class="line"><span class="comment">&lt;div class="ie-noscript-warning"&gt;您的浏览器禁用了脚本，请&lt;a href="#"&gt;查看这里&lt;/a&gt;来启用脚本!或者&lt;a href="/?noscript=1"&gt;继续访问&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">&lt;/noscript&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样可以引导用户开启脚本，或者直接跳到 xhtml 标签设计的页面。</p>
<h2 id="注意事项三"><a href="#注意事项三" class="headerlink" title="注意事项三"></a>注意事项三</h2><ul>
<li>HTML5shiv is found within the <code>&lt;head&gt;</code> tag.</li>
<li>HTML5shiv is a javascript file that is referenced in a <code>&lt;script&gt;</code> tag.</li>
<li>You should usr HTML5shiv when you are using the new HTML5 element such as : <code>&lt;header&gt;</code>,<code>&lt;footer&gt;</code>,<code>&lt;nav&gt;</code>,<code>&lt;aside&gt;</code>,<code>&lt;article&gt;</code></li>
<li>Download the latest version of HTML5shiv from <a href="https://github.com/aFarkas/html5shiv/" target="_blank" rel="noopener">github</a> or reference the Open Source Software CDN version at <code>https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js</code> or <code>https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js</code>.</li>
<li>You will require the HTML5shiv to provide compatibility for IE Browser older than IE 9.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="HTML-5-Document"><a href="#HTML-5-Document" class="headerlink" title="HTML 5 Document"></a>HTML 5 Document</h3><p>If you created a new web page in HTML5,you would include the HTML5shiv as follows:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">  &lt;script src=".js/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In this HTML 5 Document example,we have added HTML5shiv within the <head><meta name="generator" content="Hexo 3.9.0"> tag.In this case,the HTML5shiv is a javascript file called <strong>html5shiv.js</strong> found in the ./js directory.</head></p>
<p>If you did not want to download and store the HTML5shiv on your site,you could reference the version found on the Open Source Software CDN site.</p>
<p>###<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 5 Example by https://github.com/addonepiece<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 5 Example by https://github.com/addonepiece<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src="https://cdn.bootcss.com/html5shiv/3.7.0/html5shiv.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注意事项四"><a href="#注意事项四" class="headerlink" title="注意事项四"></a>注意事项四</h2><h3 id="HTML-4-0-1-Transitional-Document"><a href="#HTML-4-0-1-Transitional-Document" class="headerlink" title="HTML 4.0.1 Transitional Document"></a>HTML 4.0.1 Transitional Document</h3><p>HTML5shiv does not apply to HTML 4.0.1 Transitional.</p>
<h3 id="XHTML-1-0-Transitional-Document"><a href="#XHTML-1-0-Transitional-Document" class="headerlink" title="XHTML 1.0 Transitional Document"></a>XHTML 1.0 Transitional Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Transitional.</p>
<h3 id="XHTML-1-0-Strict-Document"><a href="#XHTML-1-0-Strict-Document" class="headerlink" title="XHTML 1.0 Strict Document"></a>XHTML 1.0 Strict Document</h3><p>HTML5shiv does not apply to XHTML 1.0 Strict.</p>
<h3 id="XHTML-1-1-Document"><a href="#XHTML-1-1-Document" class="headerlink" title="XHTML 1.1 Document"></a>XHTML 1.1 Document</h3><p>HTML5shiv does not apply to XHTML 1.1.</p>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>关于低版本浏览器不能识别 HTML5 标签的问题，除了使用 html5shiv.js 之外，还有一种做法就是为网站创建多套模版，通过程序对 User-Agent 的判断给不同的浏览器用户显示不同的页面，比如优酷网就是采用的这种模式。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><a href="https://addonepiece.github.io/2017/01/18/html5shiv/">HTML5Shiv</a> and <a href="https://addonepiece.github.io/2017/02/11/respond-js/">Respond.js</a> for IE8 support of HTML5 elements and media queries.</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】为什么一些生活中很外向开朗的人会喜欢独来独往]]></title>
      <url>https://addonepiece.github.io/2016/12/24/why-introversion-like-alone/</url>
      <content type="html"><![CDATA[<p id="div-border-left-purple">因为他是一个内向的人。<br>    不要怀疑，很多人都是这样。<br><br>    内向的人，通过独处来恢复精力。<br>    所以他们不是喜欢孤独，而是，孤独才是他们的常态。<br>    他们跟别人交流、相处，其实都是在消耗精力。<br></p>



<p>下面详述：</p>
<a id="more"></a>
<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>
<p><span id="inline-red">外向性（Extraversion）</span><br><span id="inline-yellow">神经质（Neuroticism）</span><br><span id="inline-green">亲和性（Agreeableness）</span><br><span id="inline-blue">负责性（Conscientiousness）</span><br><span id="inline-purple">经验开放性（Openness to experience）</span></p>
<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>
<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>
<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>
<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>
<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>
<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>
<h5 id="经验的广度和深度"><a href="#经验的广度和深度" class="headerlink" title="经验的广度和深度"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>
<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>
<h5 id="对刺激的反应"><a href="#对刺激的反应" class="headerlink" title="对刺激的反应"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>
<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>
<h5 id="精力的来源-（这是重点）"><a href="#精力的来源-（这是重点）" class="headerlink" title="精力的来源 （这是重点）"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>
<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>
<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>
<p>关键只在于精力的水平，以及恢复精力的方式。</p>
<p>这里给一张图，帮助大家理解：</p>
<p><img src="http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg" alt></p>
<p>作者：Lachel<br>原文：<a href="https://www.zhihu.com/question/24303670" target="_blank" rel="noopener">https://www.zhihu.com/question/24303670</a></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（四）]]></title>
      <url>https://addonepiece.github.io/2016/12/15/hexo-next-four/</url>
      <content type="html"><![CDATA[<p id="div-border-left-blue">提示：本篇文章将介绍在使用 heox 做博客框架中的一些 bug 处理情况。</p>

<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 bug 信息，从上到下依次解决 bug。</p>
<p>下面来看几个例子：</p>
<a id="more"></a>
<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src="/images/hexo-next-four-error1.png" alt><br>提示插件 <strong>hexo-deployer-git</strong> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <strong>npm</strong> 来卸载这个模块，然后重新安装）如下：</p>
<p><img src="/images/hexo-next-four-solution1.png" alt></p>
<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>
<p><img src="/images/hexo-next-four-result1.png" alt></p>
<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>
<p><img src="/images/hexo-next-four-error2.png" alt></p>
<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <strong>isarray</strong> ，但是我们查看 <strong>package.json</strong> 文件，我们的项目根本就没有引入 <strong>isarray</strong> 这个模块，我猜测这个 <strong>isarray</strong> 模块应该是某个模块的子模块 。</p>
<p>如 2 所示：我们顺着 <strong>at</strong> 一路往下找。</p>
<p>如 3 所示：发现这个 <strong>isarray</strong> 是在 <strong>hexo-generator-sitemap</strong> 里面的 ，所以我们删除这个 <strong>hexo-generator-sitemap</strong> 模块，然后重新安装这个模块。如下：</p>
<p><img src="/images/hexo-next-four-solution2.png" alt></p>
<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>
<p><img src="/images/hexo-next-four-result2.png" alt></p>
<p>那么，就以这两个例子来作为本次的示范吧，其实，<strong>Hexo</strong> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>
<p id="div-border-top-red">总结：遇到问题 <strong>bug</strong>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>

<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/addonepiece/addonepiece.github.io" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery使用技巧]]></title>
      <url>https://addonepiece.github.io/2016/11/22/use-jquery-skill/</url>
      <content type="html"><![CDATA[<h3 id="禁用页面的右键菜单"><a href="#禁用页面的右键菜单" class="headerlink" title="禁用页面的右键菜单"></a>禁用页面的右键菜单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  $(<span class="built_in">document</span>).bind(<span class="string">"contextmenu"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="新窗口打开页面"><a href="#新窗口打开页面" class="headerlink" title="新窗口打开页面"></a>新窗口打开页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.google.com"</span>&gt;</span>google_新窗口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.google.com"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span>google_新窗口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"demo1.html"</span>&gt;</span>当前窗口<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'a[href^="http://"]'</span>).attr(<span class="string">"target"</span>,<span class="string">"_blank"</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="输入框文字获取和失去焦点【推荐】"><a href="#输入框文字获取和失去焦点【推荐】" class="headerlink" title="输入框文字获取和失去焦点【推荐】"></a><font color="#099">输入框文字获取和失去焦点【推荐】</font></h3><a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"text1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">  $(<span class="string">"input.text1"</span>).val(<span class="string">"Enter your search text here."</span>);  </span></span><br><span class="line"><span class="javascript">  textFill( $(<span class="string">'input.text1'</span>) );  </span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">textFill</span>(<span class="params">input</span>)</span>&#123; <span class="comment">//input focus text function  </span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> originalvalue = input.val();  </span></span><br><span class="line"><span class="javascript">  input.focus( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>( $.trim(input.val()) == originalvalue )&#123;</span></span><br><span class="line"><span class="javascript">      input.val(<span class="string">''</span>); </span></span><br><span class="line">    &#125;  </span><br><span class="line"><span class="javascript">  &#125;).blur( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>( $.trim(input.val()) == <span class="string">''</span> )&#123; </span></span><br><span class="line">      input.val(originalvalue); </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="返回头部滑动动画"><a href="#返回头部滑动动画" class="headerlink" title="返回头部滑动动画"></a>返回头部滑动动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">jQuery.fn.scrollTo = <span class="function"><span class="keyword">function</span>(<span class="params">speed</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> targetOffset = $(<span class="keyword">this</span>).offset().top;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'html,body'</span>).stop().animate(&#123;<span class="attr">scrollTop</span>: targetOffset&#125;, speed);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="javascript"><span class="comment">// use</span></span></span><br><span class="line"><span class="javascript">$(<span class="string">"#goheader"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">"body"</span>).scrollTo(<span class="number">500</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="获取鼠标位置"><a href="#获取鼠标位置" class="headerlink" title="获取鼠标位置"></a>获取鼠标位置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"XY"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#XY'</span>).html(<span class="string">"X : "</span> + e.pageX + <span class="string">" | Y : "</span> + e.pageY);  </span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭所有-jQuery-动画效果"><a href="#关闭所有-jQuery-动画效果" class="headerlink" title="关闭所有 jQuery 动画效果"></a>关闭所有 jQuery 动画效果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fx.off = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<h3 id="检测鼠标的右键和左键"><a href="#检测鼠标的右键和左键" class="headerlink" title="检测鼠标的右键和左键"></a>检测鼠标的右键和左键</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#box'</span>).mousedown(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  alert(e.which);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="回车提交表单"><a href="#回车提交表单" class="headerlink" title="回车提交表单"></a>回车提交表单</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'input'</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.which == <span class="string">'13'</span>) &#123;</span><br><span class="line">      alert(<span class="string">'回车提交'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="切换复选框"><a href="#切换复选框" class="headerlink" title="切换复选框"></a>切换复选框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tog = <span class="literal">false</span>;</span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"input[type=checkbox]"</span>).attr(<span class="string">"checked"</span>,!tog);</span><br><span class="line">  tog = !tog;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="使用-siblings-来选择同辈元素"><a href="#使用-siblings-来选择同辈元素" class="headerlink" title="使用 siblings() 来选择同辈元素"></a>使用 siblings() 来选择同辈元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不这样做</span></span><br><span class="line">$(<span class="string">'#nav li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'#nav li'</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">  $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//替代做法是</span></span><br><span class="line">$(<span class="string">'#nav li'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="为任何与选择器相匹配的元素绑定事件"><a href="#为任何与选择器相匹配的元素绑定事件" class="headerlink" title="为任何与选择器相匹配的元素绑定事件"></a>为任何与选择器相匹配的元素绑定事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"table"</span>).on(<span class="string">"click"</span>,<span class="string">"td"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  $(<span class="keyword">this</span>).toggleClass(<span class="string">"hover"</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="proxy-的使用"><a href="#proxy-的使用" class="headerlink" title="$.proxy 的使用"></a>$.proxy 的使用</h3><p>使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#panel'</span>).fadeIn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#panel button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="keyword">this</span>).fadeOut();</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 <code>$.proxy</code> 方法解决这个问题，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#panel</span> &#123;</span></span><br><span class="line">      width: 300px;</span><br><span class="line">      height: 300px;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panel"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#panel'</span>).fadeIn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#panel button'</span>).click($.proxy(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="keyword">this</span>).fadeOut();</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样才正确执行。</p>
<h3 id="限制-Text-Area-域中的字符的个数"><a href="#限制-Text-Area-域中的字符的个数" class="headerlink" title="限制 Text-Area 域中的字符的个数"></a>限制 Text-Area 域中的字符的个数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"mytextarea"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    jQuery.fn.maxLength = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> type = <span class="keyword">this</span>.tagName.toLowerCase();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> inputType = <span class="keyword">this</span>.type? <span class="keyword">this</span>.type.toLowerCase() : <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(type == <span class="string">"input"</span> &amp;&amp; inputType == <span class="string">"text"</span> || inputType == <span class="string">"password"</span>)&#123;</span></span><br><span class="line"><span class="javascript">              <span class="comment">//应用标准的maxLength</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.maxLength = max;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="string">"textarea"</span>)&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.onkeypress = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ob = e || event;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> keyCode = ob.keyCode;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> hasSelection = <span class="built_in">document</span>.selection? <span class="built_in">document</span>.selection.createRange().text.length &gt; <span class="number">0</span> : <span class="keyword">this</span>.selectionStart != <span class="keyword">this</span>.selectionEnd;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> !(<span class="keyword">this</span>.value.length &gt;= max &amp;&amp; (keyCode &gt; <span class="number">50</span> || keyCode == <span class="number">32</span> || keyCode == <span class="number">0</span> || keyCode == <span class="number">13</span>) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);</span></span><br><span class="line">              &#125;;</span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.onkeyup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="keyword">this</span>.value.length &gt; max)&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.substring(<span class="number">0</span>,max);</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="comment">//use</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#mytextarea'</span>).maxLength(<span class="number">10</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="解析-json-数据时报-parseError-错误"><a href="#解析-json-数据时报-parseError-错误" class="headerlink" title="解析 json 数据时报 parseError 错误"></a>解析 json 数据时报 parseError 错误</h3><p>jQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.4之前版本，key没引号，这样没问题</span></span><br><span class="line">&#123;</span><br><span class="line">  key:"coco",</span><br><span class="line">  status:"0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但升级成jQuery1.4后，都必须加上双引号，格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"key"</span>:<span class="string">"coco"</span>,</span><br><span class="line">  <span class="attr">"status"</span>:<span class="string">"0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="从元素中除去-HTML"><a href="#从元素中除去-HTML" class="headerlink" title="从元素中除去 HTML"></a>从元素中除去 HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">$.fn.stripHtml = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">　<span class="keyword">var</span> regexp = <span class="regexp">/&lt;("[^"]*"|'[^']*'|[^'"&gt;])*&gt;/gi</span>; </span></span><br><span class="line"><span class="javascript">　<span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span></span><br><span class="line"><span class="javascript">  　$(<span class="keyword">this</span>).html( $(<span class="keyword">this</span>).html().replace(regexp,<span class="string">''</span>) ); </span></span><br><span class="line">　&#125;);</span><br><span class="line"><span class="javascript">　<span class="keyword">return</span> $(<span class="keyword">this</span>); </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;)(jQuery); </span><br><span class="line"><span class="javascript"><span class="comment">//用法： </span></span></span><br><span class="line"><span class="javascript">$(<span class="string">'div'</span>).stripHtml(); </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展-String-对象的方法"><a href="#扩展-String-对象的方法" class="headerlink" title="扩展 String 对象的方法"></a>扩展 String 对象的方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> &gt;</span>check<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $.extend(<span class="built_in">String</span>.prototype, &#123;</span></span><br><span class="line"><span class="javascript">  isPositiveInteger:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[1-9]\d*$/</span>).test(<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isInteger:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^\d+$/</span>).test(<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isNumber: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^-?(?:\d+|\d&#123;1,3&#125;(?:,\d&#123;3&#125;)+)(?:\.\d+)?$/</span>).test(<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  trim:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(^\s*)|(\s*$)|\r|\n/g</span>, <span class="string">""</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  trans:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">'&lt;'</span>).replace(<span class="regexp">/&amp;gt;/g</span>,<span class="string">'&gt;'</span>).replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'"'</span>);</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  replaceAll:<span class="function"><span class="keyword">function</span>(<span class="params">os, ns</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(os,<span class="string">"gm"</span>),ns);</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  skipChar:<span class="function"><span class="keyword">function</span>(<span class="params">ch</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="keyword">this</span> || <span class="keyword">this</span>.length===<span class="number">0</span>) &#123;<span class="keyword">return</span> <span class="string">''</span>;&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">this</span>.charAt(<span class="number">0</span>)===ch) &#123;<span class="keyword">return</span> <span class="keyword">this</span>.substring(<span class="number">1</span>).skipChar(ch);&#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>;</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isValidPwd:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^([_]|[a-zA-Z0-9])&#123;6,32&#125;$/</span>).test(<span class="keyword">this</span>)); </span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isValidMail:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/</span>).test(<span class="keyword">this</span>.trim()));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isSpaces:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.length; i+=<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ch = <span class="keyword">this</span>.charAt(i);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (ch!=<span class="string">' '</span>&amp;&amp; ch!=<span class="string">"\n"</span> &amp;&amp; ch!=<span class="string">"\t"</span> &amp;&amp; ch!=<span class="string">"\r"</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isPhone:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/(^([0-9]&#123;3,4&#125;[-])?\d&#123;3,8&#125;(-\d&#123;1,6&#125;)?$)|(^\([0-9]&#123;3,4&#125;\)\d&#123;3,8&#125;(\(\d&#123;1,6&#125;\))?$)|(^\d&#123;3,8&#125;$)/</span>).test(<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isUrl:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^[a-zA-z]+:\/\/([a-zA-Z0-9\-\.]+)([-\w .\/?%&amp;=:]*)$/</span>).test(<span class="keyword">this</span>));</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  isExternalUrl:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">this</span>.isUrl() &amp;&amp; <span class="keyword">this</span>.indexOf(<span class="string">"://"</span>+<span class="built_in">document</span>.domain) == <span class="number">-1</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(   $(<span class="string">"input"</span>).val().isInteger()  );</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中国国内 JavaScript 圈的现状如何]]></title>
      <url>https://addonepiece.github.io/2016/11/18/china-javascript-environment/</url>
      <content type="html"><![CDATA[<p id="div-border-top-purple"><span style="color:red;">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>

<p><img src="/images/javascript-environment-1.jpg" alt></p>
<hr>
<a id="more"></a>
<p id="div-border-left-green" style="position:relative; width:80%;margin-left:10%;">现状么<br>二五八万忙着造轮子步道<br>小白忙着加群拜山头<br>还有几个默默钻研又不为人知的<br>浮躁，自我，没劲<br>有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了<br>国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的<br>玻璃心洗洗睡吧 <i class="fa fa-twitter fa-3x" style="position:absolute; top:5px; left:-10%;color:#2780e3;"></i></p>

<hr>
<p id="div-border-right-yellow" style="position:relative; width:80%;margin-left:10%;">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。<br>　　放大些来看，不只前端，其他行业的观念也是如此。<br>　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。<br>　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class="fa fa-github fa-3x" style="position:absolute; top:5px; right:-10%;color:#9954bb;"></i></p>

<hr>
<p id="div-border-left-blue" style="position:relative; width:80%;margin-left:10%">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?<br>为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…<br>　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….<br>　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class="fa fa-laptop fa-3x" style="position:absolute; top:5px; left:-11%;"></i></p>

<hr>
<p id="div-border-right-red" style="position:relative;width:80%;margin-left:10%;">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】<br><br>水平不够只有搬运，擦屁股才是个技术活。<i class="fa fa-weixin fa-3x" style="position:absolute; top:5px; right:-11%;color:#5cb85c;"></i></p>

<hr>
<p id="div-border-left-purple" style="position:relative; width:80%;margin-left:10%;">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。<br>　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class="fa fa-youtube fa-3x" style="position:absolute; top:5px; left:-10%;color:#df3e3e;"></i></p>

<hr>
<p id="div-border-right-green" style="position:relative;width:80%;margin-left:10%;">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class="fa fa-tripadvisor fa-3x" style="position:absolute;top:5px;right:-12%;color:#f0ad4e;"></i></p>

<hr>
<p id="div-border-left-yellow" style="position:relative;width:80%;margin-left:10%;">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class="fa fa-stack-overflow fa-3x" style="position:absolute; top:5px; left:-10%;color:#2780e3;"></i></p>

<hr>
<p id="div-border-right-blue" style="position:relative;width:80%;margin-left:10%;">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class="fa fa-html5 fa-3x" style="position:absolute; top:5px; right:-10%; color:#df3e3e;"></i></p>

<hr>
<p id="div-border-left-red" style="position:relative;width:80%;margin-left:10%;">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class="fa fa-weibo fa-3x" style="position:absolute; top:5px; left:-11%;color:#f90;"></i></p>

<hr>
<p id="div-border-right-purple" style="position:relative;width:80%;margin-left:10%;">有优秀的轮子为什么不拿来用？<br>实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class="fa fa-qq fa-3x" style="position:absolute; top:5px; right:-10%; color:#2780e3;"></i></p>

<hr>
<p id="div-border-left-green" style="position:relative;width:80%;margin-left:10%;">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class="fa fa-android fa-3x" style="position:absolute; top:5px; left:-11%; color:#5cb85c;"></i></p>

<hr>
<p id="div-border-right-yellow" style="position:relative;width:80%;margin-left:10%;">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。<br>　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。<br>　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。<br><br>所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class="fa fa-apple fa-3x" style="position:absolute; top:5px; right:-10%; color:#555;"></i></p>

<hr>
<p id="div-border-left-blue" style="position:relative;width:80%;margin-left:10%;">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？<br>　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。<br>　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class="fa fa-chrome fa-3x" style="position:absolute; top:5px; left:-10%;color:#f0ad4e;"></i></p>

<hr>
<p id="div-border-right-red" style="position:relative;width:80%;margin-left:10%;">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。<br>　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。<br>　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class="fa fa-yelp fa-3x" style="position:absolute; top:5px; right:-10%;color:#2780e3;"></i></p>

<hr>
<p id="div-border-left-purple" style="position:relative;width:80%;margin-left:10%;">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”<br>　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）<br>　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。<br>　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？<br>　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。<br>　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？<br>　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。<br>　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！<br>　　语气重了点，希望大家见谅！<i class="fa fa-opencart fa-3x" style="position:absolute; top:5px; left:-11%;color:#df3e3e;"></i></p>

<hr>
<p id="div-border-right-green" style="position:relative;width:80%;margin-left:10%;">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class="fa fa-css3 fa-3x" style="position:absolute; top:5px; right:-10%;color:#9954bb;"></i></p>





<p><a href="https://www.zhihu.com/question/24317445" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（三）]]></title>
      <url>https://addonepiece.github.io/2016/11/11/hexo-next-three/</url>
      <content type="html"><![CDATA[<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 gitpage 上，并托管到 github 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>
<h2 id="一、菜单栏中标签与侧边栏中标签关联的问题"><a href="#一、菜单栏中标签与侧边栏中标签关联的问题" class="headerlink" title="一、菜单栏中标签与侧边栏中标签关联的问题"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示<strong>标签</strong>这一项，于是我在 <span id="inline-purple">主题配置文件</span> 中 将 menu 配置项中的<strong>标签</strong>这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href="https://addonepiece.github.io/tags/">https://addonepiece.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>
<a id="more"></a>
<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有 <strong>标签</strong> 这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id="inline-purple">主题配置文件</span> <code>\themes\next\layout\_macro\sidebar.swing_</code> 中，将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class="line">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</span><br><span class="line">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p>改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if site.tags.length &gt; 0 %&#125;</span><br><span class="line">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-red">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>


<h2 id="二、关于High一下中的音乐多次点击重叠播放的解决方案"><a href="#二、关于High一下中的音乐多次点击重叠播放的解决方案" class="headerlink" title="二、关于High一下中的音乐多次点击重叠播放的解决方案"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href="https://github.com/addonepiece/Blog" target="_blank" rel="noopener">https://github.com/addonepiece/Blog</a>。<br>关于播放音乐的代码是在： <a href="https://github.com/addonepiece/Blog/blob/master/themes/next/layout/_partials/header.swig" target="_blank" rel="noopener">https://github.com/addonepiece/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var songs = [</span><br><span class="line">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</span><br><span class="line">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<h2 id="三、关于github屏蔽vendors-，导致页面空白的解决方案"><a href="#三、关于github屏蔽vendors-，导致页面空白的解决方案" class="headerlink" title="三、关于github屏蔽vendors ，导致页面空白的解决方案"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 source/vendors 目录的访问，导致加载 vendor 里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加 <strong>.nojekyll</strong> 文件。<br>2.也可以手动将 source/vendors 目录修改成 source/lib 同时，修改主题配置文件 _config.yml ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>
<h2 id="四、关于如何获取自己的多说userid"><a href="#四、关于如何获取自己的多说userid" class="headerlink" title="四、关于如何获取自己的多说userid"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src="/images/hexo-next-three-1.png" alt><br>此时地址栏后面的一串数字就是你的多说 <strong>userid</strong>。<br><img src="/images/hexo-next-three-2.png" alt></p>
<h2 id="五、关于如何修改内容区域宽度"><a href="#五、关于如何修改内容区域宽度" class="headerlink" title="五、关于如何修改内容区域宽度"></a>五、关于如何修改内容区域宽度</h2><p>Next 对内容的宽度的设定如下：</p>
<ul>
<li>700px，当屏幕宽度 &lt; 1600px</li>
<li>900px，当屏幕宽度 &gt;= 1600px</li>
<li>移动设备下，宽度自适应</li>
</ul>
<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 source\css_variables\custom.styl 文件，新增变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure></p>
<p>此方法不适用于 Pisces Scheme ， Pisces Scheme 编辑 <code>themes\next\source\css\_schemes\Picses\_layout.styl</code> 文件，更改以下 css 选项定义值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.header &#123;width: 1150px;&#125;</span><br><span class="line">.container .main-inner &#123;width: 1150px;&#125;</span><br><span class="line">.content-wrap &#123;width: calc(100% - 260px);&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="六、图片模式"><a href="#六、图片模式" class="headerlink" title="六、图片模式"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\% gp x-x \%}...{\% endgp \%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Naruto-Pictures</span><br><span class="line">categories: [picture]</span><br><span class="line">tags: [picture,naruto]</span><br><span class="line">date: 2016-11-02 14:36:04</span><br><span class="line">type: &quot;picture&quot;</span><br><span class="line">---</span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</span><br><span class="line">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 图片展示效果 </strong><br><code>{\% gp 5-3 \%}</code>：设置图片展示效果，参考 <code>themes\next\scripts\tags\group-pictures.js</code> 注释示意图。<br><img src="/images/hexo-next-three-3.png" alt><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，Next 提供了多张图片的多种布局，你可以随意选择。</p>
<p></p><h3 style="color:#f63;">注意点</h3>主题目前首页可以正常显示设置的图片效果，但是点击进入后显示效果丢失，所以需要修改一下文件 <code>themes\next\source\css\_common\components\tags\group-pictures.styl</code> 中的以下样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-body</span> <span class="selector-class">.group-picture-column</span> &#123;</span><br><span class="line">  // float: none;</span><br><span class="line">  <span class="selector-tag">margin-top</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  // width: auto !important;</span><br><span class="line">  <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/addonepiece/addonepiece.github.io" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Sass 教程]]></title>
      <url>https://addonepiece.github.io/2016/10/23/sass/</url>
      <content type="html"><![CDATA[<p><span id="inline-blue" style="font-size:100%;border-radius:3px;">Sass</span>： (Syntactically Awesome StyleSheets)</p>
<h1 id="sass简介"><a href="#sass简介" class="headerlink" title="sass简介"></a>sass简介</h1><p>来自于官网的简介：<br>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>
<font color="red"> Sass 是世界上最成熟的，稳定的，功能强大的专业级 CSS 扩展语言。</font>

<a id="more"></a>
<h1 id="sass-安装"><a href="#sass-安装" class="headerlink" title="sass 安装"></a>sass 安装</h1><p>因为 sass 依赖 ruby 环境，所以装 sass 之前先确认安装了 ruby .<br>在安装的时候，请勾选 Add Ruby executables to your PATH 这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到 ruby 环境.<br><img src="http://i1.piimg.com/567571/3a876fb3bb575d25.png" alt></p>
<p>安装完 ruby 之后，在开始菜单中，打开我们的命令行，输入<br><code>ruby -v</code></p>
<p><img src="http://i1.piimg.com/567571/e5795e583371ce6d.png" alt><br>那么我们的 ruby 就安装成功了。</p>
<p>然后直接在命令行中输入<br><code>gem install sass</code><br>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>
<p>如果要安装 beta 版本的，可以在命令行中输入<br><code>gem install sass --pre</code></p>
<p>最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的 RubyGems 镜像安装 sass ，如果成功则忽略。<br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过 gem sources 命令来配置源，先移除默认的 <a href="https://rubygems.org" target="_blank" rel="noopener">https://rubygems.org</a> 源，然后添加淘宝的源 <code>https://ruby.taobao.org/</code> ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入 sass 安装命令 gem install sass 了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a https://ruby.taobao.org/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure>
<p>如果输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*** CURRENT SOURCES ***</span><br><span class="line">https://ruby.taobao.org</span><br></pre></td></tr></table></figure></p>
<p>则表示镜像替换成功，下一步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install sass</span><br></pre></td></tr></table></figure></p>
<p>按回车键确认，等待一段时间就会提示你 sass 安装成功。</p>
<p>如果你熟悉 git 命令的话，你还可以从 sass 的 Git repository 来安装，git 的命令行为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/nex3/sass.git</span><br><span class="line">cd sass</span><br><span class="line">rake install</span><br></pre></td></tr></table></figure></p>
<h1 id="如何升级-sass-版本"><a href="#如何升级-sass-版本" class="headerlink" title="如何升级 sass 版本"></a>如何升级 sass 版本</h1><p>我们可以使用命令 <code>gem update sass</code> 来升级我们的 sass 版本。</p>
<p>如果想要安装sass的某一特定版本，命令行为<br><code>gem install sass --version=3.3.0</code></p>
<p>如果想要删除sass的某一特定版本，命令行为<br><code>gem uninstall sass --version=3.3.0</code></p>
<p>卸载sass,命令行为<br><code>gem uninstall sass</code></p>
<p>查看sass版本的命令行为<br><code>sass -v</code></p>
<p>查看ruby安装的所有程序包，命令语句为 <code>gem list</code> 。</p>
<h1 id="sass-命令"><a href="#sass-命令" class="headerlink" title="sass 命令"></a>sass 命令</h1><p>安装成功 sass 以后，我们来写个 demo 测试一下：<br>创建一个 <code>style.scss</code> 文件：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSize</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>单文件转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass style.scss style.css</span><br></pre></td></tr></table></figure></p>
<p>单文件监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch style.scss:style.css</span><br></pre></td></tr></table></figure></p>
<p>文件夹监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch sassFileDirectory:cssFileDirectory</span><br></pre></td></tr></table></figure></p>
<p>css 文件转成 sass/scss 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sass-convert style.css style.sass</span><br><span class="line">sass-convert style.css style.scss</span><br></pre></td></tr></table></figure></p>
<h2 id="sass-命令配置选项"><a href="#sass-命令配置选项" class="headerlink" title="sass 命令配置选项"></a>sass 命令配置选项</h2><p>运行命令行帮助文档，可以获得所有的配置选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass -h</span><br></pre></td></tr></table></figure></p>
<p>配置选项 <code>--style</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass style.scss:style.css --style compact</span><br></pre></td></tr></table></figure></p>
<p><code>--style</code> 表示解析后的 css 是什么格式，有四种取值分别为：expanded ，nested ，compact ，compressed 。</p>
<p>配置选项 <code>--sourcemap</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass style.scss:style.css --sourcemap</span><br></pre></td></tr></table></figure></p>
<p><code>--sourcemap</code> 表示开启 sourcemap 调试。开启 sourcemap 调试后，会生成一个后缀名为 .css.map 文件。</p>
<p>配置选项 <code>--debug-info</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass style.scss:style.css --debug-info</span><br></pre></td></tr></table></figure></p>
<p><code>--debug-info</code> 表示开启 debug 信息，升级到 3.3.0 之后因为 sourcemap 更高级，这个 debug-info 就不太用了。</p>
<h1 id="sass语法"><a href="#sass语法" class="headerlink" title="sass语法"></a>sass语法</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>在介绍 sass 语法之前，最有必要的是先来了解一下 sass 中的注释。<br>sass 有两种注释方式，一种是标准的 css 注释方式 <code>/* */</code>，另一种则是 <code>//</code> 双斜杆形式的单行注释，不过这种单行注释不会被转译出来，也就是说 <code>//</code> 这种注释不会转译到编译后的 css 文件中。</p>
<p>需要说明的是：如果你的注释中有中文的话，请务必在 scss 文件开头加上：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@charset</span> <span class="string">"UTF-8"</span>;</span><br></pre></td></tr></table></figure></p>
<p>如果没有这个的话，会报错。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>sass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像 CSS 属性设置一样），如果值后面加上 !default 则表示默认值。<br>普通变量<br>定义之后可以在全局范围内使用。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSize</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><p>sass 的默认变量仅需要在值后面加上 <code>!default</code> 即可。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span> !default;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$baseLineHeight</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span> !default;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$baseLineHeight</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">2</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="variable">$baseLineHeight</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个相当于给 $baseLineHeight 设置了一个默认值，如果你想重新设置的话，可以再写一个 $baseLineHeight 的属性值来覆盖它。</p>
<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><p>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 <code>#{$variables}</code> 形式使用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$borderDirection</span>: top !default;</span><br><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">12px</span> !default;</span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用于 class 和属性</span></span><br><span class="line"><span class="selector-class">.border-</span>#&#123;<span class="variable">$borderDirection</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">border</span>-#&#123;<span class="variable">$borderDirection</span>&#125;: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//应用于复杂的属性值</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>:#&#123;<span class="variable">$baseFontSize</span>&#125;/#&#123;<span class="variable">$baseLineHeight</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个地方我们如果不用 <code>#{$variables}</code> 形式的话，那么结果中 body 的样式就是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这显然不是我们想要的。</p>
<h3 id="多值变量"><a href="#多值变量" class="headerlink" title="多值变量"></a>多值变量</h3><p>多值变量分为 list 类型和 map 类型，简单来说 list 类型有点像 js 中的数组，而 map 类型有点像 js 中的对象。</p>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>list 数据可通过空格，逗号或小括号分隔多个值，可用 nth($var,$index) 取值。关于 list 数据操作还有很多其他函数如 <code>length($list)</code> ， <code>join($list,$list2,[$separator])</code> ， <code>append($list,$value,[$separator])</code> 等。</p>
<p>定义<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一维数组</span></span><br><span class="line"><span class="variable">$px</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="variable">$px</span>: <span class="number">5px</span> <span class="number">10px</span>, <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line"><span class="variable">$px</span>: (<span class="number">5px</span> <span class="number">10px</span>) (<span class="number">20px</span> <span class="number">30px</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$linkColor</span>: <span class="number">#08c</span> <span class="number">#333</span> !default;<span class="comment">//第一个值为默认值，第二个鼠标滑过值</span></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:nth(<span class="variable">$linkColor</span>,<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#08c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map 数据以 key和 value 成对出现，其中 value 又可以是 list 。格式为： <code>$map:(key1: value1,key2:value2,key3:value3);</code> 。可通过 <code>map-get($map,$key)</code> 取值。关于map数据还有很多其他函数如 <code>map-merge($map1,$map2)</code> ， <code>map-keys($map)</code> ， <code>map-values($map)</code> 等。</p>
<p>定义<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$heading</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$headings</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headings</span> &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>在变量值后面加上 !global 即为全局变量。<br>在选择器中声明的变量会覆盖外面全局声明的变量。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSize</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="variable">$fontSize</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>启用global之后的机制</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontSize</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="variable">$fontSize</span>: <span class="number">14px</span> !global;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了 !global 之后才会成为全局变量。</p>
<h2 id="嵌套-Nesting"><a href="#嵌套-Nesting" class="headerlink" title="嵌套(Nesting)"></a>嵌套(Nesting)</h2><p>sass 的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。</p>
<h3 id="选择器嵌套"><a href="#选择器嵌套" class="headerlink" title="选择器嵌套"></a>选择器嵌套</h3><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了 sass 文件的结构性和可读性。<br>在选择器嵌套中，可以使用 <code>&amp;</code> 表示父元素选择器</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#top_nav</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fakeshadow</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    <span class="attribute">left</span>: &#123;</span><br><span class="line">      width: <span class="number">4px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">right</span>: &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然这个只是属性嵌套的一个例子，在实际中这样来写 <code>border</code> 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。</p>
<h2 id="at-root"><a href="#at-root" class="headerlink" title="@at-root"></a>@at-root</h2><p>sass3.3.0 中新增的功能，用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</p>
<h3 id="普通跳出嵌套"><a href="#普通跳出嵌套" class="headerlink" title="普通跳出嵌套"></a>普通跳出嵌套</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*没有跳出*/</span></span><br><span class="line"><span class="selector-class">.parent-1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*单个选择器跳出*/</span><br><span class="line">.parent-<span class="number">2</span> &#123;</span><br><span class="line">  color: <span class="number">#f00</span>;</span><br><span class="line">  <span class="keyword">@at-root</span> .child &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*多个选择器跳出*/</span></span><br><span class="line"><span class="selector-class">.parent-3</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f00</span>;</span><br><span class="line">  <span class="keyword">@at-root</span> &#123;</span><br><span class="line">    <span class="selector-class">.child1</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.child2</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认 <code>@at-root</code> 只会跳出选择器嵌套，而不能跳出 <code>@media</code> 或 <code>@support</code> ，如果要跳出这两种，则需要使用 <code>@at-root(without:media)</code> ，<code>@at-root(without:support)</code> 。这个语法的关键词有四个： <code>all</code> （表示所有），<code>true</code>（表示常规CSS）， <code>media</code>（表示media）， ‘support’（表示support，因为 <code>@support</code> 目前还无法广泛使用）。我们默认的 <code>@at-root</code> 其实就是 <code>@at-root(without:rule)</code> 。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.parent1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="keyword">@at-root</span> .child1 &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">200px</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//跳出media嵌套，父级有效</span><br><span class="line">@media print &#123;</span><br><span class="line">  .parent2 &#123;</span><br><span class="line">    color: <span class="number">#f00</span>;</span><br><span class="line">    <span class="keyword">@at-root</span> (without:media) &#123;</span><br><span class="line">      <span class="selector-class">.child2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//跳出media和父级</span></span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.parent3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">    <span class="keyword">@at-root</span> (without:all) &#123;</span><br><span class="line">      <span class="selector-class">.child3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@at-root</code> 与 <code>&amp;</code> 配合使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="keyword">@at-root</span> .parent &amp; &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>应用于<code>@keyframe</code><br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attribute">animation</span>: motion <span class="number">3s</span> infinite;</span><br><span class="line">  <span class="keyword">@at-root</span> &#123;</span><br><span class="line">    <span class="keyword">@keyframes</span> motion &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    ...   </span><br><span class="line">    <span class="attribute">animation</span>: motion <span class="number">3s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> motion &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我认为 <code>@at-root</code> 应用于 <code>@keyframe</code> 或许是 <code>@at-root</code> 最好的实践。<br>跳出嵌套，我们为什么要用 <code>@at-root</code> 来实现呢？我们完全可以在写样式的时候，不使用嵌套的写法。<br>但是 <code>@keyframe</code> 就不一样了，这个动画应用于当前选择器，所以把动画样式写入这个选择器的结构里，方便修改与查看。<br>相比于之前在 css 中使用 @keyframe 来定义动画，然后在元素中调用，如果一个文件中 @keyframe 比较多的话，在我们想要调用动画的时候，动画与元素之间的关联性比较差。</p>
<h2 id="混合-mixin"><a href="#混合-mixin" class="headerlink" title="混合(mixin)"></a>混合(mixin)</h2><p>sass 中使用 <code>@mixin</code> 声明混合，可以传递参数，参数名以 $ 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 @mixin 通过 @include 来调用。</p>
<h3 id="无参数mixin"><a href="#无参数mixin" class="headerlink" title="无参数mixin"></a>无参数mixin</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> center-block &#123;</span><br><span class="line">  <span class="attribute">margin</span>: &#123;</span><br><span class="line">    left: auto;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> center-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:auto;</span><br><span class="line">    <span class="attribute">margin-right</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="有参数mixin"><a href="#有参数mixin" class="headerlink" title="有参数mixin"></a>有参数mixin</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> opacity(<span class="variable">$opacity</span>: <span class="number">50</span>) &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="variable">$opacity</span> / <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">filter</span>: alpha(opacity=<span class="variable">$opacity</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opacity</span>&#123;</span><br><span class="line">  <span class="keyword">@include</span> opacity; <span class="comment">//参数使用默认值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.opacity-80</span>&#123;</span><br><span class="line">  <span class="keyword">@include</span> opacity(<span class="number">80</span>); <span class="comment">//传递参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多个参数mixin"><a href="#多个参数mixin" class="headerlink" title="多个参数mixin"></a>多个参数mixin</h3><p>调用时可直接传入值，如 <code>@include</code> 传入参数的个数小于 <code>@mixin</code> 定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> horizontal-line(<span class="variable">$border</span>:<span class="number">1px</span> dashed <span class="number">#ccc</span>,<span class="variable">$padding</span>:<span class="number">10px</span>) &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="variable">$border</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="variable">$padding</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="variable">$padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgtext-h</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> horizontal-line(<span class="number">1px</span> solid <span class="number">#ccc</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgtext-h-product</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> horizontal-line(<span class="variable">$padding</span>:<span class="number">15px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.imgtext-h</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.imgtext-h--product</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dashed <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="多组值参数mixin"><a href="#多组值参数mixin" class="headerlink" title="多组值参数mixin"></a>多组值参数mixin</h3><p>如果一个参数可以有多组值，如 <code>box-shadow</code> 、<code>transition</code> 等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code> 。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//box-shadow可以有多组值，所以在变量参数后面添加...</span></span><br><span class="line"><span class="keyword">@mixin</span> box-shadow(<span class="variable">$shadow</span>...) &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">$shadow</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$shadow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="keyword">@include</span> box-shadow (<span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>),<span class="number">0</span> <span class="number">3px</span> <span class="number">3px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>),<span class="number">0</span> <span class="number">4px</span> <span class="number">4px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="content"><a href="#content" class="headerlink" title="@content"></a>@content</h2><p>@content 可以用来解决 css3 的 @media 等带来的问题。它可以使 @mixin 接受一整块样式，接受的样式从 @content 开始。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> max-screen(<span class="variable">$res</span>) &#123;</span><br><span class="line">  <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (max-width:<span class="variable">$res</span>) &#123;</span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@include</span> max-screen(<span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>PS：@mixin 通过 @include 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从 3.2.0 版本以后，建议传递参数的用 @mixin ，而非传递参数的使用下面的继承 % 。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>sass 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 @extend ，后面紧跟需要继承的选择器。</p>
<p>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#ff9aa9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.speaker</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> h1;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-class">.speaker</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#ff9aa9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.speaker</span>&#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看出，选择器继承生成的样式不是拷贝的形式，而是以联合声明的方式存在的。</p>
<h3 id="继承的工作细节"><a href="#继承的工作细节" class="headerlink" title="继承的工作细节"></a>继承的工作细节</h3><p>关于 @extend 有两个要点你应该知道：</p>
<p>1、跟混合器相比，继承生成的 css 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>举个例子，使用混合器的时候：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border-colors &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo1</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border-colors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border-colors; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它生成的 <code>css</code> 如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用继承的时候：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.demo2</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .demo1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它生成的 <code>css</code> 如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo1</span>, <span class="selector-class">.demo2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 css 体积更小。</p>
<p>2、继承遵从 css 层叠的规则。当两个不同的 css 规则应用到同一个 html 元素上时，并且这两个不同的 css 规则对同一属性的修饰存在不同的值， css 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</p>
<p>混合器本身不会引起 css 层叠的问题，因为混合器把样式直接放到了 css 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。</p>
<h3 id="使用继承的最佳实践"><a href="#使用继承的最佳实践" class="headerlink" title="使用继承的最佳实践"></a>使用继承的最佳实践</h3><p>通常使用继承会让你的 css 美观、整洁。因为继承只会在生成 css 时复制选择器，而不会复制大段的 css 属性。但是如果你不小心，可能会让生成的 css 中包含大量的选择器复制。<br>避免这种情况出现的最好方法就是不要在 css 规则中使用后代选择器（比如 .foo .bar）去继承 css 规则。如果你这么做，同时被继承的 css 规则有通过后代选择器修饰的样式，生成 css 中的选择器的数量很快就会失控。<br>例如：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bip</span> <span class="selector-class">.baz</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foo</span> <span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .baz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成的css如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bip</span> <span class="selector-class">.baz</span>, <span class="selector-class">.bip</span> <span class="selector-class">.foo</span> <span class="selector-class">.bar</span>, <span class="selector-class">.foo</span> <span class="selector-class">.bip</span> <span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所以如果允许，尽可能避免这种用法。<br><strong> 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 </strong></p>
<h2 id="占位选择器"><a href="#占位选择器" class="headerlink" title="占位选择器 %"></a>占位选择器 %</h2><p>从 sass 3.2.0 以后就可以定义占位选择器 % 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 @extend 去继承相应的样式，都会解析出来所有的样式。占位选择器以 % 标识定义，通过 @extend 调用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">%ir &#123;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>: none;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$lte7</span>:true !default;</span><br><span class="line">%clearfix &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$lte7</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span>,&amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">0</span>/<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> %ir;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ir &#123;</span><br><span class="line">  @extend %ir;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如上代码，定义了两个占位选择器 <code>%ir</code> 和 <code>%clearfix</code> ，其中 <code>%clearfix</code> 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。<br>ps:在 @media 中暂时不能 @extend ， @media 外的代码片段，以后将会可以。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>sass 定义了很多函数可供使用，当然你也可以自己定义函数，以 @function 开始。sass 的官方函数链接为：<a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="noopener">sass function</a> ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 lighten 减淡和 darken 加深使用最多，其调用方法为 <code>lighten($color,$amout)</code> 和 <code>darken($color,$amount)</code> ，它们的第一个参数都是颜色值，第二个参数都是百分比。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">10px</span> !default;</span><br><span class="line"><span class="variable">$gray</span>: <span class="number">#ccc</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> pxToRem(<span class="variable">$px</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$baseFontSize</span>;</span><br><span class="line">  <span class="attribute">color</span>: lighten(<span class="variable">$gray</span>,<span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: pxToRem(<span class="number">16px</span>);</span><br><span class="line">  <span class="attribute">color</span>: darken(<span class="variable">$gray</span>,<span class="number">10%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于 @mixin ，% ，@function 更多说明可参阅：<br><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html" target="_blank" rel="noopener">sass文档</a></p>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>sass 具有运算的特性，可以对数值型的 Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">14px</span> !default;</span><br><span class="line"><span class="variable">$baseLineHeight</span>: <span class="number">1.5</span> !default;</span><br><span class="line"><span class="variable">$baseGap</span>: <span class="variable">$baseFontSize</span> * <span class="variable">$baseLineHeight</span> !default;</span><br><span class="line"><span class="selector-class">.balber</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$baseGap</span>;    <span class="comment">//21px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="条件判断及循环"><a href="#条件判断及循环" class="headerlink" title="条件判断及循环"></a>条件判断及循环</h2><h3 id="if判断"><a href="#if判断" class="headerlink" title="@if判断"></a>@if判断</h3><p>@if 可一个条件单独使用，也可以和 @else 结合多条件使用。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lte7</span>: true;</span><br><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-class">.ib</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$lte7</span> &#123;</span><br><span class="line">        *<span class="attribute">display</span>:inline;</span><br><span class="line">        *zoom:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == matador &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成的 css 如下：</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ib</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  *<span class="attribute">display</span>: inline;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三目判断"><a href="#三目判断" class="headerlink" title="三目判断"></a>三目判断</h3><p>语法为：<code>if($condition,$if_true,$if_false)</code>。<br>三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if(true,1px,2px) =&gt; 1px</span><br><span class="line">if(false,1px,2px) =&gt; 2px</span><br></pre></td></tr></table></figure></p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for 循环有两种形式，分别为：<br><code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code> 。<br>$i 表示变量，start 表示起始值，end 表示结束值，这两个的区别是关键字 through 表示包括 end 这个数，而 to 则不包括 end 这个数。<br>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">5</span> to <span class="number">7</span> &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="each循环"><a href="#each循环" class="headerlink" title="each循环"></a>each循环</h3><p>语法为：<code>@each $var in &lt;list or map&gt;</code> 。<br>其中 $var 表示变量，而 list 和 map 表示 list 类型数据和 map 类型数据。sass 3.3.0 新加入了多字段循环和 map 数据循环。</p>
<h4 id="单个字段-list-数据循环"><a href="#单个字段-list-数据循环" class="headerlink" title="单个字段 list 数据循环"></a>单个字段 list 数据循环</h4><p>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$animal-list</span>: puma, sea-slug, egret, salamander;</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span> in <span class="variable">$animal-list</span> &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/puma.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/sea-slug.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/egret.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/salamander.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="多个字段-list-数据循环"><a href="#多个字段-list-数据循环" class="headerlink" title="多个字段 list 数据循环"></a>多个字段 list 数据循环</h4><p>使用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$animal-data</span>: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$animal</span>, <span class="variable">$color</span>, <span class="variable">$cursor</span> in <span class="variable">$animal-data</span> &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/#&#123;$animal&#125;.png'</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$color</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="variable">$cursor</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/puma.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">  <span class="attribute">cursor</span>: default; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/sea-slug.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'/images/egret.png'</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">  <span class="attribute">cursor</span>: move; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="多个字段-map-数据循环"><a href="#多个字段-map-数据循环" class="headerlink" title="多个字段 map 数据循环"></a>多个字段 map 数据循环</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$headings</span>: (h1: <span class="number">2em</span>, h2: <span class="number">1.5em</span>, h3: <span class="number">1.2em</span>);</span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$header</span>, <span class="variable">$size</span> in <span class="variable">$headings</span> &#123;</span><br><span class="line">  #&#123;<span class="variable">$header</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文介绍了 sass 最基本部分,你可以轻松地使用 sass 编写清晰、无冗余、语义化的 css 。对于 sass 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。</p>
<p><a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html" target="_blank" rel="noopener">sass文档</a><br><a href="http://sass-lang.com/documentation/Sass/Script/Functions.html" target="_blank" rel="noopener">sass函数列表</a><br><a href="https://sass-guidelin.es/zh/" target="_blank" rel="noopener">sass guidelines</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【转】在2016年学JavaScript是一种什么样的体验]]></title>
      <url>https://addonepiece.github.io/2016/10/16/how-it-feels-to-learn-javascript-in-2016/</url>
      <content type="html"><![CDATA[<p id="div-border-left-blue" style="width:90%;">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>

<p id="div-border-left-blue" style="width:90%">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>

<a id="more"></a>
<p id="div-border-left-blue" style="width:90%">哦，好吧，React 是什么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>

<p id="div-border-left-blue" style="width:90%">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>

<p id="div-border-left-blue" style="width:90%">额，等下，为什么是两个库？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>

<p id="div-border-left-blue" style="width:90%">JSX？JSX 是什么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>

<p id="div-border-left-blue" style="width:90%">为什么不用 HTML 了……？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">现在可是 2016 年啊，没有直接写 HTML 的。</p>

<p id="div-border-left-blue" style="width:90%">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">不行哦。你需要添加 Babel，然后才能用 React。</p>

<p id="div-border-left-blue" style="width:90%">Babel 是另一个库？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>

<p id="div-border-left-blue" style="width:90%">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>

<p id="div-border-left-blue" style="width:90%">ECMAScript 是啥……</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>

<p id="div-border-left-blue" style="width:90%">7 个版本？那 ES5 和 ES2016+ 是？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">分别是第 5 个版本和第 7 个版本。</p>

<p id="div-border-left-blue" style="width:90%">诶，那第六个版本呢？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>

<p id="div-border-left-blue" style="width:90%">对哦。为什么不用 ES6 呢？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>

<p id="div-border-left-blue" style="width:90%">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>

<p id="div-border-left-blue" style="width:90%">好吧，所以我现在要加载三个库才能获取并展示数据。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>

<p id="div-border-left-blue" style="width:90%">哦，什么是模块管理器……</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>

<p id="div-border-left-blue" style="width:90%">好……吧，什么是 AMD 和 CommonJS？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>

<p id="div-border-left-blue" style="width:90%">听起来很有道理。不过，什么是 Browserify？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>

<p id="div-border-left-blue" style="width:90%">npm 仓库是什么……</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是一个公开的仓库，用于放置可依赖的模块。</p>

<p id="div-border-left-blue" style="width:90%">就像一个 CDN 么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>

<p id="div-border-left-blue" style="width:90%">听起来像是 Bower！</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>

<p id="div-border-left-blue" style="width:90%">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>

<p id="div-border-left-blue" style="width:90%">嗯，Angular 也可以。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>

<p id="div-border-left-blue" style="width:90%">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的。</p>

<p id="div-border-left-blue" style="width:90%">这么做看起来有点过于复杂啊。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>

<p id="div-border-left-blue" style="width:90%">你在说什么……</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>

<p id="div-border-left-blue" style="width:90%">我以为只有 C/C++ 项目才会用 Makefiles。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>

<p id="div-border-left-blue" style="width:90%">唉，你刚才说的 Webpack 是什么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>

<p id="div-border-left-blue" style="width:90%">哦，好吧，为什么 Webpack 是加强版？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>

<p id="div-border-left-blue" style="width:90%">这都是哪跟哪啊，我都被绕晕了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>

<p id="div-border-left-blue" style="width:90%">天呐，又一个 JS 库，这是什么鬼？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>

<p id="div-border-left-blue" style="width:90%">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>

<p id="div-border-left-blue" style="width:90%">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>

<p id="div-border-left-blue" style="width:90%">唉，这么鹾？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>

<p id="div-border-left-blue" style="width:90%">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>

<p id="div-border-left-blue" style="width:90%">Typescript？我们不是在说 JavaScript 吗？！</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>

<p id="div-border-left-blue" style="width:90%">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>

<p id="div-border-left-blue" style="width:90%">显然 Typescript 可以做到。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>

<p id="div-border-left-blue" style="width:90%">唉，Flow 是？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>

<p id="div-border-left-blue" style="width:90%">OCaml？函数式编程？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>

<p id="div-border-left-blue" style="width:90%">不知道你在说什么。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>

<p id="div-border-left-blue" style="width:90%">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>

<p id="div-border-left-blue" style="width:90%">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>

<p id="div-border-left-blue" style="width:90%">谁？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">David Chambers，大神一个。blablabla</p>

<p id="div-border-left-blue" style="width:90%">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>

<p id="div-border-left-blue" style="width:90%">回到 React 吧，用 React 我怎么从服务器获取数据？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">额，React 没有提供这个功能，你只能用 React 展示数据。</p>

<p id="div-border-left-blue" style="width:90%">服了啊。那我怎么获取数据？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">你用 Fetch API 就可以了。</p>

<p id="div-border-left-blue" style="width:90%">啥玩意？这个 API 的名字很烂啊。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>

<p id="div-border-left-blue" style="width:90%">哦，那不就是 AJAX。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>

<p id="div-border-left-blue" style="width:90%">回调地狱？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>

<p id="div-border-left-blue" style="width:90%">好吧。Promise 解决了这个问题么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>

<p id="div-border-left-blue" style="width:90%">Fetch 也能做到吗？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>

<p id="div-border-left-blue" style="width:90%">天呐我到底需要多少个库？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>

<p id="div-border-left-blue" style="width:90%">你刚才说的几个库都是干什么的？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>

<p id="div-border-left-blue" style="width:90%">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>

<p id="div-border-left-blue" style="width:90%">这是你第三次说 await 了，那是什么东西？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>

<p id="div-border-left-blue" style="width:90%">听起来像是疯了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>

<p id="div-border-left-blue" style="width:90%">啥玩意？Typescript 不支持 await？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">下个版本就支持了。</p>

<p id="div-border-left-blue" style="width:90%">我已经无话可说了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>

<p id="div-border-left-blue" style="width:90%">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">你的网页需要处理状态变更吗？</p>

<p id="div-border-left-blue" style="width:90%">唔，不用吧。我只是想展示数据。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>

<p id="div-border-left-blue" style="width:90%">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>

<p id="div-border-left-blue" style="width:90%">你逗我呢？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我只是告诉你你可以用什么技术。</p>

<p id="div-border-left-blue" style="width:90%">别说了，真的。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>

<p id="div-border-left-blue" style="width:90%">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">有很多，你用过哪一个？</p>

<p id="div-border-left-blue" style="width:90%">额，太久没用了，不记得了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">jTemplates、jQote 还是 PURE？</p>

<p id="div-border-left-blue" style="width:90%">额，不记得，还有别的么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>

<p id="div-border-left-blue" style="width:90%">还有吗？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>

<p id="div-border-left-blue" style="width:90%">有点像。有哪些跟最后一个比较像的？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>

<p id="div-border-left-blue" style="width:90%">额，也许是再新一点的库？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">Jade? DustJS？</p>

<p id="div-border-left-blue" style="width:90%">没用过</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">DotJS? EJS？</p>

<p id="div-border-left-blue" style="width:90%">没用过。</p><p id="div-border-right-green" style="width:90%;margin-left:10%">Nunjucks? ECT?</p>

<p id="div-border-left-blue" style="width:90%">没用过。记不起来了，要是你的话，你用哪个？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我应该会用 ES6 原生的模板字符串</p>

<p id="div-border-left-blue" style="width:90%">我猜猜，只有 ES6 支持。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">需要用 Babel</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">需要用 npm 安装</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">需要用 Browserify 或者 Webpack，或者 SystemJS</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">如果我要用 await，那我就必须用 Babel 转译。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">对的。</p>

<p id="div-border-left-blue" style="width:90%">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>

<p id="div-border-left-blue" style="width:90%">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>

<p id="div-border-left-blue" style="width:90%">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">我理解你。我建议你去 Python 社区。</p>

<p id="div-border-left-blue" style="width:90%">为什么？</p>

<p id="div-border-right-green" style="width:90%;margin-left:10%">听说过 Python 3 吗？</p><br><p id="div-border-top-blue"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>

<p>译者：方应杭<br><a href="https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f" target="_blank" rel="noopener">原文</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git学习总结]]></title>
      <url>https://addonepiece.github.io/2016/10/07/git/</url>
      <content type="html"><![CDATA[<h2 id="git-简介"><a href="#git-简介" class="headerlink" title="git 简介"></a>git 简介</h2><p>git 是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。<br>在 git 中，工作目录下面的所有文件都不外乎这两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>
<a id="more"></a>
<h2 id="实用指令详解"><a href="#实用指令详解" class="headerlink" title="实用指令详解"></a>实用指令详解</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>通常，合并分支时，如果可能，Git 会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。<br>如果要强制禁用 Fast forward 模式，Git 就会在 merge 时生成一个新的 commit ，这样，从分支历史上就可以看出分支信息。<br><code>git merge --no-ff -m &#39;merge  with no-ff&#39; dev</code><br>因为本次合并要创建一个新的 commit，所以加上 -m 参数，把 commit 描述写进去。</p>
<p>合并分支时，加上 <code>--no-ff</code> 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而 fast forward 合并就看不出来曾经做过合并。</p>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>一旦远程主机的版本库有了更新(git 术语叫做 commit)，需要将这些更新取回本地，这时就要用到 git fetch 命令。<br><code>git fetch &lt;远程主机名&gt;</code><br>上面命令将某个远程主机的更新，全部取回本地。<br>默认情况下，git fetch 取回所有分支(branch)的更新。如果只想取回特定分支的更新，可以指定分支名。<br><code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code><br>比如，取回 origin 主机的 master 分支<br><code>git fetch origin master</code><br>所取回的更新，在本地主机上要用“远程主机名/分支名”的形式读取。比如 origin 主机的 master，就要用 origin/master 读取。</p>
<p><code>git fetch -p</code> ：取回远程更新，删除不存在的分支。</p>
<h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>git pull 命令的作用是，取回远程主机的某个分支的更新，再与本地的指定分支合并，完整格式如下：<br><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code><br>比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样。<br><code>git pull origin next:master</code><br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br><code>git pull origin master</code><br>上面的命令表示，取回 origin/master 分支，再与当前分支合并。实质上，这等同于先做 git fetch，再 merge。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure></p>
<p>在某些场合，git 会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在 git clone 的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的 master 分支自动“追踪” origin/master 分支。<br>git 也允许手动建立追踪关系。<br><code>git branch --set-upstream master origin/next</code><br>上面的命令指定 master 分支追踪 origin/next 分支。<br>如果当前分支与远程分支存在追踪关系，git pull 就可以省略远程分支名。<br><code>git pull origin</code><br>上面命令表示，本地的当前分支自动与对应的 origin 主机“追踪分支”(remote-tracking branch)进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以忽略。<br><code>git pull</code><br>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。<br>如果合并需要采用 rebase 模式，可以使用 -rebase 选项。<br><code>git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code></p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>git push 命令用于将本地分支的更新，推送到远程主机。它的格式与 git pull 命令相仿。<br><code>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code><br>如果省略远程分支名，则表示将本地分支推送与之存在“追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。<br><code>git push origin master</code><br>上面命令表示，将本地的 master 分支推送到 origin 主机的 master 分支。如果后者不存在，则会被新建。<br><strong>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</strong><br><code>git push origin :master</code><br>等同于<br><code>git push origin --delete master</code><br>上面命令表示删除 origin 主机的 master 分支。<br>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。<br><code>git push origin</code><br>上面命令表示，将当前分支推送到 origin 主机的对应分支。<br>如果当前分支只有一个追踪分支，那么主机名都可以省略。<br><code>git push</code><br>如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 git push 。<br><code>git push -u origin master</code><br>上面的命令将本地 master 分支推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用 git push 了。<br>不带任何参数的 git push ，默认只推送当前分支，这叫做 simple 方式。此外，还有一种 matching 方式，会推送所有有对应的远程分支的本地分支。<br>git 2.0 版本之前，默认采用 matching 方式，现在改为默认采用 simple 方式，如果要修改这个设置，可以采用 git config 命令。<br><code>git config --global push.default matching</code><br>或者<br><code>git config --global push.default simple</code><br>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用 -all 选项。<br><code>git push --all origin</code><br>上面命令表示，将所有本地分支都推送到 origin 主机。<br>如果远程主机的版本比本地版本更新，推送时 git 会报错，要求先在本地做 git pull 合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用 -force 选项。<br><code>git push --force origin</code><br>上面命令使用-force选项，结果导致在远程主机产生一个“非直进式”的合并(non-fast-forward merge)。除非你很确定要这样做，否则应该尽量避免使用 -force 选项。<br>最后，git push 不会推送标签(tag)，除非使用 -tags 选项。<br><code>git push origin --tags</code></p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><p><code>git log</code> 命令可以查看历史记录，<code>git log</code> 命令显示从最近到最远的提交日志；<br>如果嫌输出信息太多，看得眼花缭乱的，可以试试 <code>git log --pretty=oneline</code> 。我们可以看到当前版本以及之前的版本日志以及版本号。<br>用 <code>git log --graph</code> 命令可以看到分支合并图。<br>或者两个参数一起用：<br><code>git log --graph --pretty=oneline</code><br><code>git log --graph --pretty=oneline --abbrev-commit</code><br>首先，git 必须知道当前版本是哪个版本，在 git 中，用 HEAD 表示当前版本，上一个版本就是 <code>HEAD^</code> ，上上一个版本就是 <code>HEAD^^</code> ， 当然往上100个版本写100个 <code>^</code> 比较容易数不过来，所以写成 <code>HEAD~100</code> 。<br>现在，我们要把当前版本回退到上一个版本，就可以使用 <code>git reset</code> 命令：<br><code>git reset --hard HEAD^</code><br>当你回退到了某个版本后，<code>git log</code> 只能显示此版本及之前的版本的日志，之后的版本日志就看不到了，但是，我们想恢复到之后教新的版本怎么办？<br>Git 提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令</p>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>查看标签（用来标记标志性的稳定版本信息）<br>发布一个版本时，我们通常先在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。<br>相比于 commit 的版本号(40位16进制)，标签号则要好使的多。<br>所以，tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑定在一起。</p>
<p><code>git tag [tag name]</code><br>如果没有标签名，则为查看所有标签，带标签名则为新建标签</p>
<p><code>git tag &lt;tag name&gt;</code> 就可以打一个新标签</p>
<p>还可以创建带有说明的标签，用 -a 指定标签名，-m 指定说明文字。<br><code>git tag -a &lt;tag name&gt; -m &lt;comment&gt;</code> ：添加带注释的标签<br>eg: <code>git tag -a v1.2 -m &#39;version 1.2 released&#39;</code></p>
<p><code>git tag -a &lt;tag name&gt; &lt;md5&gt;</code> ：对某个版本打标签<br>默认标签是打在最新提交的 commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？<br>方法是找到历史提交的 commit id，然后打上就可以了。<br><code>git log --pretty=oneline --abbrev-commit</code><br>比方说要对 add merge 这次提交打标签，它对应的 commit id 是 6224937，那么我们就可以使用命令：<br><code>git tag v1.2 6224937</code><br>再用命令 <code>git log</code> 查看标签</p>
<p>可以用 <code>git show &lt;tagname&gt;</code> 查看标签信息</p>
<p>如果标签打错了，也可以删除：<br><code>git tag -d v1.2</code></p>
<p>如果要推送某个标签到远程，使用命令 <code>git push origin &lt;tagname&gt;</code><br>eg: <code>git push origin v1.2</code></p>
<p>如果标签已经推送到远程，要删除远程标签就要麻烦一点，先从本地删除：<br><code>git tag -d v1.2</code><br>然后，从远程删除；删除命令也是 push ，但是格式如下：<br><code>git push origin :ref/tags/v1.2</code></p>
<p><code>git tag -l &#39;[expression]&#39;</code><br>查看那符合正则表达式的</p>
<h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p><code>git stash</code><br>备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到 Git 栈中。<br><code>git stash pop</code><br>从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个 stash 的内容，所以用栈来管理，pop 会从最近的一个 stash 中读取内容并恢复。<br><code>git stash list</code><br>显示 Git 栈中内的所有备份，可以利用这个列表来决定从哪个地方恢复。<br><code>git stash clear</code> : 清空 Git 栈。</p>
<p>使用 git 的时候，我们往往使用 branch 解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码，如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 bug，那么使用 git stash 就可以将你当前未提交到本地的代码推入到 git 的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 bug，等到修完 bug，提交到服务器上后，再使用 git stash apply 将以前一般的工作应用回来。也许有的人会说，那我可不可以多次将未提交的代码压入到栈中？答案是可以的。当你多次使用 git stash 命令后，你的栈里将充满了未提交的代码，这时候你会对将哪个版本应用回来有些困惑， git stash list 命令可以将当前的 Git 栈信息打印出来，你只需要将找到对应的版本号，例如使用 <code>git stash apply stash@{1}</code> 就可以将你指定版本号为 stash@{1} 的工作取出来，当你将所有的栈都应用回来的时候，可以使用 git stash clear 来将栈清空。<br>在这里顺便提下 git format-patch -n , n是具体某个数字， 例如 ‘git format-patch -1’ 这时便会根据log生成一个对应的补丁，如果 ‘git format-patch -2’ 那么便会生成 2 个补丁，当然前提是你的 log 上有至少有两个记录。</p>
<p>看过上面的信息，就可以知道使用场合了：当前工作区内容已被修改，但是并未完成。这时 Boss 来了，说前面的分支上面有一个 bug，需要立即修复。可是我又不想提交目前的修改，因为修改没有完成。但是，不提交的话，又没有办法 checkout 到前面的分支。此时用 git stash 就相当于备份了工作区了。然后在 checkout 过去修改，就能够达到保存当前工作区，并及时恢复的作用。</p>
<p>注意这里由于只 stash 了一次所以要使用 pop，具体你存放了多少。</p>
<h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><p>查看远程仓库名</p>
<p><code>git remote -v</code><br>查看远程仓库url</p>
<p><code>git remote add &lt;basename&gt; &lt;url&gt;</code><br>新增远程仓库</p>
<p><code>git remote show &lt;basename&gt;</code><br>查看远程仓库详细信息</p>
<p><code>git remote rename &lt;old basename&gt; &lt;new basename&gt;</code><br>重命名远程仓库</p>
<h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>暂存并提交</p>
<h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p><code>git branch</code><br>查看本地仓库分支</p>
<p><code>git branch -r</code><br>查看远程分支情况</p>
<p><code>git branch -a</code><br>查看本地和远程的所有分支情况</p>
<p><code>git branch -v</code><br>查看本地仓库分支最后一次提交情况</p>
<p><code>git branch -vv</code><br>查看分支跟踪情况</p>
<p><code>git branch &lt;branch name&gt;</code><br>新建分支</p>
<p><code>git branch -d &lt;branch name&gt;</code><br>删除分支</p>
<p><code>git branch -D &lt;branch name&gt;</code><br>强制删除分支</p>
<p><code>git branch [--merged | --no-merged]</code><br>查看已合并|未合并的本地仓库分支</p>
<p><code>git branch -u &lt;remote base&gt;/&lt;remote branch&gt;</code><br>修改当前跟踪分支</p>
<h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><p><code>git checkout -- [file]</code> ：恢复文件<br><code>git checkout -- demo.html</code> 意思就是，把 <code>demo.html</code> 文件在工作区的修改全部撤销，这里有两种情况：<br>一种是 <code>demo.html</code> 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是 <code>demo.html</code> 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加暂存区后的状态。<br>总之，就是让这个文件回到最后一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p>
<p>但是如果 <code>git add</code> 到暂存区了，在 commit 之前，想撤销：<br>Git 同样告诉我们，用命令 <code>git reset HEAD file</code> 可以把暂存区的修改撤销掉(unstage)，重新放回工作区。<br><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区，当我们用 <code>HEAD</code> 时，表示最新的版本。<br>再用 <code>git status</code> 查看一下，现在暂存区是干净的，工作区有修改：<br>还记得如果丢弃工作区的修改吗？<br>对的，使用：<code>git checkout -- demo.html</code> </p>
<p><code>git checkout</code> 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以”一键还原”。</p>
<p><code>git checkout -b [branchname] [tagname]</code><br>在特定的版本上创建一个新的分支并切换到此分支</p>
<p><code>git checkout -b [local branch] [remote base]/[remote branch]</code><br>将远程分支检出到本地分支，并追踪</p>
<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪远程分支</p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p><code>git rebase [basebranch]</code><br>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>git clone 支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等。<br>使用 https 除了速度慢意外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放 http 端口的公司内部就无法使用 ssh 协议而只能用 https。</p>
<p><code>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</code><br>如果不写本地目录名，默认就是版本库的名字</p>
<h3 id="如何新建分支"><a href="#如何新建分支" class="headerlink" title="如何新建分支"></a>如何新建分支</h3><p>本地建立 branch 並立即切换到新分支<br><code>git checkout -b &lt;branch_name&gt;</code> </p>
<p>下面的命令表示，在 <code>origin/master</code> 的基础上，创建一个分支。<br><code>git checkout -b newBranch origin/master</code></p>
<p>修改分支名称<br><code>git branch -m &lt;new_name&gt;</code></p>
<h3 id="从远程仓库拉取代码到本地仓库，并建立跟踪关系"><a href="#从远程仓库拉取代码到本地仓库，并建立跟踪关系" class="headerlink" title="从远程仓库拉取代码到本地仓库，并建立跟踪关系"></a>从远程仓库拉取代码到本地仓库，并建立跟踪关系</h3><p><code>git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;</code></p>
<h3 id="如何在远程仓库新建一个分支"><a href="#如何在远程仓库新建一个分支" class="headerlink" title="如何在远程仓库新建一个分支"></a>如何在远程仓库新建一个分支</h3><p>新建一个本地分支，按照正常流程提交完代码后，推送到远程<br><code>git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code></p>
<h3 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h3><p><code>git diff HEAD -- demo.html</code><br>命令可以查看工作区的 demo.html 和版本库里面最新版本的区别。</p>
<h3 id="忽略某些文件"><a href="#忽略某些文件" class="headerlink" title="忽略某些文件"></a>忽略某些文件</h3><p>默认方法是在当前项目目录下创建一个 .gitignore 文件，如果需要忽略的文件已经添加到版本库中，请先移除<br><code>git rm --cached [file]</code><br>不删除文件，只移除追踪。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat .gitignore</span><br><span class="line">*.[oa]</span><br><span class="line">*~</span><br></pre></td></tr></table></figure></p>
<p>文件 .gitignore 的格式规范如下：</p>
<ul>
<li>所有空行或者以注释符号 # 开头的目录都会被 git 忽略</li>
<li>可以使用标准的 glob 模式匹配</li>
<li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的目录</li>
<li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反</li>
</ul>
<h3 id="bug-分支"><a href="#bug-分支" class="headerlink" title="bug 分支"></a>bug 分支</h3><p>git 提供了一个 stash 功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作。<br><code>git stash</code><br>修改完 bug 后，回到当前分支上继续干活，工作区是干净的，刚才的工作现场存到哪里去了？<br><code>git stash list</code> ：查看 stash 列表(stash 是一个栈的结构)<br>git 把 stash 内容存在某个地方了，但是需要恢复一下，有两个办法：<br>一是用 <code>git stash apply</code> 恢复，但是恢复后，stash 内容并不删除，你需要用 <code>git stash drop</code> 来删除；<br>另一种方式是用 <code>git stash pop</code> ，恢复的同时把 stash 内容也删了；<br>你可以多次 stash ，恢复的时候，先用 <code>git stash list</code> 查看，然后恢复指定的 stash，用命令：<br><code>git stash apply stash@{0}</code></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置 Git 的时候，加上 –global 是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。<br>配置文件放哪了？<br>每个仓库的 Git 配置文件都放在 .git/config 文件中，在这份配置文件中，别名就在 [alias] 后面，要删除别名，直接把对应的行删掉即可。</p>
<h3 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h3><p><code>git config -1</code></p>
<h3 id="设置git-push-默认"><a href="#设置git-push-默认" class="headerlink" title="设置git push 默认"></a>设置git push 默认</h3><p><code>git config --global push.default current</code></p>
<h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><p><code>git config --global alias.&lt;name&gt; &lt;commend&gt;</code><br>我的设置：<br><code>git config --global alias.st status</code><br><code>git config --global alias.cm &quot;commit -m&quot;</code><br><code>git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;</code></p>
<h3 id="保存用户名和密码"><a href="#保存用户名和密码" class="headerlink" title="保存用户名和密码"></a>保存用户名和密码</h3><h4 id="对于http-s-协议，可以用下面命令临时缓存"><a href="#对于http-s-协议，可以用下面命令临时缓存" class="headerlink" title="对于http(s)协议，可以用下面命令临时缓存"></a>对于http(s)协议，可以用下面命令临时缓存</h4><p><code>git config --global credential.helper cache</code><br>开启linux缓存<br><code>git config --global credential.helper wincred</code><br>开启windows缓存</p>
<h4 id="对于-ssh-协议，可以用-ssh-key，具体教程网上很多"><a href="#对于-ssh-协议，可以用-ssh-key，具体教程网上很多" class="headerlink" title="对于 ssh 协议，可以用 ssh key，具体教程网上很多"></a>对于 ssh 协议，可以用 ssh key，具体教程网上很多</h4><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><p>git 中执行命令 <code>add .</code><br>报错：Unlink of file ‘templates/opms.exe’ failed.Should I try again?(y/n)</p>
<p>因为这个文件正在被占用，所以不能添加到暂存区，而正好这个 <code>.exe</code> 文件，我们是不需要添加到版本管理工具的。所以我们选择 <code>n</code> 。</p>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><p>git 中生成 sshkey: <code>ssh-keygen -t rsa -C &quot;youremail&quot;</code><br>这个<code>email</code>并没有什么用<br>所以我们使用<code>ssh-keygen -t rsa</code>来生成sshkey就可以了。<br>然后git中的配置文件：<br><code>git config --list</code><br><code>git config --global user.name &quot;yan&quot;</code><br><code>git config --global user.email &quot;dalaoyan@gmail.com&quot;</code><br>这种配置将会对本地所有的git仓库有效。<br>那么在 push 的时候，远程就知道这个push来自于哪个email.<br>但有时候在公司的时候，有的仓库是公司的，有的仓库是自己github的。<br>这个时候就可以不设置global的配置了，而是在自己的仓库中设置<br><code>git config --local user.email &quot;dalaoyan@gmail.com&quot;</code></p>
<h3 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h3><p>使用 windows 的同学注意了，如果你在资源管理器里新建一个 .gitignore 文件，它会提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为 .gitignore 了。<br>有些时候，你想添加一个文件到 git，但发现添加不了，原因是这个文件被 .gitignore 忽略了：<br><code>git add App.class</code><br>如果你确实想添加该文件，可以用 -f 制添加到 git：<br><code>git add -f App.class</code><br>或者你发现，可能是 .gitignore 写得有问题，需要找出来到底哪个规则写错了。<br>可以用 <code>git check-ignore</code> 命令检查：<br><code>git check-ignore -v App.class</code></p>
<h3 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h3><p>为什么我把我生成的 ssh key 添加到了 github 中<br>然后 也 remote 了 <code>https://github.com/addonepiece/Xxx.git</code><br>为什么提交的时候报错，或者提示 输入密码账号是为什么</p>
<p>ssh key 是 ssh 协议的密钥，http 协议没权限</p>
<h3 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h3><p>git怎样删除未监视的文件 untracked files?<br>用 git clean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 删除 untracked files</span><br><span class="line">git clean -f</span><br><span class="line"> </span><br><span class="line"># 连 untracked 的目录也一起删掉</span><br><span class="line">git clean -fd</span><br><span class="line"> </span><br><span class="line"># 连 gitignore 的untrack 文件/目录也一起删掉 （慎用，一般这个是用来删掉编译出来的 .o之类的文件用的）</span><br><span class="line">git clean -xfd</span><br><span class="line"> </span><br><span class="line"># 在用上述 git clean 前，墙裂建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</span><br><span class="line">git clean -nxfd</span><br><span class="line">git clean -nf</span><br><span class="line">git clean -nfd</span><br></pre></td></tr></table></figure></p>
<h2 id="我的常用命令"><a href="#我的常用命令" class="headerlink" title="我的常用命令"></a>我的常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -avv</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p><a href="http://git-scm.com/book/zh/v2" target="_blank" rel="noopener">权威教程</a><br><a href="http://iissnan.com/progit/" target="_blank" rel="noopener">Pro Git 简体中文版</a></p>
]]></content>
      
        <categories>
            
            <category> 综合 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（二）]]></title>
      <url>https://addonepiece.github.io/2016/09/30/hexo-next-two/</url>
      <content type="html"><![CDATA[<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>
<p id="div-border-left-yellow">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p>

<h4 id="1-设置侧栏的位置"><a href="#1-设置侧栏的位置" class="headerlink" title="1.设置侧栏的位置"></a>1.设置侧栏的位置</h4><p>修改 <span id="inline-purple">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<strong>left</strong> <strong>right</strong><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>
<a id="more"></a>
<h4 id="2-关于添加居中模块"><a href="#2-关于添加居中模块" class="headerlink" title="2. 关于添加居中模块"></a>2. 关于添加居中模块</h4><p><blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-添加High一下"><a href="#3-添加High一下" class="headerlink" title="3. 添加High一下"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\themes\next\layout\_partials\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt; <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"把这个链接拖到你的Chrome收藏夹工具栏中"</span> <span class="attr">href</span>=<span class="string">'javascript:(function() &#123;</span></span></span></span><br><span class="line"><span class="xml">    function c() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("link");</span></span><br><span class="line"><span class="xml">        e.setAttribute("type", "text/css");</span></span><br><span class="line"><span class="xml">        e.setAttribute("rel", "stylesheet");</span></span><br><span class="line"><span class="xml">        e.setAttribute("href", f);</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", l);</span></span><br><span class="line"><span class="xml">        document.body.appendChild(e)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function h() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.getElementsByClassName(l);</span></span><br><span class="line"><span class="xml">        for (var t = 0; t <span class="tag">&lt; <span class="attr">e.length</span>; <span class="attr">t</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">            document.body.removeChild(e[t])</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function p() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("div");</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", a);</span></span><br><span class="line"><span class="xml">        document.body.appendChild(e);</span></span><br><span class="line"><span class="xml">        setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">            document.body.removeChild(e)</span></span><br><span class="line"><span class="xml">        &#125;, 100)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function d(e) &#123;</span></span><br><span class="line"><span class="xml">        return &#123;</span></span><br><span class="line"><span class="xml">            height : e.offsetHeight,</span></span><br><span class="line"><span class="xml">            width : e.offsetWidth</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function v(i) &#123;</span></span><br><span class="line"><span class="xml">        var s = d(i);</span></span><br><span class="line"><span class="xml">        return s.height &gt; e &amp;&amp; s.height <span class="tag">&lt; <span class="attr">n</span> &amp;&amp; <span class="attr">s.width</span> &gt;</span> t &amp;&amp; s.width <span class="tag">&lt; <span class="attr">r</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function m(e) &#123;</span></span><br><span class="line"><span class="xml">        var t = e;</span></span><br><span class="line"><span class="xml">        var n = 0;</span></span><br><span class="line"><span class="xml">        while (!!t) &#123;</span></span><br><span class="line"><span class="xml">            n += t.offsetTop;</span></span><br><span class="line"><span class="xml">            t = t.offsetParent</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return n</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function g() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.documentElement;</span></span><br><span class="line"><span class="xml">        if (!!window.innerWidth) &#123;</span></span><br><span class="line"><span class="xml">            return window.innerHeight</span></span><br><span class="line"><span class="xml">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</span></span><br><span class="line"><span class="xml">            return e.clientHeight</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return 0</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function y() &#123;</span></span><br><span class="line"><span class="xml">        if (window.pageYOffset) &#123;</span></span><br><span class="line"><span class="xml">            return window.pageYOffset</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function E(e) &#123;</span></span><br><span class="line"><span class="xml">        var t = m(e);</span></span><br><span class="line"><span class="xml">        return t &gt;= w &amp;&amp; t <span class="tag">&lt;<span class="name">=</span> <span class="attr">b</span> + <span class="attr">w</span></span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    function S() &#123;</span></span><br><span class="line"><span class="xml">        var e = document.createElement("audio");</span></span><br><span class="line"><span class="xml">        e.setAttribute("class", l);</span></span><br><span class="line"><span class="xml">        e.src = i;</span></span><br><span class="line"><span class="xml">        e.loop = false;</span></span><br><span class="line"><span class="xml">        e.addEventListener("canplay", function() &#123;</span></span><br><span class="line"><span class="xml">            setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">                x(k)</span></span><br><span class="line"><span class="xml">            &#125;, 500);</span></span><br><span class="line"><span class="xml">            setTimeout(function() &#123;</span></span><br><span class="line"><span class="xml">                N();</span></span><br><span class="line"><span class="xml">                p();</span></span><br><span class="line"><span class="xml">                for (var e = 0; e <span class="tag">&lt; <span class="attr">O.length</span>; <span class="attr">e</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">                    T(O[e])</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;, 15500)</span></span><br><span class="line"><span class="xml">        &#125;, true);</span></span><br><span class="line"><span class="xml">        e.addEventListener("ended", function() &#123;</span></span><br><span class="line"><span class="xml">            N();</span></span><br><span class="line"><span class="xml">            h()</span></span><br><span class="line"><span class="xml">        &#125;, true);</span></span><br><span class="line">        e.innerHTML = " &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;";</span><br><span class="line">        document.body.appendChild(e);</span><br><span class="line">        e.play()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function x(e) &#123;</span><br><span class="line">        e.className += " " + s + " " + o</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function T(e) &#123;</span><br><span class="line">        e.className += " " + s + " " + u[Math.floor(Math.random() * u.length)]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function N() &#123;</span><br><span class="line">        var e = document.getElementsByClassName(s);</span><br><span class="line">        var t = new RegExp("\\b" + s + "\\b");</span><br><span class="line">        for (var n = 0; n &lt; e.length; ) &#123;</span><br><span class="line">            e[n].className = e[n].className.replace(t, "")</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var e = 30;</span><br><span class="line">    var t = 30;</span><br><span class="line">    var n = 350;</span><br><span class="line">    var r = 350;</span><br><span class="line">    var i = "//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3";</span><br><span class="line">    var s = "mw-harlem_shake_me";</span><br><span class="line">    var o = "im_first";</span><br><span class="line">    var u = ["im_drunk", "im_baked", "im_trippin", "im_blown"];</span><br><span class="line">    var a = "mw-strobe_light";</span><br><span class="line">    var f = "//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css";</span><br><span class="line">    var l = "mw_added_css";</span><br><span class="line">    var b = g();</span><br><span class="line">    var w = y();</span><br><span class="line">    var C = document.getElementsByTagName("*");</span><br><span class="line">    var k = null;</span><br><span class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">        var A = C[L];</span><br><span class="line">        if (v(A)) &#123;</span><br><span class="line">            if (E(A)) &#123;</span><br><span class="line">                k = A;</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (A === null) &#123;</span><br><span class="line">        console.warn("Could not find a node of the right size. Please try a different page.");</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    c();</span><br><span class="line">    S();</span><br><span class="line">    var O = [];</span><br><span class="line">    for (var L = 0; L &lt; C.length; L++) &#123;</span><br><span class="line">        var A = C[L];</span><br><span class="line">        if (v(A)) &#123;</span><br><span class="line">            O.push(A)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="xml">    &#125;)()    '&gt;High一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-添加最近访客"><a href="#4-添加最近访客" class="headerlink" title="4. 添加最近访客"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最近访客</span><br><span class="line">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-鼠标点击小红心的设置"><a href="#5-鼠标点击小红心的设置" class="headerlink" title="5. 鼠标点击小红心的设置"></a>5. 鼠标点击小红心的设置</h4><ol>
<li>将 <a href="https://github.com/addonepiece/addonepiece.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。</li>
<li>找到 <code>\themes\next\layout\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code> 标签之前 </strong> 添加以下代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="6-背景的设置"><a href="#6-背景的设置" class="headerlink" title="6. 背景的设置"></a>6. 背景的设置</h4><ol>
<li>将 <a href="https://github.com/addonepiece/addonepiece.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 文件添加到 \themes\next\source\js\src 文件目录下。</li>
<li>找到 <code>\themes\next\layout\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="7-修改文章内链接文本样式"><a href="#7-修改文章内链接文本样式" class="headerlink" title="7.修改文章内链接文本样式"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\next\source\css\_custom\custom.styl</code> ，添加如下 css 样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#0477ab</span>;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="8-多说评论不稳定，加载速度慢怎么办？"><a href="#8-多说评论不稳定，加载速度慢怎么办？" class="headerlink" title="8. 多说评论不稳定，加载速度慢怎么办？"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的 embed.js 放置底部，这里需要修改的文件是 duoshuo.swig。<br>将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(document.getElementsByTagName(&apos;head&apos;)[0]</span><br></pre></td></tr></table></figure></p>
<p>修改成下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(document.getElementById(&apos;footer&apos;)</span><br></pre></td></tr></table></figure></p>
<h4 id="9-给-Github-添加-README"><a href="#9-给-Github-添加-README" class="headerlink" title="9. 给 Github 添加 README"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份 README.md 的文件来作为项目的说明，但是我们在项目根目录下的 blog\source 目录下创建一份 README.md 文件，写好说明介绍，部署的时候，这个 README.md 会被 hexo 解析掉，而不会被解析到 Github 中去的。<br>正确的解决方法其实很简单：<br><strong> 把 README.md 文件的后缀名改成 “MDOWN” 然后扔到<code>blog/source</code>文件夹下即可，这样 hexo 不会解析，Github 也会将其作为 MD 文件解析。 </strong></p>
<h4 id="10-给-Blog-添加-LICENSE"><a href="#10-给-Blog-添加-LICENSE" class="headerlink" title="10. 给 Blog 添加 LICENSE"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id="inline-purple">主题配置文件</span> 中的 160 行左右：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># http://creativecommons.org/</span><br><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">creative_commons: by-nc-sa</span><br><span class="line">#creative_commons:</span><br></pre></td></tr></table></figure></p>
<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/addonepiece/addonepiece.github.io" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如果太湖的夜晚没有风]]></title>
      <url>https://addonepiece.github.io/2016/09/25/essay-20160925/</url>
      <content type="html"><![CDATA[<p id="div-border-top-green">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>

<p><br></p>
<a id="more"></a>
<p>其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a> 主题的广告是不是很硬。</p>
<p>在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——<a href="https://addonepiece.github.io/weblog/">我的建站日志</a>有记录网站的建设过程。</p>
<p>究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。</p>
<p>后来，无意中看到了 Hexo 的 Next 主题的一篇博客，风格样式挺不错的，感谢 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 和 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a> 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo-NexT搭建个人博客（一）]]></title>
      <url>https://addonepiece.github.io/2016/09/03/hexo-next-one/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 。 它有以下特点：</p>
<ul>
<li><i class="fa fa-bolt"></i><h6 style="display: inline;">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>
<li><i class="fa fa-pencil"></i><h6 style="display: inline;">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>
<li><i class="fa fa-cloud-upload"></i><h6 style="display: inline;">　一键部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>
<li><i class="fa fa-cog"></i><h6 style="display: inline;">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>
</ul>
<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">标签插件</a> 来快速的插入特定形式的内容。</p>
<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>。<br><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 因其 <span id="yu-1">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href="https://addonepiece.github.io/guestbook/">提交问题</a>，我会尽力解决你的问题。</p>
<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>
<blockquote>
<p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a><br><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></p>
</blockquote>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>
<h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul>
<li>Windows：下载安装 git 。<a id="download" href="https://git-scm.com/download/win" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a></li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>，<a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装</li>
<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>
<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>
</ul>
<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> ，首先需要下载安装 nvm 。<a id="download" href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">$ nvm install latest</span><br></pre></td></tr></table></figure></p>
<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>
<p id="div-border-left-red">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id="download" href="https://nodejs.org/en/download/" target="_blank" rel="noopener"><i class="fa fa-download"></i><span> Download Now</span><br></a> </p>

<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id="inline-green">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p>
<p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└──</span><br></pre></td></tr></table></figure></p>
<p>我们继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>
<p>Hexo 将 source 文件夹中除 _posts 文件夹之外，开头命名为 _(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src="/images/hexo-next-one-1.png" alt="hexo-next-one-1"></p>
<h2 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h2><h3 id="下载-NexT-主题"><a href="#下载-NexT-主题" class="headerlink" title="下载 NexT 主题"></a>下载 NexT 主题</h3><p>依旧是在当前目录下，使用 Git 来 checkout 代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p id="div-border-left-red">提示：原作者 iissnan 已经停止更新 hexo-theme-next；所以，如果你想使用 5.x 之前的版本可以使用上面的链接下载 NexT 主题；如果你想体验 6.x 之后的新版本，请使用下面的链接。<br></p>

<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>等待下载完成。</p>
<p id="div-border-left-yellow">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id="inline-blue">站点配置文件</span>，后者称为 <span id="inline-purple">主题配置文件</span></p>

<h3 id="启用-NexT-主题"><a href="#启用-NexT-主题" class="headerlink" title="启用 NexT 主题"></a>启用 NexT 主题</h3><p>打开 <span id="inline-blue">站点配置文件</span> ，找到 theme 字段，并将其值更改为 next 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>
<h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>此时即可使用浏览器访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，检查站点是否正确运行。</p>
<p id="div-border-left-green">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src="/images/hexo-next-one-2.png" alt="hexo-next-one-2"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id="div-border-top-blue">关于更多基本操作和基础知识，请查阅 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 与 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT</a> 官方文档.</p>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="本地调试步骤"><a href="#本地调试步骤" class="headerlink" title="本地调试步骤"></a>本地调试步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s --debug</span><br></pre></td></tr></table></figure></p>
<p>这种带 debug 的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>
<h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>三部曲：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p>
<p>当然在部署之前，需要先配置好配置文件中的 deploy。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"postName"</span>  <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment"># 新建页面</span></span><br><span class="line">$ hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">$ hexo server <span class="comment"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></span><br><span class="line">$ hexo deploy <span class="comment"># 项目部署</span></span><br><span class="line">$ hexo <span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">$ hexo version <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
<h2 id="简写命令"><a href="#简写命令" class="headerlink" title="简写命令"></a>简写命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new == hexo n</span><br><span class="line">$ hexo generate == hexo g</span><br><span class="line">$ hexo server == hexo s</span><br><span class="line">$ hexo deploy == hexo d</span><br></pre></td></tr></table></figure>
<h2 id="常见问题1"><a href="#常见问题1" class="headerlink" title="常见问题1"></a>常见问题1</h2><p>在 hexo 的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author:dalaoyan</span><br><span class="line">email:addonepiece@sina.com</span><br><span class="line">language:zh-CN</span><br></pre></td></tr></table></figure></p>
<p>正确的设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author: dalaoyan</span><br><span class="line">email: addonepiece@sina.com</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p>
<h2 id="常见问题2"><a href="#常见问题2" class="headerlink" title="常见问题2"></a>常见问题2</h2><p>关于 Git 提交中用户名和 Email 的设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your name&quot;</span><br><span class="line">git config --global user.email &quot;Your email&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="常见问题3"><a href="#常见问题3" class="headerlink" title="常见问题3"></a>常见问题3</h2><p>Hexo 中的图标使用的是 <a href="http://fontawesome.io/" target="_blank" rel="noopener">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class="fa fa-github"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-lg"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class="fa fa-github fa-2x"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>
<p></p><h5 style="color:#f63;"><i>最后要说的是：</i></h5><p></p>
<p id="div-border-top-green"><i><a href="https://github.com/addonepiece/addonepiece.github.io" target="_blank" rel="noopener">博客源码</a> ， 欢迎 star<br></i></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
